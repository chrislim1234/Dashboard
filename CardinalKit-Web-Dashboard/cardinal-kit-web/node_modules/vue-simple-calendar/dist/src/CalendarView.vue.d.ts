import { PropType } from "vue";
import { ICalendarItem, INormalizedCalendarItem, DateTimeFormatOption } from "./ICalendarItem";
import { IHeaderProps } from "./IHeaderProps";
declare const _sfc_main: import("vue").DefineComponent<{
    showDate: {
        type: DateConstructor;
        default: undefined;
    };
    displayPeriodUom: {
        type: StringConstructor;
        default: string;
    };
    displayPeriodCount: {
        type: NumberConstructor;
        default: number;
    };
    displayWeekNumbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    locale: {
        type: StringConstructor;
        default: undefined;
    };
    monthNameFormat: {
        type: PropType<DateTimeFormatOption>;
        default: string;
    };
    weekdayNameFormat: {
        type: PropType<DateTimeFormatOption>;
        default: string;
    };
    showTimes: {
        type: BooleanConstructor;
        default: boolean;
    };
    timeFormatOptions: {
        type: ObjectConstructor;
        default: () => void;
    };
    disablePast: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableFuture: {
        type: BooleanConstructor;
        default: boolean;
    };
    enableDateSelection: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectionStart: {
        type: DateConstructor;
        default: null;
    };
    selectionEnd: {
        type: DateConstructor;
        default: null;
    };
    enableDragDrop: {
        type: BooleanConstructor;
        default: boolean;
    };
    startingDayOfWeek: {
        type: NumberConstructor;
        default: number;
    };
    items: {
        type: () => Array<ICalendarItem>;
        default: () => never[];
    };
    dateClasses: {
        type: ObjectConstructor;
        default: () => void;
    };
    itemTop: {
        type: StringConstructor;
        default: string;
    };
    itemContentHeight: {
        type: StringConstructor;
        default: string;
    };
    itemBorderHeight: {
        type: StringConstructor;
        default: string;
    };
    periodChangedCallback: {
        type: FunctionConstructor;
        default: undefined;
    };
    currentPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    currentPeriodLabelIcons: {
        type: StringConstructor;
        default: string;
    };
    doEmitItemMouseEvents: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
        showDate: {
            type: DateConstructor;
            default: undefined;
        };
        displayPeriodUom: {
            type: StringConstructor;
            default: string;
        };
        displayPeriodCount: {
            type: NumberConstructor;
            default: number;
        };
        displayWeekNumbers: {
            type: BooleanConstructor;
            default: boolean;
        };
        locale: {
            type: StringConstructor;
            default: undefined;
        };
        monthNameFormat: {
            type: PropType<DateTimeFormatOption>;
            default: string;
        };
        weekdayNameFormat: {
            type: PropType<DateTimeFormatOption>;
            default: string;
        };
        showTimes: {
            type: BooleanConstructor;
            default: boolean;
        };
        timeFormatOptions: {
            type: ObjectConstructor;
            default: () => void;
        };
        disablePast: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableFuture: {
            type: BooleanConstructor;
            default: boolean;
        };
        enableDateSelection: {
            type: BooleanConstructor;
            default: boolean;
        };
        selectionStart: {
            type: DateConstructor;
            default: null;
        };
        selectionEnd: {
            type: DateConstructor;
            default: null;
        };
        enableDragDrop: {
            type: BooleanConstructor;
            default: boolean;
        };
        startingDayOfWeek: {
            type: NumberConstructor;
            default: number;
        };
        items: {
            type: () => Array<ICalendarItem>;
            default: () => never[];
        };
        dateClasses: {
            type: ObjectConstructor;
            default: () => void;
        };
        itemTop: {
            type: StringConstructor;
            default: string;
        };
        itemContentHeight: {
            type: StringConstructor;
            default: string;
        };
        itemBorderHeight: {
            type: StringConstructor;
            default: string;
        };
        periodChangedCallback: {
            type: FunctionConstructor;
            default: undefined;
        };
        currentPeriodLabel: {
            type: StringConstructor;
            default: string;
        };
        currentPeriodLabelIcons: {
            type: StringConstructor;
            default: string;
        };
        doEmitItemMouseEvents: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onInput?: ((...args: any[]) => any) | undefined;
        "onPeriod-changed"?: ((...args: any[]) => any) | undefined;
        "onClick-date"?: ((...args: any[]) => any) | undefined;
        "onClick-item"?: ((...args: any[]) => any) | undefined;
        "onItem-mouseenter"?: ((...args: any[]) => any) | undefined;
        "onItem-mouseleave"?: ((...args: any[]) => any) | undefined;
        "onDrag-start"?: ((...args: any[]) => any) | undefined;
        "onDrag-over-date"?: ((...args: any[]) => any) | undefined;
        "onDrag-enter-date"?: ((...args: any[]) => any) | undefined;
        "onDrag-leave-date"?: ((...args: any[]) => any) | undefined;
        "onDrop-on-date"?: ((...args: any[]) => any) | undefined;
        "onDate-selection"?: ((...args: any[]) => any) | undefined;
        "onDate-selection-start"?: ((...args: any[]) => any) | undefined;
        "onDate-selection-finish"?: ((...args: any[]) => any) | undefined;
    }>>;
    emit: (event: "input" | "period-changed" | "click-date" | "click-item" | "item-mouseenter" | "item-mouseleave" | "drag-start" | "drag-over-date" | "drag-enter-date" | "drag-leave-date" | "drop-on-date" | "date-selection" | "date-selection-start" | "date-selection-finish", ...args: any[]) => void;
    state: {
        currentDragItem: {
            endDate: {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleDateString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleTimeString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                getVarDate: () => VarDate;
                [Symbol.toPrimitive]: {
                    (hint: "default"): string;
                    (hint: "string"): string;
                    (hint: "number"): number;
                    (hint: string): string | number;
                };
            };
            originalItem: {
                id: string;
                startDate: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                };
                title: string;
                tooltip?: string | undefined;
                endDate?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | undefined;
                url?: string | undefined;
                classes?: string[] | null | undefined;
                style?: string | undefined;
            };
            classes: string[];
            itemRow?: number | undefined;
            id: string;
            startDate: {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleDateString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleTimeString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                getVarDate: () => VarDate;
                [Symbol.toPrimitive]: {
                    (hint: "default"): string;
                    (hint: "string"): string;
                    (hint: "number"): number;
                    (hint: string): string | number;
                };
            };
            title: string;
            tooltip?: string | undefined;
            url?: string | undefined;
            style?: string | undefined;
        } | null;
        dateSelectionOrigin: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        } | null;
        currentHoveredItemId: string;
        CalendarMath: object;
    };
    displayLocale: import("vue").ComputedRef<string>;
    defaultedShowDate: import("vue").ComputedRef<Date>;
    periodStart: import("vue").ComputedRef<Date>;
    periodEnd: import("vue").ComputedRef<Date>;
    periodStartCalendarWeek: import("vue").ComputedRef<number>;
    displayFirstDate: import("vue").ComputedRef<Date>;
    displayLastDate: import("vue").ComputedRef<Date>;
    weeksOfPeriod: import("vue").ComputedRef<Date[]>;
    monthNames: import("vue").ComputedRef<string[]>;
    weekdayNames: import("vue").ComputedRef<string[]>;
    fixedItems: import("vue").ComputedRef<INormalizedCalendarItem[]>;
    currentPeriodStart: import("vue").ComputedRef<Date>;
    currentPeriodEnd: import("vue").ComputedRef<Date>;
    periodLabel: import("vue").ComputedRef<string>;
    currentPeriodLabelFinal: import("vue").ComputedRef<string>;
    headerProps: import("vue").ComputedRef<IHeaderProps>;
    periodRange: import("vue").ComputedRef<{
        periodStart: import("vue").ComputedRef<Date>;
        periodEnd: import("vue").ComputedRef<Date>;
        displayFirstDate: import("vue").ComputedRef<Date>;
        displayLastDate: import("vue").ComputedRef<Date>;
    }>;
    onClickDay: (day: Date, windowEvent: Event) => void;
    onClickItem: (calendarItem: ICalendarItem, windowEvent: Event) => void;
    getColumnDOWClass: (dayIndex: number) => string;
    getIncrementedPeriod: (count: number) => Date | null;
    onMouseEnterItem: (calendarItem: ICalendarItem, windowEvent: Event) => void;
    onMouseLeaveItem: (calendarItem: ICalendarItem, windowEvent: Event) => void;
    onDragDateStart: (day: Date, windowEvent: DragEvent) => boolean;
    onDragItemStart: (calendarItem: INormalizedCalendarItem, windowEvent: DragEvent) => boolean;
    handleDragEvent: (bubbleEventName: "drag-over-date" | "drag-enter-date" | "drag-leave-date" | "drop-on-date", bubbleParam: any, windowEvent: Event) => boolean;
    onDragOver: (day: Date, windowEvent: Event) => void;
    onDragEnter: (day: Date, windowEvent: Event) => void;
    onDragLeave: (day: Date, windowEvent: Event) => void;
    onDrop: (day: Date, windowEvent: Event) => void;
    emitDateSelection: (eventName: "date-selection" | "date-selection-start" | "date-selection-finish", toDate: Date, windowEvent: Event) => void;
    itemComparer: (a: INormalizedCalendarItem, b: INormalizedCalendarItem) => 1 | -1;
    findAndSortItemsInWeek: (weekStart: Date) => Array<INormalizedCalendarItem>;
    findAndSortItemsInDateRange: (startDate: Date, endDate: Date) => Array<INormalizedCalendarItem>;
    dayHasItems: (day: Date) => boolean;
    dayIsSelected: (day: Date) => boolean;
    getWeekItems: (weekStart: Date) => Array<INormalizedCalendarItem>;
    getFormattedTimeRange: (item: INormalizedCalendarItem) => string;
    getItemTitle: (item: INormalizedCalendarItem) => string;
    getItemTop: (item: INormalizedCalendarItem) => string;
    CalendarMath: {
        addDays: (d: Date, days: number) => Date;
        beginningOfMonth: (d: Date) => Date;
        beginningOfPeriod: (d: Date, periodUom: string, startDow: number) => Date;
        beginningOfWeek: (d: Date, startDow: number) => Date;
        dateOnly: (d: string | Date) => Date;
        dayDiff: (d1: Date, d2: Date) => number;
        daysOfWeek: (weekStart: Date) => Date[];
        endOfWeek: (d: Date, startDow: number) => Date;
        formattedPeriod: (startDate: Date, endDate: Date, periodUom: string, monthNames: string[]) => string;
        formattedTime: (d: Date, locale: string, options?: Intl.DateTimeFormatOptions | undefined) => string;
        fromIsoStringToLocalDate: (s: string) => Date;
        getDefaultBrowserLocale: () => string;
        getFormattedMonthNames: (locale: string, format: DateTimeFormatOption) => string[];
        getFormattedWeekdayNames: (locale: string, format: DateTimeFormatOption, startingDayOfWeek: number) => string[];
        incrementPeriod: (d: Date, uom: string, count: number) => Date;
        instanceOfMonth: (d: Date) => number;
        isFutureMonth: (d: Date) => boolean;
        isInFuture: (d: Date) => boolean;
        isInPast: (d: Date) => boolean;
        isLastDayOfMonth: (d: Date) => boolean;
        isLastInstanceOfMonth: (d: Date) => boolean;
        isoMonthDay: (d: Date) => string;
        isoYearMonth: (d: Date) => string;
        isoYearMonthDay: (d: Date) => string;
        isPastMonth: (d: Date) => boolean;
        isSameDate: (d1: Date, d2: Date) => boolean;
        isSameDateTime: (d1: Date, d2: Date) => boolean;
        isSameMonth: (d1: Date, d2: Date) => boolean;
        languageCode: (l: string) => string;
        normalizeItem: (item: ICalendarItem, isHovered: boolean) => INormalizedCalendarItem;
        paddedDay: (d: Date) => string;
        paddedMonth: (d: Date) => string;
        supportsIntl: () => boolean;
        today: () => Date;
        toLocalDate: (d: any) => Date;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("input" | "period-changed" | "click-date" | "click-item" | "item-mouseenter" | "item-mouseleave" | "drag-start" | "drag-over-date" | "drag-enter-date" | "drag-leave-date" | "drop-on-date" | "date-selection" | "date-selection-start" | "date-selection-finish")[], "input" | "period-changed" | "click-date" | "click-item" | "item-mouseenter" | "item-mouseleave" | "drag-start" | "drag-over-date" | "drag-enter-date" | "drag-leave-date" | "drop-on-date" | "date-selection" | "date-selection-start" | "date-selection-finish", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    showDate: {
        type: DateConstructor;
        default: undefined;
    };
    displayPeriodUom: {
        type: StringConstructor;
        default: string;
    };
    displayPeriodCount: {
        type: NumberConstructor;
        default: number;
    };
    displayWeekNumbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    locale: {
        type: StringConstructor;
        default: undefined;
    };
    monthNameFormat: {
        type: PropType<DateTimeFormatOption>;
        default: string;
    };
    weekdayNameFormat: {
        type: PropType<DateTimeFormatOption>;
        default: string;
    };
    showTimes: {
        type: BooleanConstructor;
        default: boolean;
    };
    timeFormatOptions: {
        type: ObjectConstructor;
        default: () => void;
    };
    disablePast: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableFuture: {
        type: BooleanConstructor;
        default: boolean;
    };
    enableDateSelection: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectionStart: {
        type: DateConstructor;
        default: null;
    };
    selectionEnd: {
        type: DateConstructor;
        default: null;
    };
    enableDragDrop: {
        type: BooleanConstructor;
        default: boolean;
    };
    startingDayOfWeek: {
        type: NumberConstructor;
        default: number;
    };
    items: {
        type: () => Array<ICalendarItem>;
        default: () => never[];
    };
    dateClasses: {
        type: ObjectConstructor;
        default: () => void;
    };
    itemTop: {
        type: StringConstructor;
        default: string;
    };
    itemContentHeight: {
        type: StringConstructor;
        default: string;
    };
    itemBorderHeight: {
        type: StringConstructor;
        default: string;
    };
    periodChangedCallback: {
        type: FunctionConstructor;
        default: undefined;
    };
    currentPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    currentPeriodLabelIcons: {
        type: StringConstructor;
        default: string;
    };
    doEmitItemMouseEvents: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onInput?: ((...args: any[]) => any) | undefined;
    "onPeriod-changed"?: ((...args: any[]) => any) | undefined;
    "onClick-date"?: ((...args: any[]) => any) | undefined;
    "onClick-item"?: ((...args: any[]) => any) | undefined;
    "onItem-mouseenter"?: ((...args: any[]) => any) | undefined;
    "onItem-mouseleave"?: ((...args: any[]) => any) | undefined;
    "onDrag-start"?: ((...args: any[]) => any) | undefined;
    "onDrag-over-date"?: ((...args: any[]) => any) | undefined;
    "onDrag-enter-date"?: ((...args: any[]) => any) | undefined;
    "onDrag-leave-date"?: ((...args: any[]) => any) | undefined;
    "onDrop-on-date"?: ((...args: any[]) => any) | undefined;
    "onDate-selection"?: ((...args: any[]) => any) | undefined;
    "onDate-selection-start"?: ((...args: any[]) => any) | undefined;
    "onDate-selection-finish"?: ((...args: any[]) => any) | undefined;
}, {
    showDate: Date;
    displayPeriodUom: string;
    displayPeriodCount: number;
    displayWeekNumbers: boolean;
    locale: string;
    monthNameFormat: DateTimeFormatOption;
    weekdayNameFormat: DateTimeFormatOption;
    showTimes: boolean;
    timeFormatOptions: Record<string, any>;
    disablePast: boolean;
    disableFuture: boolean;
    enableDateSelection: boolean;
    selectionStart: Date;
    selectionEnd: Date;
    enableDragDrop: boolean;
    startingDayOfWeek: number;
    items: ICalendarItem[];
    dateClasses: Record<string, any>;
    itemTop: string;
    itemContentHeight: string;
    itemBorderHeight: string;
    periodChangedCallback: Function;
    currentPeriodLabel: string;
    currentPeriodLabelIcons: string;
    doEmitItemMouseEvents: boolean;
}>;
export default _sfc_main;
