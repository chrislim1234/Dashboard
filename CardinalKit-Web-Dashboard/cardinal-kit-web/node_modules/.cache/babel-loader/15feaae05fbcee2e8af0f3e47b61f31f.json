{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapGetters, mapActions } from \"vuex\";\nimport store from \"@/store\";\nimport altTable from '@/components/tables/altTable';\nimport modal from \"@/components/modals/modal.vue\";\nexport default {\n  name: \"SurveysList\",\n\n  data() {\n    return {\n      columns: [{\n        header: 'Name'\n      }, {\n        header: 'Action'\n      }],\n      surveyData: [],\n      currentPage: 1,\n      limit: 10\n    };\n  },\n\n  components: {\n    altTable,\n    modal\n  },\n  computed: { ...mapGetters(\"user\", [\"getUserRol\", \"getUserId\"]),\n    ...mapGetters(\"surveys\", [\"getSurveysData\"]),\n\n    paginationOptions() {\n      return {\n        limit: [10, 20],\n        total: this.surveyData.length,\n        currentPage: this.currentPage\n      };\n    },\n\n    getPageItems() {\n      if (this.surveyData) {\n        let items = this.surveyData;\n        let lowerLimit = (this.currentPage - 1) * this.limit;\n        let upperLimit = this.currentPage * this.limit;\n        return items.slice(lowerLimit, upperLimit);\n      }\n\n      return {};\n    }\n\n  },\n  methods: { ...mapActions(\"surveys\", [\"DeleteSurvey\", \"UpdateSurveyData\"]),\n\n    surveysListData() {\n      let data = [];\n      let list = this.getSurveysData(this.studyId);\n\n      for (const [key, value] of Object.entries(list)) {\n        data.push({ ...value,\n          name: key\n        });\n      }\n\n      this.surveyData = [...data];\n    },\n\n    remove(name) {\n      this.DeleteSurvey({\n        studyId: this.studyId,\n        surveyId: name\n      }).then(() => {\n        this.surveyData = this.surveyData.filter(obj => obj.data.identifier != name);\n      });\n    },\n\n    create() {\n      this.$router.push(`/surveysBuilder/${this.studyId}/`);\n    },\n\n    edit(survey) {\n      this.$router.push(`/edit/surveyBuilder/${this.studyId}/${survey}`);\n    },\n\n    details(survey) {\n      this.$router.push(`/surveyDetail/${this.studyId}/${survey}`);\n    },\n\n    schedule() {\n      this.$router.push(`/surveyScheduler/${this.studyId}`);\n    },\n\n    handlePagination(pagination) {\n      this.currentPage = pagination.currentPage;\n      this.limit = pagination.limit;\n      let total = this.surveyData.length;\n\n      if (this.currentPage > Math.ceil(total / this.limit)) {\n        this.currentPage = Math.ceil(total / this.limit);\n      }\n    }\n\n  },\n  props: {\n    studyId: {\n      type: String,\n      required: true\n    }\n  },\n\n  created() {\n    this.surveysListData();\n  },\n\n  beforeRouteEnter(to, from, next) {\n    Promise.all([store.dispatch(\"surveys/FetchAllSurveysData\", {\n      studyId: to.params.studyId\n    })]).then(() => {\n      next();\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/views/surveys/surveysList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"page\">\n    <br />\n    <div  class=\"my-2\">\n      <h1 class=\"text-muted\">Survey</h1>\n    </div>\n    <alt-table :columns=\"columns\" pagination \n      :paginationOptions=\"paginationOptions\"\n      @onPagination=\"handlePagination\"\n    >\n    <template #t-row>\n      <tr v-for=\"survey in getPageItems\" :key=\"survey.data.identifier\">\n        <td v-if=\"!survey.deleted\">\n          {{survey.data.title}}\n        </td>\n        <td v-if=\"!survey.deleted\">\n          <a class=\"button mr-1\" @click=\"details(survey.data.identifier)\">Details</a>\n          <a class=\"button mr-1\" @click=\"edit(survey.data.identifier)\">Edit</a>\n          <modal\n            :label=\"'Remove'\"\n            :name=\"survey.data.identifier\"\n            title=\"Are you sure?\"\n            content=\"Do you want to delete the survey?\"\n            @accept=\"remove\"\n          />\n        </td>\n      </tr>\n    </template>\n    </alt-table>\n    <div  class=\"btn-content mt-2\">\n      <button @click=\"schedule\">Scheduler</button>\n      <button @click=\"create\">Create new survey</button>\n    </div>\n    <br />\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from \"vuex\";\nimport store from \"@/store\";\nimport altTable from '@/components/tables/altTable';\nimport modal from \"@/components/modals/modal.vue\"\n\nexport default {\n  name: \"SurveysList\",\n  data(){\n    return{\n      columns: [{ header: 'Name' }, { header: 'Action' }],\n      surveyData: [],\n      currentPage: 1,\n      limit: 10,\n    }\n  },\n  components: {\n    altTable,\n    modal\n  },\n  computed: {\n    ...mapGetters(\"user\", [\"getUserRol\",\"getUserId\"]),\n    ...mapGetters(\"surveys\",[\"getSurveysData\"]),\n    paginationOptions() {\n      return {\n        limit: [10, 20],\n        total: this.surveyData.length,\n        currentPage: this.currentPage,\n      };\n    },\n     getPageItems() {\n      if (this.surveyData){\n        let items = this.surveyData;\n        let lowerLimit = (this.currentPage - 1) * this.limit;\n        let upperLimit = this.currentPage * this.limit;\n        return items.slice(lowerLimit, upperLimit);\n      }\n      return {}\n    },\n  },\n  methods: {\n    ...mapActions(\"surveys\", [\"DeleteSurvey\", \"UpdateSurveyData\"]),\n    surveysListData(){\n      let data = []\n      \n      let list = this.getSurveysData(this.studyId)\n      for (const [key, value] of Object.entries(list)) {\n        data.push({...value, name: key})\n      }\n      this.surveyData = [...data]\n    },\n    remove(name) {\n      this.DeleteSurvey({\n      studyId: this.studyId,\n        surveyId: name,\n      }).then(()=>{\n        this.surveyData = this.surveyData.filter((obj) =>  obj.data.identifier != name )\n      })\n    },\n    create(){\n      this.$router.push(`/surveysBuilder/${this.studyId}/`)\n    },\n    edit(survey){\n      this.$router.push(`/edit/surveyBuilder/${this.studyId}/${survey}`)\n    },\n    details(survey) {\n      this.$router.push(`/surveyDetail/${this.studyId}/${survey}`)\n    },\n    schedule() {\n      this.$router.push(`/surveyScheduler/${this.studyId}`)\n    },\n    handlePagination(pagination) {\n      this.currentPage=pagination.currentPage\n      this.limit=pagination.limit\n      let total = this.surveyData.length\n      if(this.currentPage > Math.ceil(total/this.limit)){\n        this.currentPage = Math.ceil(total/this.limit)\n      }\n    },\n  },\n  props: {\n    studyId: {\n      type: String,\n      required: true,\n    }\n  },\n  created(){\n    this.surveysListData()\n  },\n  beforeRouteEnter(to, from, next) {\n    Promise.all([\n      store.dispatch(\"surveys/FetchAllSurveysData\",{studyId:to.params.studyId})])\n      .then(() => {\n      next();\n    });\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n  .btn-content {\n    margin-bottom: 10px;\n    margin-top: 10px;\n    display: flex;\n    justify-content: space-between;\n  }\n</style>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}