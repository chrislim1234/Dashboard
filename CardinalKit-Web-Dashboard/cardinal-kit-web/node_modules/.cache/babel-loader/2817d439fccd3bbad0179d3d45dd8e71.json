{"ast":null,"code":"import { toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, renderList as _renderList, Fragment as _Fragment, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"wrapper\"\n};\nconst _hoisted_3 = {\n  class: \"input-form\"\n};\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Edit Surveys Builder\", -1);\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"label\", null, \"Enter the title: \", -1);\n\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"label\", null, \"Enter the subtitle: \", -1);\n\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"label\", {\n  class: \"my-4\"\n}, \"Show on main screen: \", -1);\n\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"label\", null, \"Order: \", -1);\n\nconst _hoisted_13 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"label\", null, \"Section: \", -1);\n\nconst _hoisted_15 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_17 = {\n  class: \"form-group\"\n};\nconst _hoisted_18 = {\n  class: \"form-group\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Question = _resolveComponent(\"Question\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.surveys ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [$data.errMsg ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: _normalizeClass($data.cl)\n  }, _toDisplayString($data.msg), 3)) : _createCommentVNode(\"\", true), _hoisted_4, _hoisted_5, _hoisted_6, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.surveys.title = $event),\n    type: \"text\",\n    placeholder: \"Title\"\n  }, null, 512), [[_vModelText, $data.surveys.title]]), _hoisted_7, _hoisted_8, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.surveys.subtitle = $event),\n    type: \"text\",\n    placeholder: \"Subtitle\"\n  }, null, 512), [[_vModelText, $data.surveys.subtitle]]), _hoisted_9, _hoisted_10, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.surveys.main = $event),\n    type: \"checkbox\"\n  }, null, 512), [[_vModelCheckbox, $data.surveys.main]]), _hoisted_11, _hoisted_12, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.surveys.order = $event),\n    type: \"number\",\n    min: \"1\",\n    pattern: \"^[0-9]+\"\n  }, null, 512), [[_vModelText, $data.surveys.order]]), _hoisted_13, _hoisted_14, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.surveys.section = $event),\n    type: \"text\",\n    placeholder: \"Section\"\n  }, null, 512), [[_vModelText, $data.surveys.section]]), _hoisted_15, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.newQuestionsData, question => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: question.id\n    }, [_createVNode(_component_Question, {\n      disabledSelect: question.disabled,\n      question: question,\n      onDeleteQuestion: $options.deleteQuestions,\n      ref_for: true,\n      ref: question.id\n    }, null, 8, [\"disabledSelect\", \"question\", \"onDeleteQuestion\"])]);\n  }), 128)), _hoisted_16, _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.addQuestion && $options.addQuestion(...args)),\n    type: \"button\",\n    class: \"btn btn-secondary\"\n  }, \" Add question \")]), _createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.updateSurvey && $options.updateSurvey(...args)),\n    type: \"button\",\n    class: \"btn btn-primary\"\n  }, \" Update \")])])])) : _createCommentVNode(\"\", true)]);\n}","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/components/surveys/SurveyBuilder/editSurveyBuilder.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div  id=\"app\">\n    <div class=\"wrapper\" v-if=\"surveys\">\n      <div class=\"input-form\">\n        <div :class=\"cl\" v-if=\"errMsg\">\n          {{msg}}\n        </div>\n        <h1>Edit Surveys Builder</h1>\n        <br />\n        <label>Enter the title: </label>\n        <input v-model=\"surveys.title\" type=\"text\" placeholder=\"Title\" />\n        <br>\n        <label>Enter the subtitle: </label>\n        <input v-model=\"surveys.subtitle\" type=\"text\" placeholder=\"Subtitle\" />\n        <br>\n        <label class=\"my-4\">Show on main screen: </label>\n        <input v-model=\"surveys.main\" type=\"checkbox\" />\n        <br />\n        <label>Order: </label>\n        <input v-model=\"surveys.order\" type=\"number\"  min=\"1\" pattern=\"^[0-9]+\"/>\n        <br>\n        <label>Section: </label>\n        <input v-model=\"surveys.section\" type=\"text\" placeholder=\"Section\" />\n        <!-- <br>\n        <label>Icon: </label>\n        <input type=\"file\" placeholder=\"Icon\" accept=\"image/*\" /> -->\n        <br>\n        <div v-for=\"question in newQuestionsData\" :key=\"question.id\">\n          <Question :disabledSelect=\"question.disabled\" :question=\"question\" @DeleteQuestion=\"deleteQuestions\" :ref=\"question.id\"/>\n        </div>\n        <br />\n        <div class=\"form-group\">\n          <button @click=\"addQuestion\" type=\"button\" class=\"btn btn-secondary\">\n            Add question\n          </button>\n        </div>\n        <div class=\"form-group\">\n          <button @click=\"updateSurvey\" type=\"button\" class=\"btn btn-primary\">\n            Update\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Question from \"@/components/surveys/SurveyBuilder/Questions\";\nimport { mapActions, mapGetters } from \"vuex\";\nimport store from \"@/store\";\nimport { uuidv4 } from \"@/helpers\";\nimport Swal from 'sweetalert2'\n\nexport default {\n  name: \"App\",\n  props: {\n    studyId: {\n      type: String,\n      required: true,\n    }\n  },\n  data() {\n    return {\n      surveyId: this.$route.params.surveyId,\n      image: null,\n      section: \"\",\n      subtitle: \"\",\n      title: \"\",\n      scopeTypes: [\"Public\", \"Private\"],\n      surveyName: \"\",\n      orderQuestion:0,\n      order:\"\",\n      main: null,\n      surveys: {},\n      surveyData:null,\n      questionData: {},\n      newQuestionsData:{},\n      errMsg: false,\n      msg: \"\",\n      cl:\"\"\n    }\n  },\n  components: {\n    Question,\n  },\n  methods: {\n    ...mapActions(\"surveys\", [\"DeleteSurveyQuestion\", \"AddSurvey\",\"DeleteSurvey\"]),\n    addQuestion() {\n      this.orderQuestion+=1\n      let id = uuidv4()\n      this.newQuestionsData[id]={\n        title: \"\",\n        id: id,\n        type: \"\",\n        scope: \"public\",\n        identifier: \"\",\n        readonly: false,\n        description: \"\",\n        question: [],\n        required: true,\n        options: [],\n        order:\"\"+this.orderQuestion\n      }\n    },\n    deleteQuestions(index) {\n      this.DeleteSurveyQuestion({...this.newQuestionsData[index],\n       name: this.surveyId,\n       studyId: this.studyId\n      }).then(() => {\n        delete this.questionData[index]\n        delete this.newQuestionsData[index]\n        console.log(\"deleted\")\n      })\n    },\n    saveSurvey(data){\n      this.errMsg = false \n      this.DeleteSurvey({ surveyId: this.surveyId, studyId: this.studyId })\n      .then(() => {\n        let id = uuidv4()\n        data['identifier'] = id\n        this.AddSurvey({\n          id: id,\n          studyId: this.studyId,\n          questions: this.newQuestionsData,\n          data: data,\n        }).then(()=>{\n          this.errMsg = true\n          this.msg=\"Surveys Builder has been created successfully\"\n          this.cl= \"alert-success\"\n          Swal.fire({\n            title: 'success',\n            text:   \"Surveys Builder has been created successfully\",\n            icon: 'success'\n          }).then(()=>{\n            this.$router.push(`/surveysList/${this.studyId}`)\n          })\n        }) \n      })\n    },\n    validSurvey(questions, data){\n      // review if question has data\n      let isValid = true\n      for(const[key,value] of Object.entries(questions)){\n        console.log(\"tryReview\")\n        if(!this.$refs[value.id].reviewQuestionData()){\n          isValid = false\n        }\n      }\n      if(isValid){\n        this.saveSurvey(data)\n      }\n      else{\n        this.errMsg = true\n        this.cl = \"alert-err\"\n        this.msg=\"Some data is incorrect\"\n      }\n    },\n    updateSurvey(){\n      this.errMsg = false\n      this.msg=\"\"\n      if (\n        this.surveys.title && \n        this.surveys.subtitle && \n        this.surveys.order && \n        this.surveys.section\n      ){\n        let surveyData={\n          'image':\"SurveyIcon\",\n          'order':this.surveys.order,\n          'section':this.surveys.section,\n          'subtitle':this.surveys.subtitle,\n          'title':this.surveys.title,\n          'main': this.surveys.main\n        }\n        if (Object.keys(this.newQuestionsData).length){\n            let questionIdentifiers = Object.keys(this.newQuestionsData).map((key)=>{\n            return this.newQuestionsData[key].identifier\n          }) \n            let uniqueIdentifiers =new Set(questionIdentifiers)\n          if(questionIdentifiers.length==uniqueIdentifiers.size){\n            this.validSurvey(this.newQuestionsData, surveyData)\n          }\n          else{\n            this.errMsg = true\n            this.cl = \"alert-err\"\n            this.msg = \"The question identifiers must be unique\"\n          }\n        }else{\n          this.errMsg = true\n          this.cl = \"alert-err\"\n          this.msg = \"The questions cannot be empty\"\n        }\n      } else {\n        this.errMsg = true\n        this.cl = \"alert-err\"\n        this.msg = \"The fields can't be blank\"\n      }\n    }, \n    setSurveyData(){      \n      this.surveyData = this.getSurveysData(this.studyId)[this.surveyId]\n      if (this.surveyData) {\n        let data= this.surveyData.data\n        this.surveys={\n          'image':data.image,\n          'order':data.order,\n          'section':data.section,\n          'subtitle':data.subtitle,\n          'title':data.title,\n          'main': data.main\n        }\n        let questions = this.surveyData.questions\n        if(questions){\n          for (const [key, value] of Object.entries(questions)){\n            this.questionData[value.id]={...value, readonly: true, disabled: true}\n          }\n        }\n        this.newQuestionsData = {...this.questionData}\n      }\n    }\n  },\n  computed: {\n      ...mapGetters(\"surveys\",[\"getSurveysData\"])\n  },\n  created(){\n    this.setSurveyData()\n  },\n  beforeRouteEnter(to, from, next) {\n    Promise.all([\n      store.dispatch(\"surveys/FetchSurveyData\", {\n        studyId: to.params.studyId,\n        surveyId: to.params.surveyId\n      }),\n    ])\n    .then(() => {\n      next();\n    });\n  }\n};\n</script>\n\n<style lang=\"scss\">\n.wrapper {\n  margin-top: 5%;\n  margin-bottom: 5%;\n}\n.input-form{\n  margin: auto;\n  width: 60%;\n}\n.surveys > div {\n  margin: 10px 0;\n  padding-bottom: 10px;\n}\n.btn {\n  color: black;\n  background: transparent;\n  display: inline-block;\n  font-weight: 400;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  border: 1px solid transparent;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border-radius: 0.25rem;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,\n  border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n.btn-secondary {\n  text-decoration: none;\n  color: black;\n  border-color: #000000;\n  background: #b71540;\n}\n.btn-terceary {\n  text-decoration: underline;\n  color: black;\n  border-color: #000000;\n  background: transparent;\n}\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}