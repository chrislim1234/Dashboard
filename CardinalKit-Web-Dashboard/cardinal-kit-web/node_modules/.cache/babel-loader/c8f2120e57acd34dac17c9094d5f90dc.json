{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_apexchart = _resolveComponent(\"apexchart\");\n\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_apexchart, {\n    ref: \"chart\",\n    height: \"300\",\n    type: \"rangeBar\",\n    options: $options.chartOptions,\n    series: $props.series\n  }, null, 8, [\"options\", \"series\"])]);\n}","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/components/apexCharts/RangeChart.vue"],"names":[],"mappings":";;;;uBACE,mBAAA,CAQM,KARN,EAQM,IARN,EAQM,CAPJ,YAAA,CAMa,oBANb,EAMa;IALX,GAAG,EAAC,OAKO;IAJX,MAAM,EAAC,KAII;IAHX,IAAI,EAAC,UAGM;IAFV,OAAO,EAAE,QAAA,CAAA,YAEC;IADV,MAAM,EAAE,MAAA,CAAA;EACE,CANb,E,IAAA,E,CAAA,E,qBAAA,CAOI,CARN,C","sourcesContent":["<template>\n  <div>\n    <apexchart\n      ref=\"chart\"\n      height=\"300\"\n      type=\"rangeBar\"\n      :options=\"chartOptions\"\n      :series=\"series\"\n    ></apexchart>\n  </div>\n</template>\n\n<script>\nimport VueApexCharts from \"vue3-apexcharts\";\nexport default {\n  components: {\n    apexchart: VueApexCharts,\n  },\n  data() {\n    return {\n      monthNames: [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n      ],\n    };\n  },\n  props: {\n    series: {\n      type: Array,\n      required: true,\n    },\n    yAxisFormat:{\n      type: Function,\n      required: false\n    },\n    yMax:{\n      type: Number,\n      required: false\n    },\n     yMin:{\n      type: Number,\n      required: false\n    },\n    customTooltip:{\n      type: Function,\n      required: false\n    },\n    titleFormatter:{\n      type: Function,\n      required: false\n    },\n    horizontal:{\n      type: Boolean,\n      required: false,\n      default:false\n    },\n    toolTipYFormat:{\n      type: Function,\n      required: false\n    }\n  },\n  methods: {\n    zoomX(fromDate, toDate) {\n      if (this.$refs.chart.chart) {\n        this.$refs.chart.zoomX(fromDate.getTime(), toDate.getTime());\n      }\n    },\n  },\n  computed: {\n    format(val) {\n      if (Date.parse(value)) {\n        let date = new Date(value);\n        return date.getDate() + \" - \" + this.monthNames[date.getMonth()];\n      } else {\n        return new Date(value * 1000).toISOString().substr(11, 8);\n      }\n    },\n    chartOptions() {\n      return {\n        chart: {\n          height: 350,\n          type: \"rangeBar\",\n          toolbar:{\n            show:false\n          },\n           zoom:{\n             enabled:false\n           }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: this.horizontal,\n          },\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        xaxis: {\n          type: \"datetime\",\n          labels: {\n            datetimeFormatter: {\n              year: 'yyyy',\n              month: 'MMM \\'yy',\n              day: 'MMM dd',\n              hour: 'HH:mm'\n            }\n          }\n        },\n        tooltip: {\n          custom: this.customTooltip,\n          y:{\n            formatter:(value,{series,seriesIndex,dataPointIndex,w})=>{\n              let y = w.globals.initialSeries[seriesIndex].data[dataPointIndex].y\n              if(this.yAxisFormat){\n                y= [this.yAxisFormat(y[0]),this.yAxisFormat(y[1])]\n                \n              }\n              if(this.toolTipYFormat){\n                y= [this.toolTipYFormat(y[0]),this.toolTipYFormat(y[1])]\n                \n              }\n\n              return y[0]+\" - \"+y[1]\n            },\n            title: {\n              formatter: this.titleFormatter\n          },\n          }        \n        },\n        yaxis: {\n          max: this.yMax,\n          min: this.yMin,\n          labels: {\n            formatter:this.yAxisFormat\n          },\n        },\n      };\n    },\n  },\n};\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}