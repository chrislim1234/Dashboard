{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/Rest\";\nexport function reset({\n  commit\n}) {\n  commit('RESET');\n}\nexport const FetchUserRolesAndStudies = async ({\n  commit\n}) => {\n  return new Promise(function (resolve, reject) {\n    let {\n      auth\n    } = require(\"@/plugins/firebase/firebase\");\n\n    auth.onAuthStateChanged(async function (user) {\n      if (user) {\n        const userSnap = await request.GET(`users_roles/${user.uid}`).Execute();\n\n        if (userSnap.exists) {\n          if (userSnap.data().rol == \"doctor\") {\n            if (userSnap.data().studies.length == 1) {\n              let allUsers = [];\n              const usersSnap = await request.GET(`studies/${userSnap.data().studies[0]}/users`).Execute();\n              allUsers = usersSnap.docs.map(record => {\n                return {\n                  id: record.id,\n                  ...record.data()\n                };\n              });\n            }\n\n            commit(\"saveUserRol\", { ...userSnap.data(),\n              id: user.uid\n            });\n          } else if (userSnap.data().rol == \"superAdmin\") {\n            const studiesSnap = await request.GET(`studies`).Execute();\n            let studies = [];\n            studiesSnap.docs.forEach(element => {\n              studies.push(element.id);\n            });\n            commit(\"saveUserRol\", {\n              rol: \"superAdmin\",\n              studies: studies,\n              id: user.uid\n            });\n          } else {\n            commit(\"saveUserRol\", { ...userSnap.data(),\n              id: user.uid\n            });\n          }\n        }\n\n        resolve();\n      } else {\n        commit(\"saveUserRol\", {\n          rol: \"NoAccess\",\n          studies: [],\n          id: ''\n        });\n        resolve();\n      }\n    });\n  });\n};","map":{"version":3,"names":["request","reset","commit","FetchUserRolesAndStudies","Promise","resolve","reject","auth","require","onAuthStateChanged","user","userSnap","GET","uid","Execute","exists","data","rol","studies","length","allUsers","usersSnap","docs","map","record","id","studiesSnap","forEach","element","push"],"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/store/modules/user/actions.js"],"sourcesContent":["import request from \"@/Rest\";\n\nexport function reset({commit}){\n    commit('RESET')\n}\n\nexport const FetchUserRolesAndStudies= async ({commit})=>{\n    return new Promise(function(resolve,reject){\n        let { auth } = require(\"@/plugins/firebase/firebase\");\n        auth.onAuthStateChanged(async function (user){\n            if(user){\n                const userSnap = await request.GET(`users_roles/${user.uid}`).Execute()\n                if(userSnap.exists){\n                    if(userSnap.data().rol==\"doctor\"){\n                        if(userSnap.data().studies.length==1){\n                            let allUsers = [];\n                            const usersSnap = await request.GET(`studies/${userSnap.data().studies[0]}/users`).Execute();\n                            allUsers = usersSnap.docs.map((record) => {\n                            return {id:record.id,...record.data()}\n                            })\n                        }\n                        commit(\"saveUserRol\",{...userSnap.data(),id:user.uid})\n                    }\n                    else if(userSnap.data().rol==\"superAdmin\"){\n                        const studiesSnap = await request.GET(`studies`).Execute()\n                        let studies = []\n                        studiesSnap.docs.forEach(element => {\n                            studies.push(element.id)\n                        });\n                        commit(\"saveUserRol\",{rol:\"superAdmin\",studies:studies,id:user.uid})\n                    }\n                    else{\n                        commit(\"saveUserRol\",{...userSnap.data(),id:user.uid})\n                    }\n                }\n                resolve()\n            }\n            else{\n                commit(\"saveUserRol\",{rol:\"NoAccess\",studies:[],id:''})\n                resolve()\n            }\n        })\n    })\n    \n}"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,QAApB;AAEA,OAAO,SAASC,KAAT,CAAe;EAACC;AAAD,CAAf,EAAwB;EAC3BA,MAAM,CAAC,OAAD,CAAN;AACH;AAED,OAAO,MAAMC,wBAAwB,GAAE,OAAO;EAACD;AAAD,CAAP,KAAkB;EACrD,OAAO,IAAIE,OAAJ,CAAY,UAASC,OAAT,EAAiBC,MAAjB,EAAwB;IACvC,IAAI;MAAEC;IAAF,IAAWC,OAAO,CAAC,6BAAD,CAAtB;;IACAD,IAAI,CAACE,kBAAL,CAAwB,gBAAgBC,IAAhB,EAAqB;MACzC,IAAGA,IAAH,EAAQ;QACJ,MAAMC,QAAQ,GAAG,MAAMX,OAAO,CAACY,GAAR,CAAa,eAAcF,IAAI,CAACG,GAAI,EAApC,EAAuCC,OAAvC,EAAvB;;QACA,IAAGH,QAAQ,CAACI,MAAZ,EAAmB;UACf,IAAGJ,QAAQ,CAACK,IAAT,GAAgBC,GAAhB,IAAqB,QAAxB,EAAiC;YAC7B,IAAGN,QAAQ,CAACK,IAAT,GAAgBE,OAAhB,CAAwBC,MAAxB,IAAgC,CAAnC,EAAqC;cACjC,IAAIC,QAAQ,GAAG,EAAf;cACA,MAAMC,SAAS,GAAG,MAAMrB,OAAO,CAACY,GAAR,CAAa,WAAUD,QAAQ,CAACK,IAAT,GAAgBE,OAAhB,CAAwB,CAAxB,CAA2B,QAAlD,EAA2DJ,OAA3D,EAAxB;cACAM,QAAQ,GAAGC,SAAS,CAACC,IAAV,CAAeC,GAAf,CAAoBC,MAAD,IAAY;gBAC1C,OAAO;kBAACC,EAAE,EAACD,MAAM,CAACC,EAAX;kBAAc,GAAGD,MAAM,CAACR,IAAP;gBAAjB,CAAP;cACC,CAFU,CAAX;YAGH;;YACDd,MAAM,CAAC,aAAD,EAAe,EAAC,GAAGS,QAAQ,CAACK,IAAT,EAAJ;cAAoBS,EAAE,EAACf,IAAI,CAACG;YAA5B,CAAf,CAAN;UACH,CATD,MAUK,IAAGF,QAAQ,CAACK,IAAT,GAAgBC,GAAhB,IAAqB,YAAxB,EAAqC;YACtC,MAAMS,WAAW,GAAG,MAAM1B,OAAO,CAACY,GAAR,CAAa,SAAb,EAAuBE,OAAvB,EAA1B;YACA,IAAII,OAAO,GAAG,EAAd;YACAQ,WAAW,CAACJ,IAAZ,CAAiBK,OAAjB,CAAyBC,OAAO,IAAI;cAChCV,OAAO,CAACW,IAAR,CAAaD,OAAO,CAACH,EAArB;YACH,CAFD;YAGAvB,MAAM,CAAC,aAAD,EAAe;cAACe,GAAG,EAAC,YAAL;cAAkBC,OAAO,EAACA,OAA1B;cAAkCO,EAAE,EAACf,IAAI,CAACG;YAA1C,CAAf,CAAN;UACH,CAPI,MAQD;YACAX,MAAM,CAAC,aAAD,EAAe,EAAC,GAAGS,QAAQ,CAACK,IAAT,EAAJ;cAAoBS,EAAE,EAACf,IAAI,CAACG;YAA5B,CAAf,CAAN;UACH;QACJ;;QACDR,OAAO;MACV,CA1BD,MA2BI;QACAH,MAAM,CAAC,aAAD,EAAe;UAACe,GAAG,EAAC,UAAL;UAAgBC,OAAO,EAAC,EAAxB;UAA2BO,EAAE,EAAC;QAA9B,CAAf,CAAN;QACApB,OAAO;MACV;IACJ,CAhCD;EAiCH,CAnCM,CAAP;AAqCH,CAtCM"},"metadata":{},"sourceType":"module"}