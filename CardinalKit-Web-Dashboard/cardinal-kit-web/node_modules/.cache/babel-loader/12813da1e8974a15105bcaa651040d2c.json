{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-626717d4\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"alt-date\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_date_picker = _resolveComponent(\"date-picker\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_date_picker, {\n    calendar: $props.withCalendar,\n    ref: \"startElement\",\n    showPopup: $setup.startDateTooltip,\n    onChangeDate: _cache[0] || (_cache[0] = $event => $setup.handleChangeDates($event, 'startDate')),\n    defaultDate: $setup.startDate,\n    label: \"Start Date\"\n  }, null, 8\n  /* PROPS */\n  , [\"calendar\", \"showPopup\", \"defaultDate\"]), $props.range ? (_openBlock(), _createBlock(_component_date_picker, {\n    key: 0,\n    calendar: $props.withCalendar,\n    ref: \"endElement\",\n    showPopup: $setup.endDateTooltip,\n    onChangeDate: _cache[1] || (_cache[1] = $event => $setup.handleChangeDates($event, 'endDate')),\n    defaultDate: $setup.endDate,\n    label: \"End Date\"\n  }, null, 8\n  /* PROPS */\n  , [\"calendar\", \"showPopup\", \"defaultDate\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/components/calendar/AltDate.vue"],"names":[],"mappings":";;;;;EACO,KAAK,EAAC;;;;;uBAAX,mBAAA,CAcM,KAdN,EAAA,UAAA,EAcM,CAbJ,YAAA,CAKgD,sBALhD,EAKgD;IAJ7C,QAAQ,EAAE,MAAA,CAAA,YAImC;IAH9C,GAAG,EAAC,cAG0C;IAF7C,SAAS,EAAE,MAAA,CAAA,gBAEkC;IAD7C,YAAU,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,MAAA,IAAE,MAAA,CAAA,iBAAA,CAAkB,MAAlB,EAAwB,WAAxB,CAAF,CACmC;IAA7C,WAAW,EAAE,MAAA,CAAA,SAAgC;IAArB,KAAK,EAAC;EAAe,CALhD,E,IAAA,E;;EAAA,E,wCAAA,CAaI,EALI,MAAA,CAAA,K,kBAFR,YAAA,CAMqB,sBANrB,EAMqB;UAAA;IALlB,QAAQ,EAAE,MAAA,CAAA,YAKQ;IAJN,GAAG,EAAC,YAIE;IAHlB,SAAS,EAAE,MAAA,CAAA,cAGO;IAFlB,YAAU,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,MAAA,IAAE,MAAA,CAAA,iBAAA,CAAkB,MAAlB,EAAwB,SAAxB,CAAF,CAEQ;IADlB,WAAW,EAAE,MAAA,CAAA,OACK;IAAnB,KAAK,EAAC;EAAa,CANrB,E,IAAA,E;;EAAA,E,wCAAA,C,qCAOI,CAdN,C","sourcesContent":["<template>\n  <div class=\"alt-date\">\n    <date-picker \n      :calendar=\"withCalendar\"\n      ref=\"startElement\"\n      :showPopup=\"startDateTooltip\"\n      @changeDate=\"handleChangeDates($event, 'startDate')\"\n      :defaultDate=\"startDate\" label='Start Date' />\n    <date-picker \n      :calendar=\"withCalendar\" \n      v-if=\"range\" ref=\"endElement\" \n      :showPopup=\"endDateTooltip\" \n      @changeDate=\"handleChangeDates($event, 'endDate')\" \n      :defaultDate=\"endDate\" \n      label='End Date' />\n  </div>\n</template>\n\n<script>\nimport { onMounted, onUnmounted, ref } from 'vue';\nimport DatePicker from './DatePicker.vue';\n\nexport default {\n  components: { DatePicker },\n  props: {\n    modelValue: [Date, Object],\n    range: {\n      type: Boolean,\n      default: false\n    },\n    withCalendar: {\n      type: Boolean,\n      default: false\n    },\n    defaultDate: [Date, Object],\n  },\n  emits: ['update:modelValue'],\n\tsetup(props, ctx) {\n\t\tconst startElement = ref();\n\t\tconst endElement = ref();\n\t\tconst startDateTooltip = ref(false);\n\t\tconst endDateTooltip = ref(false);\n    const date = ref();\n    const startDate = ref();\n    const endDate = ref();\n\n    onMounted(() => {\n      if(props.range) {\n        startDate.value = props.defaultDate?.startDate || new Date();\n        endDate.value = props.defaultDate?.endDate || new Date();\n        date.value = {\n          startDate: startDate.value,\n          endDate: endDate.value,\n        } \n      } else {\n        date.value = props.defaultDate || new Date();\n        startDate.value = date.value;\n      }\n      \n      ctx.emit('update:modelValue', date.value);\n    });\n\n    function handleChangeDates(value, key) {\n      if (value) {\n        date.value = !props.range ? value : rangeDates(value, key)\n        ctx.emit('update:modelValue', date.value)\n      }\n    }\n\n    const rangeDates = (value,  key) => {\n      if(key === 'startDate' && (date.value?.endDate < value)) {\n        endDate.value = value;\n        return { startDate: value, endDate: value }\n      }\n      if(key === 'endDate' && (date.value?.startDate > value)) {\n        startDate.value = value;\n        return { startDate: value, endDate: value };\n      }\n      return { ...date.value, [key]: value }\n    }\n    \n\t\tfunction elementIsContain(element) {\n\t\t\tstartDateTooltip.value = startElement.value.$el?.contains(element.target);\n\t\t\tprops?.range && (endDateTooltip.value = endElement.value.$el?.contains(element.target));\n\t\t}\n\n\t\twindow.addEventListener('click', elementIsContain);\n\n\t\tonUnmounted(() => window.removeEventListener('click', elementIsContain));\n\n\t\treturn {\n\t\t\tstartDateTooltip,\n      endDateTooltip,\n\t\t\tstartElement,\n      endElement,\n      handleChangeDates,\n      startDate,\n      endDate\n\t\t}\n\t}\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.alt-date {\n\tposition: relative;\n\tdisplay: inline-flex;\n  gap: 10px;\n}\n</style>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}