{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { CalendarView, CalendarViewHeader } from \"vue-simple-calendar\";\nimport \"vue-simple-calendar/dist/style.css\";\nimport \"vue-simple-calendar/static/css/default.css\";\nimport \"vue-simple-calendar/static/css/holidays-us.css\";\nimport altTable from \"@/components/tables/altTable\";\nimport altSelect from \"@/components/multiSelect/Select\";\nimport modal from \"@/components/modals/modal.vue\";\nimport store from \"@/store\";\nimport { mapActions, mapGetters } from \"vuex\";\nexport default {\n  name: \"app\",\n  data: function () {\n    return {\n      columns: [{\n        header: \"Survey Name\"\n      }, {\n        header: \"Survey Identifier\"\n      }, {\n        header: \"Start Date\"\n      }, {\n        header: \"End Date\"\n      }, {\n        header: \"Interval\"\n      }],\n      showDate: new Date(),\n      studyId: this.$route.params.studyId,\n      displayLastDate: new Date(),\n      displayFirstDate: new Date(),\n      errMsg: false,\n      msg: \"\",\n      startDate: null,\n      endDate: null,\n      intervalDays: 1,\n      SurveySelected: null,\n      description: \"\",\n      cl: \"\"\n    };\n  },\n  components: {\n    CalendarView,\n    CalendarViewHeader,\n    altTable,\n    altSelect,\n    modal\n  },\n  methods: { ...mapActions(\"surveys\", [\"CreateStudySchedule\", \"CreateUserSchedule\"]),\n\n    periodChanged(range, eventSource) {\n      this.displayLastDate = range.displayLastDate;\n      this.displayFirstDate = range.displayFirstDate;\n    },\n\n    setShowDate(d) {\n      this.showDate = d;\n    },\n\n    isTaskInMonth(startDate, endDate) {\n      return startDate < this.displayLastDate && endDate > this.displayFirstDate;\n    },\n\n    resetForm() {\n      this.cl = \"\";\n      this.msg = \"\";\n      this.errMsg = false;\n      this.startDate = null;\n      this.endDate = null;\n      this.intervalDays = 1;\n      this.SurveySelected = null;\n      this.description = \"\";\n    },\n\n    saveNewSchedule() {\n      this.cl = \"\";\n      this.msg = \"\";\n      this.errMsg = false;\n\n      if (!this.startDate) {\n        this.errMsg = true;\n        this.msg = \"Start date is missing\";\n        this.cl = \"alert-err\";\n      } else if (!this.SurveySelected) {\n        this.errMsg = true;\n        this.msg = \"Survey is missing\";\n        this.cl = \"alert-err\";\n      } else if (!this.description) {\n        this.errMsg = true;\n        this.cl = \"alert-err\";\n        this.msg = \"Description is missing\";\n      }\n\n      if (!this.errMsg) {\n        let data = {\n          studyId: this.studyId,\n          payload: {\n            duration: {\n              allDay: true\n            },\n            startTime: new Date(this.startDate),\n            endTime: this.endDate ? new Date(this.endDate) : null,\n            interval: {\n              day: this.intervalDays\n            },\n            targetValues: [{\n              groupIdentifier: this.SurveySelected\n            }],\n            text: this.description\n          }\n        };\n\n        if (this.$route.query.userId) {\n          data[\"userId\"] = this.$route.query.userId;\n          this.CreateUserSchedule(data);\n          this.errMsg = true;\n          this.cl = 'alert-success';\n          this.msg = \"Calendar survey added successfully\";\n        } else {\n          this.CreateStudySchedule(data);\n          this.errMsg = true;\n          this.cl = 'alert-success';\n          this.msg = \"Calendar survey added successfully\";\n        }\n\n        this.startDate = null;\n        this.endDate = null;\n        this.intervalDays = 1;\n        this.SurveySelected = null;\n        this.description = \"\";\n      }\n    }\n\n  },\n  computed: { ...mapGetters(\"surveys\", [\"getScheduleTasksByStudy\", \"getSurveysData\", \"getScheduleTasksByUser\"]),\n\n    calendarMonthItems() {\n      let tasks = this.$route.query.userId ? this.getScheduleTasksByUser(this.studyId, this.$route.query.userId) : this.getScheduleTasksByStudy(this.studyId);\n      let items = [];\n\n      for (const [key, value] of Object.entries(tasks)) {\n        if (value) {\n          value.scheduleElements.forEach(schedule => {\n            let title = value.title;\n\n            if (schedule.text) {\n              title = schedule.text;\n            }\n\n            if (schedule.startTime) {\n              let startTime = schedule.startTime.toDate();\n              let startTimeDay = new Date(startTime.getTime());\n              startTimeDay.setHours(0);\n              let endTime = new Date(this.displayLastDate.getTime());\n\n              if (schedule.endTime) {\n                if (schedule.endTime.toDate() < this.displayLastDate) {\n                  endTime = schedule.endTime.toDate();\n                }\n              }\n\n              if (this.isTaskInMonth(startTime, endTime)) {\n                let intervalDays = schedule.interval.day;\n\n                if (startTimeDay < this.displayFirstDate) {\n                  let Difference_In_Time = this.displayFirstDate.getTime() - startTimeDay.getTime();\n                  let Difference_In_Days = Difference_In_Time / (1000 * 3600 * 24);\n                  let offset = Difference_In_Days % intervalDays;\n                  startTimeDay.setDate(this.displayFirstDate.getDate() + offset);\n                }\n\n                let _date = new Date(startTimeDay.getTime());\n\n                while (_date < endTime) {\n                  items.push({\n                    id: \"e5\",\n                    startDate: new Date(_date.getTime()),\n                    title: title\n                  });\n\n                  _date.setDate(_date.getDate() + parseInt(intervalDays));\n                }\n              }\n            }\n          });\n        }\n      }\n\n      return items;\n    },\n\n    tableItems() {\n      let tasks = this.$route.query.userId ? this.getScheduleTasksByUser(this.studyId, this.$route.query.userId) : this.getScheduleTasksByStudy(this.studyId);\n      let items = [];\n\n      for (const [_, value] of Object.entries(tasks)) {\n        if (value) {\n          value.scheduleElements.forEach(schedule => {\n            let title = value.title;\n            let identifier = value.id;\n\n            if (schedule.text) {\n              title = schedule.text;\n            }\n\n            if (schedule.targetValues) {\n              if (schedule.targetValues.length > 0) {\n                identifier = schedule.targetValues[0].groupIdentifier;\n              }\n            }\n\n            let startDate = null;\n            let endDate = null;\n\n            if (schedule.startTime) {\n              startDate = schedule.startTime.toDate().toLocaleString(\"en-US\", {\n                timeZone: \"UTC\"\n              });\n            }\n\n            if (schedule.endTime) {\n              endDate = schedule.endTime.toDate().toLocaleString(\"en-US\", {\n                timeZone: \"UTC\"\n              });\n            }\n\n            let intervalDays = schedule.interval.day;\n            items.push({\n              name: title,\n              identifier: identifier,\n              startDate: startDate,\n              endDate: endDate,\n              interval: intervalDays + \" days\"\n            });\n          });\n        }\n      }\n\n      return items;\n    },\n\n    surveys() {\n      let types = [];\n      let surveys = this.getSurveysData(this.studyId);\n\n      for (const [key, value] of Object.entries(surveys)) {\n        types.push({\n          id: key,\n          name: value.data.title,\n          value: key\n        });\n      }\n\n      return types;\n    }\n\n  },\n\n  beforeRouteEnter(to, from, next) {\n    if (to.query.userId) {\n      Promise.all([store.dispatch(\"surveys/FetchUserScheduler\", {\n        studyId: to.params.studyId,\n        userId: to.query.userId\n      }), store.dispatch(\"surveys/FetchAllSurveysData\", {\n        studyId: to.params.studyId\n      })]).then(() => {\n        next();\n      });\n    } else {\n      Promise.all([store.dispatch(\"surveys/FetchStudyScheduler\", {\n        studyId: to.params.studyId\n      }), store.dispatch(\"surveys/FetchAllSurveysData\", {\n        studyId: to.params.studyId\n      })]).then(() => {\n        next();\n      });\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/views/surveys/surveyScheduler.vue"],"names":[],"mappings":";AAuFA,SAAS,YAAT,EAAuB,kBAAvB,QAAiD,qBAAjD;AAEA,OAAO,oCAAP;AACA,OAAO,4CAAP;AACA,OAAO,gDAAP;AACA,OAAO,QAAP,MAAqB,8BAArB;AACA,OAAO,SAAP,MAAsB,iCAAtB;AACA,OAAO,KAAP,MAAkB,+BAAlB;AAEA,OAAO,KAAP,MAAkB,SAAlB;AACA,SAAS,UAAT,EAAqB,UAArB,QAAuC,MAAvC;AAEA,eAAe;EACb,IAAI,EAAE,KADO;EAEb,IAAI,EAAE,YAAW;IACf,OAAO;MACL,OAAO,EAAE,CACP;QAAE,MAAM,EAAE;MAAV,CADO,EAEP;QAAE,MAAM,EAAE;MAAV,CAFO,EAGP;QAAE,MAAM,EAAE;MAAV,CAHO,EAIP;QAAE,MAAM,EAAE;MAAV,CAJO,EAKP;QAAE,MAAM,EAAE;MAAV,CALO,CADJ;MAQL,QAAQ,EAAE,IAAI,IAAJ,EARL;MASL,OAAO,EAAE,KAAK,MAAL,CAAY,MAAZ,CAAmB,OATvB;MAUL,eAAe,EAAE,IAAI,IAAJ,EAVZ;MAWL,gBAAgB,EAAE,IAAI,IAAJ,EAXb;MAYL,MAAM,EAAE,KAZH;MAaL,GAAG,EAAE,EAbA;MAcL,SAAS,EAAE,IAdN;MAeL,OAAO,EAAE,IAfJ;MAgBL,YAAY,EAAC,CAhBR;MAiBL,cAAc,EAAE,IAjBX;MAkBL,WAAW,EAAE,EAlBR;MAmBL,EAAE,EAAE;IAnBC,CAAP;EAqBD,CAxBY;EAyBb,UAAU,EAAE;IACV,YADU;IAEV,kBAFU;IAGV,QAHU;IAIV,SAJU;IAKV;EALU,CAzBC;EAgCb,OAAO,EAAE,EACP,GAAG,UAAU,CAAC,SAAD,EAAW,CAAC,qBAAD,EAAuB,oBAAvB,CAAX,CADN;;IAEP,aAAa,CAAC,KAAD,EAAQ,WAAR,EAAqB;MAChC,KAAK,eAAL,GAAuB,KAAK,CAAC,eAA7B;MACA,KAAK,gBAAL,GAAwB,KAAK,CAAC,gBAA9B;IACD,CALM;;IAMP,WAAW,CAAC,CAAD,EAAI;MACb,KAAK,QAAL,GAAgB,CAAhB;IACD,CARM;;IASP,aAAa,CAAC,SAAD,EAAY,OAAZ,EAAqB;MAChC,OACE,SAAQ,GAAI,KAAK,eAAjB,IAAoC,OAAM,GAAI,KAAK,gBADrD;IAGD,CAbM;;IAcP,SAAS,GAAE;MACT,KAAK,EAAL,GAAU,EAAV;MACA,KAAK,GAAL,GAAW,EAAX;MACA,KAAK,MAAL,GAAY,KAAZ;MACA,KAAK,SAAL,GAAgB,IAAhB;MACA,KAAK,OAAL,GAAc,IAAd;MACA,KAAK,YAAL,GAAkB,CAAlB;MACA,KAAK,cAAL,GAAqB,IAArB;MACA,KAAK,WAAL,GAAmB,EAAnB;IACD,CAvBM;;IAwBP,eAAe,GAAE;MACf,KAAK,EAAL,GAAU,EAAV;MACA,KAAK,GAAL,GAAW,EAAX;MACA,KAAK,MAAL,GAAY,KAAZ;;MACA,IAAG,CAAC,KAAK,SAAT,EAAmB;QACjB,KAAK,MAAL,GAAc,IAAd;QACA,KAAK,GAAL,GAAW,uBAAX;QACA,KAAK,EAAL,GAAU,WAAV;MACD,CAJD,MAIM,IAAG,CAAC,KAAK,cAAT,EAAwB;QAC5B,KAAK,MAAL,GAAc,IAAd;QACA,KAAK,GAAL,GAAW,mBAAX;QACA,KAAK,EAAL,GAAU,WAAV;MACD,CAJK,MAIA,IAAG,CAAC,KAAK,WAAT,EAAqB;QACzB,KAAK,MAAL,GAAc,IAAd;QACA,KAAK,EAAL,GAAU,WAAV;QACA,KAAK,GAAL,GAAW,wBAAX;MACF;;MAEA,IAAG,CAAC,KAAK,MAAT,EAAgB;QACd,IAAI,IAAG,GAAI;UACT,OAAO,EAAC,KAAK,OADJ;UAET,OAAO,EAAC;YACN,QAAQ,EAAE;cAAC,MAAM,EAAE;YAAT,CADJ;YAEN,SAAS,EAAE,IAAI,IAAJ,CAAS,KAAK,SAAd,CAFL;YAGN,OAAO,EAAE,KAAK,OAAL,GAAe,IAAI,IAAJ,CAAS,KAAK,OAAd,CAAf,GAAsC,IAHzC;YAIN,QAAQ,EAAC;cAAE,GAAG,EAAC,KAAK;YAAX,CAJH;YAKN,YAAY,EAAE,CAAC;cAAC,eAAe,EAAC,KAAK;YAAtB,CAAD,CALR;YAMN,IAAI,EAAE,KAAK;UANL;QAFC,CAAX;;QAYA,IAAG,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAArB,EAA4B;UAC1B,IAAI,CAAC,QAAD,CAAJ,GAAe,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAAjC;UACA,KAAK,kBAAL,CAAwB,IAAxB;UACA,KAAK,MAAL,GAAc,IAAd;UACA,KAAK,EAAL,GAAU,eAAV;UACA,KAAK,GAAL,GAAW,oCAAX;QACF,CANA,MAOI;UACF,KAAK,mBAAL,CAAyB,IAAzB;UACA,KAAK,MAAL,GAAc,IAAd;UACA,KAAK,EAAL,GAAU,eAAV;UACA,KAAK,GAAL,GAAW,oCAAX;QACF;;QAEA,KAAK,SAAL,GAAgB,IAAhB;QACA,KAAK,OAAL,GAAc,IAAd;QACA,KAAK,YAAL,GAAkB,CAAlB;QACA,KAAK,cAAL,GAAqB,IAArB;QACA,KAAK,WAAL,GAAmB,EAAnB;MACF;IACF;;EA3EO,CAhCI;EA6Gb,QAAQ,EAAE,EACR,GAAG,UAAU,CAAC,SAAD,EAAY,CAAC,yBAAD,EAA2B,gBAA3B,EAA4C,wBAA5C,CAAZ,CADL;;IAER,kBAAkB,GAAG;MACnB,IAAI,KAAI,GAAI,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAAlB,GACA,KAAK,sBAAL,CAA4B,KAAK,OAAjC,EAAyC,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAA3D,CADA,GAEE,KAAK,uBAAL,CAA6B,KAAK,OAAlC,CAFd;MAGA,IAAI,KAAI,GAAI,EAAZ;;MACA,KAAK,MAAM,CAAC,GAAD,EAAM,KAAN,CAAX,IAA2B,MAAM,CAAC,OAAP,CAAe,KAAf,CAA3B,EAAkD;QAChD,IAAI,KAAJ,EAAW;UACT,KAAK,CAAC,gBAAN,CAAuB,OAAvB,CAAgC,QAAD,IAAc;YAC3C,IAAI,KAAI,GAAI,KAAK,CAAC,KAAlB;;YACA,IAAI,QAAQ,CAAC,IAAb,EAAmB;cACjB,KAAI,GAAI,QAAQ,CAAC,IAAjB;YACF;;YACA,IAAI,QAAQ,CAAC,SAAb,EAAwB;cACtB,IAAI,SAAQ,GAAI,QAAQ,CAAC,SAAT,CAAmB,MAAnB,EAAhB;cACA,IAAI,YAAW,GAAI,IAAI,IAAJ,CAAS,SAAS,CAAC,OAAV,EAAT,CAAnB;cACA,YAAY,CAAC,QAAb,CAAsB,CAAtB;cACA,IAAI,OAAM,GAAI,IAAI,IAAJ,CAAS,KAAK,eAAL,CAAqB,OAArB,EAAT,CAAd;;cACA,IAAI,QAAQ,CAAC,OAAb,EAAsB;gBACpB,IAAI,QAAQ,CAAC,OAAT,CAAiB,MAAjB,KAA0B,KAAK,eAAnC,EAAmD;kBACjD,OAAM,GAAI,QAAQ,CAAC,OAAT,CAAiB,MAAjB,EAAV;gBACF;cACF;;cACA,IAAI,KAAK,aAAL,CAAmB,SAAnB,EAA8B,OAA9B,CAAJ,EAA4C;gBAC1C,IAAI,YAAW,GAAI,QAAQ,CAAC,QAAT,CAAkB,GAArC;;gBACA,IAAI,YAAW,GAAI,KAAK,gBAAxB,EAA0C;kBACxC,IAAI,kBAAiB,GACnB,KAAK,gBAAL,CAAsB,OAAtB,KAAkC,YAAY,CAAC,OAAb,EADpC;kBAEA,IAAI,kBAAiB,GACnB,kBAAiB,IAAK,OAAO,IAAP,GAAc,EAAnB,CADnB;kBAEA,IAAI,MAAK,GAAI,kBAAiB,GAAI,YAAlC;kBACA,YAAY,CAAC,OAAb,CACE,KAAK,gBAAL,CAAsB,OAAtB,KAAkC,MADpC;gBAGF;;gBACA,IAAI,KAAI,GAAI,IAAI,IAAJ,CAAS,YAAY,CAAC,OAAb,EAAT,CAAZ;;gBACA,OAAO,KAAI,GAAI,OAAf,EAAwB;kBACtB,KAAK,CAAC,IAAN,CAAW;oBACT,EAAE,EAAE,IADK;oBAET,SAAS,EAAE,IAAI,IAAJ,CAAS,KAAK,CAAC,OAAN,EAAT,CAFF;oBAGT,KAAK,EAAE;kBAHE,CAAX;;kBAKA,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,OAAN,KAAkB,QAAQ,CAAC,YAAD,CAAxC;gBACF;cACF;YACF;UACD,CAtCD;QAuCF;MACF;;MACA,OAAO,KAAP;IACD,CAnDO;;IAoDR,UAAU,GAAG;MACX,IAAI,KAAI,GAAI,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAAlB,GACA,KAAK,sBAAL,CAA4B,KAAK,OAAjC,EAAyC,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAA3D,CADA,GAEE,KAAK,uBAAL,CAA6B,KAAK,OAAlC,CAFd;MAGA,IAAI,KAAI,GAAI,EAAZ;;MACA,KAAK,MAAM,CAAC,CAAD,EAAI,KAAJ,CAAX,IAAyB,MAAM,CAAC,OAAP,CAAe,KAAf,CAAzB,EAAgD;QAC9C,IAAI,KAAJ,EAAW;UACT,KAAK,CAAC,gBAAN,CAAuB,OAAvB,CAAgC,QAAD,IAAc;YAC3C,IAAI,KAAI,GAAI,KAAK,CAAC,KAAlB;YACA,IAAI,UAAS,GAAI,KAAK,CAAC,EAAvB;;YACA,IAAI,QAAQ,CAAC,IAAb,EAAmB;cACf,KAAI,GAAI,QAAQ,CAAC,IAAjB;YACJ;;YACA,IAAG,QAAQ,CAAC,YAAZ,EAAyB;cACvB,IAAG,QAAQ,CAAC,YAAT,CAAsB,MAAtB,GAA6B,CAAhC,EAAkC;gBAChC,UAAS,GAAI,QAAQ,CAAC,YAAT,CAAsB,CAAtB,EAAyB,eAAtC;cACF;YACF;;YAEA,IAAI,SAAQ,GAAI,IAAhB;YACA,IAAI,OAAM,GAAI,IAAd;;YACA,IAAI,QAAQ,CAAC,SAAb,EAAwB;cACtB,SAAQ,GAAI,QAAQ,CAAC,SAAT,CACT,MADS,GAET,cAFS,CAEM,OAFN,EAEe;gBAAE,QAAQ,EAAE;cAAZ,CAFf,CAAZ;YAGF;;YACA,IAAI,QAAQ,CAAC,OAAb,EAAsB;cACpB,OAAM,GAAI,QAAQ,CAAC,OAAT,CACP,MADO,GAEP,cAFO,CAEQ,OAFR,EAEiB;gBAAE,QAAQ,EAAE;cAAZ,CAFjB,CAAV;YAGF;;YACA,IAAI,YAAW,GAAI,QAAQ,CAAC,QAAT,CAAkB,GAArC;YAEA,KAAK,CAAC,IAAN,CAAW;cACT,IAAI,EAAE,KADG;cAET,UAAU,EAAE,UAFH;cAGT,SAAS,EAAE,SAHF;cAIT,OAAO,EAAE,OAJA;cAKT,QAAQ,EAAE,YAAW,GAAI;YALhB,CAAX;UAOD,CAjCD;QAkCF;MACF;;MACA,OAAO,KAAP;IACD,CAhGO;;IAiGR,OAAO,GAAG;MACR,IAAI,KAAI,GAAI,EAAZ;MACA,IAAI,OAAM,GAAI,KAAK,cAAL,CAAoB,KAAK,OAAzB,CAAd;;MACA,KAAK,MAAM,CAAC,GAAD,EAAM,KAAN,CAAX,IAA2B,MAAM,CAAC,OAAP,CAAe,OAAf,CAA3B,EAAoD;QAClD,KAAK,CAAC,IAAN,CAAW;UAAE,EAAE,EAAE,GAAN;UAAW,IAAI,EAAE,KAAK,CAAC,IAAN,CAAW,KAA5B;UAAmC,KAAK,EAAE;QAA1C,CAAX;MACF;;MACA,OAAO,KAAP;IACD;;EAxGO,CA7GG;;EAuNb,gBAAgB,CAAC,EAAD,EAAK,IAAL,EAAW,IAAX,EAAiB;IAC/B,IAAG,EAAE,CAAC,KAAH,CAAS,MAAZ,EAAmB;MACjB,OAAO,CAAC,GAAR,CAAY,CACV,KAAK,CAAC,QAAN,CAAe,4BAAf,EAA6C;QAC3C,OAAO,EAAE,EAAE,CAAC,MAAH,CAAU,OADwB;QAE3C,MAAM,EAAE,EAAE,CAAC,KAAH,CAAS;MAF0B,CAA7C,CADU,EAKV,KAAK,CAAC,QAAN,CAAe,6BAAf,EAA8C;QAC5C,OAAO,EAAE,EAAE,CAAC,MAAH,CAAU;MADyB,CAA9C,CALU,CAAZ,EAQG,IARH,CAQQ,MAAM;QACZ,IAAI;MACL,CAVD;IAWF,CAZA,MAaI;MACF,OAAO,CAAC,GAAR,CAAY,CACV,KAAK,CAAC,QAAN,CAAe,6BAAf,EAA8C;QAC5C,OAAO,EAAE,EAAE,CAAC,MAAH,CAAU;MADyB,CAA9C,CADU,EAIV,KAAK,CAAC,QAAN,CAAe,6BAAf,EAA8C;QAC5C,OAAO,EAAE,EAAE,CAAC,MAAH,CAAU;MADyB,CAA9C,CAJU,CAAZ,EAOG,IAPH,CAOQ,MAAM;QACZ,IAAI;MACL,CATD;IAUF;EACF;;AAjPa,CAAf","sourcesContent":["<template>\n  <div class=\"page\">\n    <h1>My Calendar</h1>\n    <br />\n    <calendar-view\n      :items=\"calendarMonthItems\"\n      :show-date=\"showDate\"\n      class=\"theme-default holiday-us-traditional holiday-us-official\"\n      :period-changed-callback=\"periodChanged\"\n    >\n      <template #header=\"{ headerProps }\">\n        <calendar-view-header\n          :header-props=\"headerProps\"\n          @input=\"setShowDate\"\n        />\n      </template>\n    </calendar-view>\n    <br />\n    <br />\n    <alt-table :columns=\"columns\" pagination>\n      <template #t-row>\n        <tr v-for=\"survey in tableItems\" :key=\"survey.name\">\n          <td>\n            {{ survey.name }}\n          </td>\n          <td>\n            {{ survey.identifier }}\n          </td>\n          <td>\n            {{ survey.startDate }}\n          </td>\n          <td>\n            {{ survey.endDate }}\n          </td>\n          <td>\n            {{ survey.interval }}\n          </td>\n          <!-- <td>\n            <button @click=\"schedule(survey.name)\">\n              Change Dates\n            </button>\n          </td> -->\n        </tr>\n      </template>\n    </alt-table>\n    <div class=\"inline my-4\" id=\"calendar\">\n      <a class=\"modal-show button\" href=\"#modal\" @click=\"resetForm\">Add survey to calendar</a>\n      <div class=\"modal\" id=\"modal\">\n        <div class=\"modal-content\">\n          <a class=\"modal-hide\" href=\"#\">✕</a>\n          <h2 class=\"m-4 text-center\">Calendar survey</h2>\n            <div class=\"input-form\" >\n              <div :class=\"cl\" v-if=\"errMsg\">\n                {{ msg }}\n              </div>\n              <label>Start Date: </label>\n              <input v-model=\"startDate\" type=\"datetime-local\" />\n              <br />\n              <label>End Date: </label>\n              <input v-model=\"endDate\" type=\"datetime-local\"  />\n              <br />\n              <label>Interval days: </label>\n              <input v-model=\"intervalDays\" type=\"number\" min=\"1\" pattern=\"^[0-9]+\" />\n              <br />\n              <label>Survey: </label>\n              <alt-select :options=\"surveys\" v-model=\"SurveySelected\" />\n              <br />\n              <label>Description: </label>\n              <input\n                v-model=\"description\"\n                type=\"text\"\n                placeholder=\"Enter the description\"\n              />\n              <br />\n              <div class=\"form-group text-center inline\">\n                <a @click=\"saveNewSchedule\" class=\"m-1 button\" >\n                  Save\n                </a>\n                <a href=\"#\" class=\"m-1 button\">Cancel</a>\n              </div>\n            </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport { CalendarView, CalendarViewHeader } from \"vue-simple-calendar\";\n\nimport \"vue-simple-calendar/dist/style.css\";\nimport \"vue-simple-calendar/static/css/default.css\";\nimport \"vue-simple-calendar/static/css/holidays-us.css\";\nimport altTable from \"@/components/tables/altTable\";\nimport altSelect from \"@/components/multiSelect/Select\";\nimport modal from \"@/components/modals/modal.vue\";\n\nimport store from \"@/store\";\nimport { mapActions, mapGetters } from \"vuex\";\n\nexport default {\n  name: \"app\",\n  data: function() {\n    return {\n      columns: [\n        { header: \"Survey Name\" },\n        { header: \"Survey Identifier\" },\n        { header: \"Start Date\" },\n        { header: \"End Date\" },\n        { header: \"Interval\" },\n      ],\n      showDate: new Date(),\n      studyId: this.$route.params.studyId,\n      displayLastDate: new Date(),\n      displayFirstDate: new Date(),\n      errMsg: false,\n      msg: \"\",\n      startDate: null,\n      endDate: null,\n      intervalDays:1 ,\n      SurveySelected: null,\n      description: \"\",\n      cl: \"\"\n    };\n  },\n  components: {\n    CalendarView,\n    CalendarViewHeader,\n    altTable,\n    altSelect,\n    modal\n  },\n  methods: {\n    ...mapActions(\"surveys\",[\"CreateStudySchedule\",\"CreateUserSchedule\"]),\n    periodChanged(range, eventSource) {\n      this.displayLastDate = range.displayLastDate;\n      this.displayFirstDate = range.displayFirstDate;\n    },\n    setShowDate(d) {\n      this.showDate = d;\n    },\n    isTaskInMonth(startDate, endDate) {\n      return (\n        startDate < this.displayLastDate && endDate > this.displayFirstDate\n      );\n    },\n    resetForm(){\n      this.cl = \"\"\n      this.msg = \"\"\n      this.errMsg=false\n      this.startDate= null\n      this.endDate= null\n      this.intervalDays=1 \n      this.SurveySelected= null\n      this.description = \"\"\n    },\n    saveNewSchedule(){\n      this.cl = \"\"\n      this.msg = \"\"\n      this.errMsg=false\n      if(!this.startDate){\n        this.errMsg = true\n        this.msg = \"Start date is missing\"\n        this.cl = \"alert-err\"\n      }else if(!this.SurveySelected){\n        this.errMsg = true\n        this.msg = \"Survey is missing\"\n        this.cl = \"alert-err\"\n      }else if(!this.description){\n        this.errMsg = true\n        this.cl = \"alert-err\"\n        this.msg = \"Description is missing\"\n      }\n\n      if(!this.errMsg){\n        let data = {\n          studyId:this.studyId,\n          payload:{\n            duration: {allDay: true},\n            startTime: new Date(this.startDate),\n            endTime: this.endDate ? new Date(this.endDate):null,\n            interval:{ day:this.intervalDays},\n            targetValues: [{groupIdentifier:this.SurveySelected}],\n            text: this.description\n          }\n        }\n\n        if(this.$route.query.userId){\n          data[\"userId\"]=this.$route.query.userId\n          this.CreateUserSchedule(data)\n          this.errMsg = true\n          this.cl = 'alert-success'\n          this.msg = \"Calendar survey added successfully\"\n        }\n        else{\n          this.CreateStudySchedule(data)\n          this.errMsg = true\n          this.cl = 'alert-success'\n          this.msg = \"Calendar survey added successfully\"\n        }\n        \n        this.startDate= null\n        this.endDate= null\n        this.intervalDays=1 \n        this.SurveySelected= null\n        this.description = \"\"\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(\"surveys\", [\"getScheduleTasksByStudy\",\"getSurveysData\",\"getScheduleTasksByUser\"]),\n    calendarMonthItems() {\n      let tasks = this.$route.query.userId ?\n                  this.getScheduleTasksByUser(this.studyId,this.$route.query.userId)\n                  : this.getScheduleTasksByStudy(this.studyId);\n      let items = [];\n      for (const [key, value] of Object.entries(tasks)) {\n        if (value) {\n          value.scheduleElements.forEach((schedule) => {\n            let title = value.title;\n            if (schedule.text) {\n              title = schedule.text\n            }\n            if (schedule.startTime) {\n              let startTime = schedule.startTime.toDate();\n              let startTimeDay = new Date(startTime.getTime());\n              startTimeDay.setHours(0);\n              let endTime = new Date(this.displayLastDate.getTime());\n              if (schedule.endTime) {\n                if (schedule.endTime.toDate()<this.displayLastDate){\n                  endTime = schedule.endTime.toDate();\n                }\n              }\n              if (this.isTaskInMonth(startTime, endTime)) {\n                let intervalDays = schedule.interval.day;\n                if (startTimeDay < this.displayFirstDate) {\n                  let Difference_In_Time =\n                    this.displayFirstDate.getTime() - startTimeDay.getTime();\n                  let Difference_In_Days =\n                    Difference_In_Time / (1000 * 3600 * 24);\n                  let offset = Difference_In_Days % intervalDays;\n                  startTimeDay.setDate(\n                    this.displayFirstDate.getDate() + offset\n                  );\n                }\n                let _date = new Date(startTimeDay.getTime());\n                while (_date < endTime) {\n                  items.push({\n                    id: \"e5\",\n                    startDate: new Date(_date.getTime()),\n                    title: title,\n                  });\n                  _date.setDate(_date.getDate() + parseInt(intervalDays));\n                }\n              }\n            }\n          });\n        }\n      }\n      return items;\n    },\n    tableItems() {\n      let tasks = this.$route.query.userId ?\n                  this.getScheduleTasksByUser(this.studyId,this.$route.query.userId)\n                  : this.getScheduleTasksByStudy(this.studyId);\n      let items = [];\n      for (const [_, value] of Object.entries(tasks)) {\n        if (value) {\n          value.scheduleElements.forEach((schedule) => {\n            let title = value.title;\n            let identifier = value.id;\n            if (schedule.text) {\n                title = schedule.text;\n            }\n            if(schedule.targetValues){\n              if(schedule.targetValues.length>0){\n                identifier = schedule.targetValues[0].groupIdentifier\n              }\n            }\n\n            let startDate = null;\n            let endDate = null;\n            if (schedule.startTime) {\n              startDate = schedule.startTime\n                .toDate()\n                .toLocaleString(\"en-US\", { timeZone: \"UTC\" });\n            }\n            if (schedule.endTime) {\n              endDate = schedule.endTime\n                .toDate()\n                .toLocaleString(\"en-US\", { timeZone: \"UTC\" });\n            }\n            let intervalDays = schedule.interval.day;\n\n            items.push({\n              name: title,\n              identifier: identifier,\n              startDate: startDate,\n              endDate: endDate,\n              interval: intervalDays + \" days\",\n            });\n          });\n        }\n      }\n      return items;\n    },\n    surveys() {\n      let types = [];\n      let surveys = this.getSurveysData(this.studyId);\n      for (const [key, value] of Object.entries(surveys)) {\n        types.push({ id: key, name: value.data.title, value: key });\n      }\n      return types;\n    },\n  },\n  beforeRouteEnter(to, from, next) {\n    if(to.query.userId){\n      Promise.all([\n        store.dispatch(\"surveys/FetchUserScheduler\", {\n          studyId: to.params.studyId,\n          userId: to.query.userId\n        }),\n        store.dispatch(\"surveys/FetchAllSurveysData\", {\n          studyId: to.params.studyId\n        })\n      ]).then(() => {\n        next();\n      });\n    }\n    else{\n      Promise.all([\n        store.dispatch(\"surveys/FetchStudyScheduler\", {\n          studyId: to.params.studyId,\n        }),\n        store.dispatch(\"surveys/FetchAllSurveysData\", {\n          studyId: to.params.studyId,\n        })\n      ]).then(() => {\n        next();\n      });\n    }   \n  }\n};\n</script>\n<style>\n\n.cv-header {\n  display: flex;\n  flex: 0 1 auto;\n  align-items: center;\n  flex-direction: column-reverse;\n  min-height: 2.5em;\n  border-width: 1px 1px 0 1px;\n}\n.cv-header-nav {\n  display: flex;\n}\n.theme-default .cv-header button {\n  color: #ffffff;\n}\n.theme-default .cv-header .periodLabel {\n  text-transform: capitalize;\n}\n\n.theme-default .cv-day.past {\n  background-color: #fafafa;\n  width: 180px;\n  height: 200px;\n}\n\n.cv-weeks {\n  height: 550px;\n}\n.modal-content {\n  text-align: left;\n}\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}