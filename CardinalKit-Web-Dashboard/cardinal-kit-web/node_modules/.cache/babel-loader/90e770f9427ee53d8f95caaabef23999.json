{"ast":null,"code":"import store from \"@/store\";\nimport multipleRadialBars from \"@/components/apexCharts/multipleRadialBars\";\nimport BarChart from \"@/components/apexCharts/BarChart\";\nimport LineChart from \"@/components/apexCharts/LineChart\";\nimport ScatterChart from \"@/components/apexCharts/ScatterChart\";\nimport RangeChart from \"@/components/apexCharts/RangeChart\";\nimport MultipleRadialBars from \"../../../components/apexCharts/multipleRadialBars.vue\";\nimport { mapActions, mapGetters } from \"vuex\";\nimport { transformAppleCode, GetCategoriesByHkType } from \"@/common/helpers/healthKit\";\nimport AltDate from \"@/components/calendar/AltDate.vue\";\nimport altTable from \"@/components/tables/altTable\";\nexport default {\n  components: {\n    multipleRadialBars,\n    BarChart,\n    LineChart,\n    MultipleRadialBars,\n    ScatterChart,\n    AltDate,\n    RangeChart,\n    altTable\n  },\n\n  data() {\n    return {\n      date: {\n        startDate: new Date(new Date().setDate(-30))\n      },\n      currentPage: 1,\n      limit: 10,\n      studyId: this.$route.query.studyId,\n      userId: this.$route.query.userId,\n      hkCode: this.$route.params.hkCode,\n      firstDateChange: true,\n      dataFiltered: false\n    };\n  },\n\n  computed: { ...mapGetters(\"patient\", [\"getSpecificHealthDataGrapFormat\", \"getSpecificHealthData\", \"getHealthDataGraphResume\"]),\n\n    GetGraphType() {\n      if (this.hkCode == \"HKCategoryTypeIdentifierSleepAnalysis\") {\n        return \"sleep\";\n      } else if (this.hkCode == \"HKQuantityTypeIdentifierHeartRate\") {\n        return \"heart\";\n      } else if (this.hkCode == \"HKCategoryTypeIdentifierMindfulSession\") {\n        return \"mindful\";\n      } else if (this.hkCode == \"HKCategoryTypeIdentifierSexualActivity\") {\n        return \"line\";\n      } else if (this.hkCode.includes(\"Category\")) {\n        return \"scatter\";\n      } else {\n        return \"line\";\n      }\n    },\n\n    getPageItems() {\n      let items = this.getSpecificHealthData(this.hkCode);\n      let lowerLimit = (this.currentPage - 1) * this.limit;\n      let upperLimit = this.currentPage * this.limit;\n\n      if (items) {\n        return items.slice(lowerLimit, upperLimit);\n      } else {\n        return [];\n      }\n    },\n\n    paginationOptions() {\n      return {\n        limit: [10, 20],\n        total: this.getSpecificHealthData(this.hkCode) ? this.getSpecificHealthData(this.hkCode).length : 0,\n        currentPage: this.currentPage\n      };\n    }\n\n  },\n  methods: { ...mapActions(\"patient\", [\"FetchSpecificTypeData\"]),\n    transformAppleCode,\n    GetCategoriesByHkType,\n\n    handleChangeDate(value) {\n      if (this.firstDateChange) {\n        console.log(\"first change\");\n        let allData = this.getSpecificHealthDataGrapFormat(this.hkCode);\n\n        if (allData.length > 0) {\n          let data = allData[0].data;\n\n          if (data.length > 0) {\n            let lastValue = data[data.length - 1];\n\n            if (value.startDate > lastValue.x) {\n              value.startDate = lastValue.x;\n            }\n          }\n        }\n      }\n\n      this.firstDateChange = false;\n\n      if (value) {\n        // if (this.$refs.chart) {\n        if (value.endDate) {\n          this.FetchSpecificTypeData({\n            studyId: this.studyId,\n            userId: this.userId,\n            dataType: this.hkCode,\n            dates: {\n              startDate: value.startDate.toISOString(),\n              endDate: value.endDate.toISOString()\n            }\n          }).then(() => {\n            this.dataFiltered = true;\n          });\n\n          if (this.$refs.chart) {\n            this.$refs.chart.zoomX(value.startDate, value.endDate);\n          }\n        } // }\n\n      }\n\n      console.log(\"changed . \", value.startDate, value.endDate);\n    },\n\n    transformDate(date) {\n      return date.toLocaleString(\"en-US\", {\n        timeZone: \"UTC\"\n      });\n    },\n\n    handlePagination(pagination) {\n      this.currentPage = pagination.currentPage;\n      this.limit = pagination.limit;\n      let total = this.getSpecificHealthData(this.hkCode).length;\n\n      if (this.currentPage > Math.ceil(total / this.limit)) {\n        this.currentPage = Math.ceil(total / this.limit);\n      }\n    }\n\n  },\n\n  beforeRouteEnter(to, from, next) {\n    // Promise.all([\n    //   store.dispatch(\"patient/FetchSpecificTypeData\", {\n    //     studyId: `${to.query.studyId}`,\n    //     userId: `${to.query.userId}`,\n    //     dataType: `${to.params.hkCode}`,\n    //   }),\n    // ]).then(() => {\n    //   next();\n    // });\n    next();\n  }\n\n};","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/views/patients/healthKit/healthKitGraphs.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <section class=\"statistic\">\n  \n    <!--   <h1 class=\"mb-5\">Statistics</h1> -->\n    <div class=\"graphic\">\n      <div class=\"mb-5\">\n        <h3 class=\"my-3\">{{ transformAppleCode(hkCode) }}</h3>\n        <alt-date\n          withCalendar\n          :defaultDate=\"date\"\n          range\n          @update:model-value=\"handleChangeDate\"\n        />\n        <div class=\"wrapper-graphs\" v-if=\"dataFiltered\">\n          <line-chart\n            v-if=\"GetGraphType == 'line'\"\n            ref=\"chart\"\n            :key=\"1\"\n            :series=\"getSpecificHealthDataGrapFormat(hkCode)\"\n          />\n          <scatter-chart\n            v-if=\"GetGraphType == 'scatter'\"\n            ref=\"chart\"\n            :key=\"2\"\n            :series=\"getSpecificHealthDataGrapFormat(hkCode)\"\n            :labels=\"GetCategoriesByHkType(hkCode)\"\n          />\n          <range-chart\n            v-if=\"GetGraphType == 'sleep'\"\n            ref=\"chart\"\n            :key=\"3\"\n            :series=\"getSpecificHealthDataGrapFormat(hkCode)\"\n            :yAxisFormat=\"\n              function(value) {\n                return new Date(value).toISOString().substr(11, 8);\n              }\"\n            :yMax=\"24 * 3600 - 1\"\n            :yMin=\"0\"\n          />\n          <range-chart\n            v-if=\"GetGraphType == 'heart'\"\n            ref=\"chart\"\n            :key=\"4\"\n            :series=\"getSpecificHealthDataGrapFormat(hkCode)\"\n            :yMax=\"100\"\n            :yMin=\"0\"\n            :titleFormatter=\"\n              (seriesName, { w, seriesIndex, dataPointIndex }) => {\n                x = w.globals.initialSeries[seriesIndex].data[dataPointIndex].x;\n                hourStart = x.getHours();\n                hourEnd = hourStart + 1;\n                return seriesName + ': ' + hourStart + ' - ' + hourEnd;\n              }\"\n          />\n          <range-chart\n            v-if=\"GetGraphType == 'mindful'\"\n            ref=\"chart\"\n            :key=\"5\"\n            :series=\"getSpecificHealthDataGrapFormat(hkCode)\"\n            :horizontal=\"true\"\n            :toolTipYFormat=\"\n              function(value) {\n                return new Date(value).toISOString().substr(11, 8);\n              }\"\n          />\n        </div>\n        <div class=\"mb-1\" v-if=\"getHealthDataGraphResume(hkCode)\" >\n          <p><b>{{ getHealthDataGraphResume(hkCode).value }}</b></p>\n          <p><b>{{ getHealthDataGraphResume(hkCode).date }}</b></p>\n          <p>{{ getHealthDataGraphResume(hkCode).title }}</p>\n        </div>\n      </div>\n    </div>\n    <div class=\"height\">\n      <alt-table\n        :columns=\"[{ header: 'Date' }, { header: 'Value' }]\"\n        pagination\n        :paginationOptions=\"paginationOptions\"\n        @onPagination=\"handlePagination\"\n      >\n        <template #t-row>\n          <tr v-for=\"(data, index) in getPageItems\" :key=\"index\">\n            <td>\n              {{ transformDate(data.Date.Date) }}\n            </td>\n            <td>{{ data.Value }} {{ data.Unit }}</td>\n          </tr>\n        </template>\n      </alt-table>\n    </div>\n  </section>\n</template>\n\n<script>\nimport store from \"@/store\";\nimport multipleRadialBars from \"@/components/apexCharts/multipleRadialBars\";\nimport BarChart from \"@/components/apexCharts/BarChart\";\nimport LineChart from \"@/components/apexCharts/LineChart\";\nimport ScatterChart from \"@/components/apexCharts/ScatterChart\";\nimport RangeChart from \"@/components/apexCharts/RangeChart\";\nimport MultipleRadialBars from \"../../../components/apexCharts/multipleRadialBars.vue\";\nimport { mapActions, mapGetters } from \"vuex\";\nimport {\n  transformAppleCode,\n  GetCategoriesByHkType,\n} from \"@/common/helpers/healthKit\";\nimport AltDate from \"@/components/calendar/AltDate.vue\";\nimport altTable from \"@/components/tables/altTable\";\n\nexport default {\n  components: {\n    multipleRadialBars,\n    BarChart,\n    LineChart,\n    MultipleRadialBars,\n    ScatterChart,\n    AltDate,\n    RangeChart,\n    altTable,\n  },\n   data() {\n    return {\n      date: { startDate: new Date(new Date().setDate(-30)) },\n      currentPage: 1,\n      limit: 10,\n      studyId: this.$route.query.studyId,\n      userId: this.$route.query.userId,\n      hkCode: this.$route.params.hkCode,\n      firstDateChange: true,\n      dataFiltered: false\n    };\n  },\n  computed: {\n    ...mapGetters(\"patient\", [\n      \"getSpecificHealthDataGrapFormat\",\n      \"getSpecificHealthData\",\n      \"getHealthDataGraphResume\",\n    ]),\n    GetGraphType() {\n      if (this.hkCode == \"HKCategoryTypeIdentifierSleepAnalysis\") {\n        return \"sleep\";\n      } else if (this.hkCode == \"HKQuantityTypeIdentifierHeartRate\") {\n        return \"heart\";\n      } else if (this.hkCode == \"HKCategoryTypeIdentifierMindfulSession\") {\n        return \"mindful\";\n      }\n      else if (this.hkCode == \"HKCategoryTypeIdentifierSexualActivity\"){\n        return \"line\"\n      }\n       else if (this.hkCode.includes(\"Category\")) {\n        return \"scatter\";\n      } else {\n        return \"line\";\n      }\n    },\n    getPageItems() {\n      let items = this.getSpecificHealthData(this.hkCode);\n      let lowerLimit = (this.currentPage - 1) * this.limit;\n      let upperLimit = this.currentPage * this.limit;\n      if(items){\n        return items.slice(lowerLimit, upperLimit);\n      }\n      else{\n        return []\n      }\n      \n    },\n    paginationOptions() {\n      return {\n        limit: [10, 20],\n        total: this.getSpecificHealthData(this.hkCode)?this.getSpecificHealthData(this.hkCode).length:0,\n        currentPage: this.currentPage,\n      };\n    }\n  },\n \n  methods: {\n    ...mapActions(\"patient\", [\"FetchSpecificTypeData\"]),\n    transformAppleCode,\n    GetCategoriesByHkType,\n    handleChangeDate(value) {\n      if(this.firstDateChange){\n        console.log(\"first change\")\n        let allData = this.getSpecificHealthDataGrapFormat(this.hkCode)\n        if (allData.length>0){\n          let data = allData[0].data\n          if (data.length>0){\n            let lastValue = data[data.length-1]\n            if (value.startDate>lastValue.x){\n              value.startDate=lastValue.x\n            }\n          }\n        }\n      }\n      this.firstDateChange = false\n\n      if (value) {\n        // if (this.$refs.chart) {\n          if (value.endDate) {\n            this.FetchSpecificTypeData({\n              studyId: this.studyId,\n              userId: this.userId,\n              dataType: this.hkCode,\n              dates: { startDate: value.startDate.toISOString(), endDate: value.endDate.toISOString() },\n            }).then(()=>{\n                this.dataFiltered = true\n            });\n            if (this.$refs.chart) {\n              this.$refs.chart.zoomX(value.startDate, value.endDate);\n            }\n          }\n        // }\n      }\n      \n      console.log(\"changed . \",value.startDate, value.endDate)\n    },\n    transformDate(date) {\n      return date.toLocaleString(\"en-US\", { timeZone: \"UTC\" });\n    },\n    handlePagination(pagination) {\n      this.currentPage=pagination.currentPage\n      this.limit=pagination.limit\n      let total = this.getSpecificHealthData(this.hkCode).length\n      if(this.currentPage > Math.ceil(total/this.limit)){\n        this.currentPage = Math.ceil(total/this.limit)\n      }\n    }\n  },\n  beforeRouteEnter(to, from, next) {\n    // Promise.all([\n    //   store.dispatch(\"patient/FetchSpecificTypeData\", {\n    //     studyId: `${to.query.studyId}`,\n    //     userId: `${to.query.userId}`,\n    //     dataType: `${to.params.hkCode}`,\n    //   }),\n    // ]).then(() => {\n    //   next();\n    // });\n    next()\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.wrapper-graphs {\n  display: grid;\n  gap: 15px;\n  max-width: 1200px;\n  margin: auto;\n}\n.statistic {\n  display: flex;\n  padding: 1rem 3rem;\n  justify-content: space-between;\n}\n.graphic {\n  width: 45rem;\n}\n.height {\n  height: 30rem;\n  overflow: auto;\n  border-radius: .5rem;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n}\n@media (max-width: 1390px) {\n  .statistic {\n    display: flex;\n    flex-direction: column;\n  }\n  .wrapper-graphs {\n    width: auto;\n  }\n  .graphic {\n    width: auto;\n  }\n}\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}