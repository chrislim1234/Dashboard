{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { transformAppleCode, GetCategoriesByHkType } from \"@/common/helpers/healthKit\";\nimport { transformDistanceToGlobalUnit, transformTimeToSeconds, transformSecondsToBetterFormat } from '@/common/helpers/units';\nimport store from \"@/store\";\nimport { dataTypeToCalculateAverage } from \"@/common/static_data\";\nexport function getHealthData(state) {\n  return state.healthData;\n}\nexport function getSpecificHealthData(state) {\n  return code => {\n    return state.healthData[code];\n  };\n}\n\nfunction ResumeRange(data, transformValueCallBack, unit) {\n  let min = transformValueCallBack(data[0].Value, unit);\n  let max = transformValueCallBack(data[0].Value, unit);\n\n  if (data && data.length > 0) {\n    data.forEach(record => {\n      let newValue = transformValueCallBack(record.Value, record.Unit);\n\n      if (newValue > max) {\n        max = newValue;\n      }\n\n      if (newValue < min) {\n        min = newValue;\n      }\n    });\n  }\n\n  return {\n    title: \"Range\",\n    value: `${min} - ${max}  ${unit}`\n  };\n}\n\nfunction ResumeSum(data, transformValueCallBack, unit) {\n  let total = 0;\n\n  if (data && data.length > 0) {\n    data.forEach(record => {\n      total += transformValueCallBack(record.Value, record.Unit);\n    });\n  }\n\n  if (total % 1 != 0) {\n    total = total.toFixed(2);\n  }\n\n  return {\n    title: \"Total\",\n    value: `${total} ${unit}`\n  };\n}\n\nfunction ResumeAverage(data, transformValueCallBack, unit) {\n  let total = 0;\n\n  if (data && data.length > 0) {\n    data.forEach(record => {\n      total += transformValueCallBack(record.Value, record.Unit);\n    });\n    total = total / data.length;\n  }\n\n  if (total % 1 != 0) {\n    total = total.toFixed(2);\n  }\n\n  return {\n    title: \"Average\",\n    value: `${total} ${unit}`\n  };\n}\n\nfunction ResumeCount(data) {\n  let dataLength = data ? data.length : 0;\n  return {\n    title: \"Total\",\n    value: `${dataLength} entries`\n  };\n}\n\nfunction ResumeSleepAnalisis(data) {\n  let sumInBedSeconds = 0;\n  let sumASleepSeconds = 0;\n  let countInBed = 0;\n  let countASleep = 0;\n  let daysCounted = []; // need sum a sleep in the same day\n\n  if (data && data.length > 0) {\n    data.forEach(record => {\n      if (record.HkValue == \"InBed\") {\n        sumInBedSeconds += transformTimeToSeconds(record.Value, record.Unit);\n        countInBed++;\n      } else {\n        sumASleepSeconds += transformTimeToSeconds(record.Value, record.Unit);\n\n        if (!daysCounted.includes(record.StartDate.getTime())) {\n          countASleep++;\n          daysCounted.push(record.StartDate.getTime());\n        }\n      }\n    });\n  }\n\n  let inBedAverage = transformSecondsToBetterFormat(sumInBedSeconds / countInBed);\n  let aSleepAverage = transformSecondsToBetterFormat(sumASleepSeconds / countASleep);\n  return {\n    title: \"Sleep Average\",\n    value: `Average In Bed: ${inBedAverage.Value} ${inBedAverage.Unit} / Average ASleep: ${aSleepAverage.Value} ${aSleepAverage.Unit}`\n  };\n}\n\nexport function getHealthDataGraphResume(state) {\n  return code => {\n    let data = state.healthData[code];\n    let result = {\n      title: \"\",\n      value: \"\",\n      date: \"\"\n    };\n\n    switch (code) {\n      case \"HKQuantityTypeIdentifierHeartRate\":\n        let Unit = data && data.length > 0 ? data[0].Unit : \"\";\n\n        if (data && data.length > 0) {\n          result = ResumeRange(data, (param, unit) => {\n            return param;\n          }, Unit);\n        }\n\n        break;\n\n      case \"HKCategoryTypeIdentifierSleepAnalysis\":\n        result = ResumeSleepAnalisis(data);\n        break;\n\n      case \"HKQuantityTypeIdentifierDistanceWalkingRunning\":\n        result = ResumeSum(data, transformDistanceToGlobalUnit, store.getters['units/getDistanceUnit']);\n        break;\n\n      case \"HKQuantityTypeIdentifierFlightsClimbed\":\n        result = ResumeSum(data, (param, unit) => {\n          return param;\n        }, \"floors\");\n        break;\n\n      default:\n        if (dataTypeToCalculateAverage.includes(code)) {\n          let Unit = data && data.length > 0 ? data[0].Unit : \"\";\n          result = ResumeAverage(data, param => {\n            return param;\n          }, Unit);\n        } else if (code.includes(\"Quantity\")) {\n          let Unit = data && data.length > 0 ? data[0].Unit : \"\";\n          result = ResumeSum(data, param => {\n            return param;\n          }, Unit);\n        } else {\n          result = ResumeCount(data);\n        }\n\n        break;\n    }\n\n    return result;\n  };\n}\nexport function getSpecificHealthDataGrapFormat(state) {\n  return code => {\n    let data = state.healthData[code];\n    let dataFormat = [];\n\n    if (code == \"HKCategoryTypeIdentifierSleepAnalysis\") {\n      return SleepAnalisysData(data);\n    } else if (code == \"HKQuantityTypeIdentifierHeartRate\") {\n      return HeartRateData(data);\n    } else if (code == \"HKCategoryTypeIdentifierMindfulSession\") {\n      return MinfdfulData(data);\n    } else if (code == \"HKCategoryTypeIdentifierSexualActivity\") {\n      return SexualActivityData(data);\n    } else if (code.includes(\"Quantity\")) {\n      let dataDict = {};\n\n      if (data && data.length > 0) {\n        data.forEach(record => {\n          let value = record.Value;\n          let dateFormat = DateFormat(record.Date.Date);\n\n          if (dateFormat in dataDict) {\n            dataDict[dateFormat].value += value;\n            dataDict[dateFormat].count += 1;\n          } else {\n            dataDict[dateFormat] = {\n              date: record.Date.Date,\n              value: value,\n              count: 1\n            };\n          }\n        });\n      }\n\n      for (const [key, value] of Object.entries(dataDict)) {\n        if (dataTypeToCalculateAverage.includes(code)) {\n          value.value = value.value / value.count;\n        }\n\n        dataFormat.push({\n          x: value.date,\n          y: value.value.toFixed(2)\n        });\n      }\n    } else if (code.includes(\"HKWorkout\")) {\n      let types = {};\n      let dataFormat = [];\n\n      if (data && data.length) {\n        data.forEach(record => {\n          console.log(\"extra\", record.Extrada);\n\n          if (record.Extrada) {\n            for (const [key, value] of Object.entries(record.Extrada)) {\n              console.log(\"key\", key, \"value\", value.Value);\n\n              if (types[key]) {\n                let previousData = types[key];\n                previousData.push({\n                  x: record.Date.Date,\n                  y: value.value\n                });\n              } else {\n                types[key] = [{\n                  x: record.Date.Date,\n                  y: value.value\n                }];\n              }\n            }\n          }\n        });\n\n        for (const [key, value] of Object.entries(types)) {\n          dataFormat.push({\n            name: key,\n            data: value\n          });\n        }\n\n        console.log(dataFormat);\n        return dataFormat;\n      }\n\n      return [{\n        name: code,\n        data: dataFormat\n      }];\n    } else {\n      if (data && data.length) {\n        data.forEach(record => {\n          console.log(\"code\", code);\n          let yValue = record.Value;\n\n          if (code.includes(\"Category\")) {\n            let array = GetCategoriesByHkType(code);\n            yValue = array.indexOf(yValue);\n          }\n\n          dataFormat.push({\n            x: record.Date.Date,\n            y: yValue\n          });\n        });\n      }\n    }\n\n    return [{\n      name: code,\n      data: dataFormat\n    }];\n  };\n}\n\nfunction DateToSeconds(date) {\n  let dateHours = date.getHours();\n  let dateMinutes = date.getMinutes();\n  let dateSeconds = date.getSeconds();\n  let seconds = (dateHours * 60 + dateMinutes) * 60 + dateSeconds;\n  return seconds;\n}\n\nfunction DateFormat(date) {\n  return date.getFullYear() + \"/\" + date.getMonth() + \"/\" + date.getDate();\n}\n\nfunction DateFormatHour(date) {\n  return date.getFullYear() + \"/\" + date.getMonth() + \"/\" + date.getDate() + \"/\" + date.getHours();\n}\n\nfunction SleepAnalisysData(data) {\n  let inBedArray = [];\n  let aSleepArray = [];\n\n  if (data && data.length > 0) {\n    data.forEach(record => {\n      let startTime = DateToSeconds(record.StartDate);\n      let endTime = DateToSeconds(record.EndDate);\n\n      if (record.EndDate.getDate() != record.StartDate.getDate()) {\n        let maxValue = (23 * 60 + 59) * 60 + 59;\n        let yValue1 = [startTime, maxValue];\n        let yValue2 = [0, endTime];\n\n        if (record.HkValue == \"InBed\") {\n          inBedArray.push({\n            x: record.StartDate.setHours(0, 0, 0),\n            y: yValue1\n          });\n          inBedArray.push({\n            x: record.EndDate.setHours(0, 0, 0),\n            y: yValue2\n          });\n        } else {\n          aSleepArray.push({\n            x: record.StartDate.setHours(0, 0, 0),\n            y: yValue1\n          });\n          aSleepArray.push({\n            x: record.EndDate.setHours(0, 0, 0),\n            y: yValue2\n          });\n        }\n      } else {\n        let yValue = [startTime, endTime];\n\n        if (record.HkValue == \"InBed\") {\n          inBedArray.push({\n            x: record.StartDate.setHours(0, 0, 0),\n            y: yValue\n          });\n        } else {\n          aSleepArray.push({\n            x: record.StartDate.setHours(0, 0, 0),\n            y: yValue\n          });\n        }\n      }\n    });\n  }\n\n  return [{\n    name: \"inBed\",\n    data: inBedArray\n  }, {\n    name: \"aSleep\",\n    data: aSleepArray\n  }];\n}\n\nfunction HeartRateData(data) {\n  let dataFormat = [];\n  let dataDict = {};\n\n  if (data && data.length > 0) {\n    data.forEach(record => {\n      let value = record.Value;\n\n      if (value % 1 != 0) {\n        value = parseFloat(value.toFixed(2));\n      }\n\n      let dateFormat = DateFormatHour(record.Date.Date);\n\n      if (dateFormat in dataDict) {\n        if (value > dataDict[dateFormat].max) {\n          dataDict[dateFormat].max = value;\n        }\n\n        if (value < dataDict[dateFormat].min) {\n          dataDict[dateFormat].min = value;\n        }\n      } else {\n        let date = new Date(record.Date.Date.setMinutes(0, 0));\n        dataDict[dateFormat] = {\n          date: date,\n          max: value,\n          min: value\n        };\n      }\n    });\n  }\n\n  for (const [key, value] of Object.entries(dataDict)) {\n    dataFormat.push({\n      x: value.date,\n      y: [value.min, value.max]\n    });\n  }\n\n  return [{\n    name: \"Heart Rate\",\n    data: dataFormat\n  }];\n}\n\nfunction MinfdfulData(data) {\n  let dataFormat = []; // dataFormat.push({x:\"TEST\",y:[new Date(),]})\n\n  if (data && data.length > 0) {\n    data.forEach(record => {\n      dataFormat.push({\n        x: \"Mind\",\n        y: [record.StartDate.getTime(), record.EndDate.getTime()]\n      });\n    });\n  }\n\n  return [{\n    name: \"Mindful Minutes\",\n    data: dataFormat\n  }];\n}\n\nfunction SexualActivityData(data) {\n  let dataFormat = [];\n  let dataDict = {};\n\n  if (data && data.length > 0) {\n    data.forEach(record => {\n      let date = DateFormat(record.Date.Date);\n\n      if (dataDict[date]) {\n        dataDict[date].count += 1;\n      } else {\n        dataDict[date] = {\n          date: date,\n          count: 1\n        };\n      }\n    });\n  }\n\n  for (const [key, value] of Object.entries(dataDict)) {\n    dataFormat.push({\n      x: value.date,\n      y: value.count\n    });\n  }\n\n  return [{\n    name: \"Sexual Activity\",\n    data: dataFormat\n  }];\n}\n\nexport function getCategoryDataWebFormat(state) {\n  return categoryId => {\n    return state.healthWebFormat[categoryId];\n  };\n}\nexport function getValidCategories(state) {\n  return state.validCategories;\n}\nexport function getActivityIndexDataToGraphic(state) {\n  let metrics = state.userMetricData;\n  let data = [];\n  metrics.forEach(element => {\n    data.push({\n      \"x\": Date.parse(element.date),\n      \"y\": parseInt(element.activityindex)\n    });\n  });\n  let response = [{\n    \"name\": \"ActivityIndex\",\n    \"data\": data\n  }];\n  return response;\n  /* \n  [ \n    { \"name\": \"HKQuantityTypeIdentifierDistanceWalkingRunning\", \n      \"data\": [ \n        { \"x\": \"2021-08-03T20:43:30.823Z\", \"y\": \"131.68\" }, \n        { \"x\": \"2021-08-06T14:54:49.220Z\", \"y\": \"631.60\" }, \n        { \"x\": \"2021-08-09T16:06:59.679Z\", \"y\": \"421.70\" }, \n        { \"x\": \"2021-08-10T15:03:12.788Z\", \"y\": \"889.07\" }, \n        { \"x\": \"2021-08-11T05:04:47.586Z\", \"y\": \"2209.50\" } \n      ] \n    } \n  ]\n  */\n\n  return metrics;\n}","map":{"version":3,"names":["transformAppleCode","GetCategoriesByHkType","transformDistanceToGlobalUnit","transformTimeToSeconds","transformSecondsToBetterFormat","store","dataTypeToCalculateAverage","getHealthData","state","healthData","getSpecificHealthData","code","ResumeRange","data","transformValueCallBack","unit","min","Value","max","length","forEach","record","newValue","Unit","title","value","ResumeSum","total","toFixed","ResumeAverage","ResumeCount","dataLength","ResumeSleepAnalisis","sumInBedSeconds","sumASleepSeconds","countInBed","countASleep","daysCounted","HkValue","includes","StartDate","getTime","push","inBedAverage","aSleepAverage","getHealthDataGraphResume","result","date","param","getters","getSpecificHealthDataGrapFormat","dataFormat","SleepAnalisysData","HeartRateData","MinfdfulData","SexualActivityData","dataDict","dateFormat","DateFormat","Date","count","key","Object","entries","x","y","types","console","log","Extrada","previousData","name","yValue","array","indexOf","DateToSeconds","dateHours","getHours","dateMinutes","getMinutes","dateSeconds","getSeconds","seconds","getFullYear","getMonth","getDate","DateFormatHour","inBedArray","aSleepArray","startTime","endTime","EndDate","maxValue","yValue1","yValue2","setHours","parseFloat","setMinutes","getCategoryDataWebFormat","categoryId","healthWebFormat","getValidCategories","validCategories","getActivityIndexDataToGraphic","metrics","userMetricData","element","parse","parseInt","activityindex","response"],"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/store/modules/patient/HealthData/getters.js"],"sourcesContent":["import {\n  transformAppleCode,\n  GetCategoriesByHkType,\n} from \"@/common/helpers/healthKit\";\nimport {transformDistanceToGlobalUnit, transformTimeToSeconds, transformSecondsToBetterFormat} from '@/common/helpers/units'\nimport store from \"@/store\";\n\n\nimport { dataTypeToCalculateAverage } from \"@/common/static_data\";\n\nexport function getHealthData(state) {\n  return state.healthData;\n}\n\nexport function getSpecificHealthData(state) {\n  return (code) => {\n    return state.healthData[code];\n  };\n}\n\nfunction ResumeRange(data,transformValueCallBack,unit){\n  let min=transformValueCallBack(data[0].Value,unit);\n  let max=transformValueCallBack(data[0].Value,unit);\n  if(data && data.length>0){\n    data.forEach(record=>{\n      let newValue = transformValueCallBack(record.Value,record.Unit)\n      if(newValue>max){\n        max = newValue\n      }\n      if(newValue<min)\n      {\n        min=newValue      \n      }\n})\n  }\n  return {title:\"Range\",value:`${min} - ${max}  ${unit}`}\n}\nfunction ResumeSum(data,transformValueCallBack, unit){\n  let total=0\n  if(data && data.length>0){\n    data.forEach((record) => {\n      total+= transformValueCallBack(record.Value,record.Unit)\n    })\n  }  \n  \n  if(total%1!=0){\n    total=total.toFixed(2)\n  }\n  return {title:\"Total\",value:`${total} ${unit}`}\n  \n}\nfunction ResumeAverage(data,transformValueCallBack,unit){\n\n  let total=0\n  if(data && data.length>0){\n    data.forEach((record) => {\n      total+= transformValueCallBack(record.Value,record.Unit)\n    })\n    total = total/data.length\n  }  \n  \n  if(total%1!=0){\n    total=total.toFixed(2)\n  }\n  return {title:\"Average\",value:`${total} ${unit}`}\n}\n\nfunction ResumeCount(data){\n  let dataLength = data?data.length:0\n  return {title:\"Total\",value:`${dataLength} entries`}\n}\n\nfunction ResumeSleepAnalisis(data){\n  let sumInBedSeconds = 0;\n  let sumASleepSeconds = 0;\n  let countInBed = 0;\n  let countASleep=0;\n  let daysCounted = []\n  // need sum a sleep in the same day\n  if(data && data.length>0){\n    data.forEach(record => {\n      if(record.HkValue==\"InBed\"){\n        sumInBedSeconds+=transformTimeToSeconds(record.Value,record.Unit)\n        countInBed++;\n      }\n      else{        \n        sumASleepSeconds+=transformTimeToSeconds(record.Value,record.Unit)\n        \n        if(!(daysCounted.includes(record.StartDate.getTime()))){\n          countASleep++;\n          daysCounted.push(record.StartDate.getTime())\n        }        \n      }\n    });\n  }\n  let inBedAverage = transformSecondsToBetterFormat(sumInBedSeconds/countInBed);\n  let aSleepAverage =transformSecondsToBetterFormat(sumASleepSeconds/countASleep);\n\n\n\n  return {title:\"Sleep Average\",value:`Average In Bed: ${inBedAverage.Value} ${inBedAverage.Unit} / Average ASleep: ${aSleepAverage.Value} ${aSleepAverage.Unit}` }\n}\n\nexport function getHealthDataGraphResume(state){\n  return (code)=>{\n    let data= state.healthData[code]\n\n    let result = { title:\"\", value:\"\",date:\"\"}\n\n    switch(code){\n      case \"HKQuantityTypeIdentifierHeartRate\": \n      \n      let Unit =  (data&&data.length>0) ?data[0].Unit:\"\"\n      if(data&&data.length>0){\n        result = ResumeRange(data,(param,unit)=>{return param},Unit)\n      }\n        \n      break;\n      case \"HKCategoryTypeIdentifierSleepAnalysis\":\n        result = ResumeSleepAnalisis(data)\n        break;\n      case \"HKQuantityTypeIdentifierDistanceWalkingRunning\":\n        result = ResumeSum(data,transformDistanceToGlobalUnit,store.getters['units/getDistanceUnit'])\n      break;\n      case \"HKQuantityTypeIdentifierFlightsClimbed\":\n        result = ResumeSum(data,(param,unit)=>{return param},\"floors\")\n        break;\n      default:\n        if(dataTypeToCalculateAverage.includes(code)){\n          let Unit = (data&&data.length>0) ?data[0].Unit:\"\"\n          result = ResumeAverage(data,(param)=>{return param}, Unit)\n        }  \n        else if (code.includes(\"Quantity\")) {          \n          let Unit = (data&&data.length>0) ?data[0].Unit:\"\"\n          result = ResumeSum(data,(param)=>{return param},Unit)\n        }        \n        else{\n          result = ResumeCount(data)\n        }\n        break;\n    }    \n    return result\n  }\n}\n\nexport function getSpecificHealthDataGrapFormat(state) {\n  return (code) => {\n    let data = state.healthData[code];\n    let dataFormat = [];\n    if (code == \"HKCategoryTypeIdentifierSleepAnalysis\") {\n      return SleepAnalisysData(data);\n    } else if (code == \"HKQuantityTypeIdentifierHeartRate\") {\n      return HeartRateData(data);\n    }\n    else if(code == \"HKCategoryTypeIdentifierMindfulSession\"){\n      return MinfdfulData(data)\n    }\n    else if (code == \"HKCategoryTypeIdentifierSexualActivity\"){\n      return SexualActivityData(data)\n    }\n    else if (code.includes(\"Quantity\")) {\n      let dataDict = {};\n      if(data && data.length>0){\n        data.forEach((record) => {\n          let value = record.Value;\n          let dateFormat = DateFormat(record.Date.Date);\n          if (dateFormat in dataDict) {\n            dataDict[dateFormat].value += value;\n            dataDict[dateFormat].count += 1;\n          } else {\n            dataDict[dateFormat] = {\n              date: record.Date.Date,\n              value: value,\n              count: 1,\n            };\n          }\n        });\n      }\n      for (const [key, value] of Object.entries(dataDict)) {\n        if (dataTypeToCalculateAverage.includes(code)) {\n          value.value = value.value / value.count;\n        }\n        dataFormat.push({ x: value.date, y: value.value.toFixed(2) });\n      }\n    }\n    else if (code.includes(\"HKWorkout\")) \n    {\n      let types = {}\n      let dataFormat = []\n\n      if(data && data.length){\n        data.forEach((record) => {\n          console.log(\"extra\",record.Extrada)\n          if(record.Extrada){\n            for (const [key, value] of Object.entries(record.Extrada)) {\n              console.log(\"key\",key,\"value\",value.Value)\n              \n              if(types[key]){\n                let previousData = types[key]                \n                previousData.push({x:record.Date.Date, y:value.value})\n              }\n              else{\n                types[key]=[{x:record.Date.Date, y:value.value}]  \n              }\n            }\n          }\n        })\n        for (const [key, value] of Object.entries(types)) {\n          dataFormat.push({name:key,data:value})\n        }\n        console.log(dataFormat)\n        return dataFormat\n\n      }\n      \n\n\n\n      return [\n        {\n          name: code,\n          data: dataFormat,\n        },\n      ];\n    }\n    else {\n      \n      if(data && data.length){\n        data.forEach((record) => {\n          console.log(\"code\",code)\n          let yValue = record.Value;\n          if (code.includes(\"Category\")) {\n            let array = GetCategoriesByHkType(code);\n            yValue = array.indexOf(yValue);\n          }\n          dataFormat.push({ x: record.Date.Date, y: yValue });\n        });\n      }\n    }\n    return [\n      {\n        name: code,\n        data: dataFormat,\n      },\n    ];\n  };\n}\n\nfunction DateToSeconds(date) {\n  let dateHours = date.getHours();\n  let dateMinutes = date.getMinutes();\n  let dateSeconds = date.getSeconds();\n  let seconds = (dateHours * 60 + dateMinutes) * 60 + dateSeconds;\n  return seconds;\n}\n\nfunction DateFormat(date) {\n  return date.getFullYear() + \"/\" + date.getMonth() + \"/\" + date.getDate();\n}\n\nfunction DateFormatHour(date) {\n  return date.getFullYear() + \"/\" + date.getMonth() + \"/\" + date.getDate()+\"/\"+date.getHours();\n}\n\n\nfunction SleepAnalisysData(data) {\n  let inBedArray = [];\n  let aSleepArray = [];\n  if (data && data.length>0){\n    data.forEach((record) => {\n      let startTime = DateToSeconds(record.StartDate);\n      let endTime = DateToSeconds(record.EndDate);\n\n      if (record.EndDate.getDate() != record.StartDate.getDate()) {\n        let maxValue = (23 * 60 + 59) * 60 + 59;\n        let yValue1 = [startTime, maxValue];\n        let yValue2 = [0, endTime];\n\n        if (record.HkValue == \"InBed\") {\n\n          inBedArray.push({\n            x: record.StartDate.setHours(0,0,0),\n            y: yValue1,\n          });\n          inBedArray.push({\n            x: record.EndDate.setHours(0,0,0),\n            y: yValue2,\n          });\n\n        } else {\n          aSleepArray.push({\n            x: record.StartDate.setHours(0,0,0),\n            y: yValue1,\n          });\n          aSleepArray.push({\n            x: record.EndDate.setHours(0,0,0),\n            y: yValue2,\n          });\n        }\n      } else {\n        let yValue = [startTime, endTime];\n        if (record.HkValue == \"InBed\") {\n          inBedArray.push({\n            x: record.StartDate.setHours(0,0,0),\n            y: yValue,\n          });\n        } else {\n          aSleepArray.push({\n            x: record.StartDate.setHours(0,0,0),\n            y: yValue,\n          });\n        }\n      }\n    });\n  }\n  \n  return [\n    {\n      name: \"inBed\",\n      data: inBedArray,\n    },\n    {\n      name: \"aSleep\",\n      data: aSleepArray,\n    },\n  ];\n}\n\nfunction HeartRateData(data) {\n  let dataFormat = []\n  let dataDict = {};\n  if(data&&data.length>0){\n    data.forEach((record) => {\n      let value = record.Value;\n      if(value%1!=0){\n        value = parseFloat(value.toFixed(2))\n      }\n      let dateFormat = DateFormatHour(record.Date.Date);\n      if (dateFormat in dataDict) {\n        if(value>dataDict[dateFormat].max){\n          dataDict[dateFormat].max= value;\n        }\n        if(value<dataDict[dateFormat].min){\n          dataDict[dateFormat].min= value;\n        }\n      } else {\n        let date = new Date(record.Date.Date.setMinutes(0,0))\n        dataDict[dateFormat] = {\n          date: date,\n          max: value,\n          min: value\n        };\n      }\n    });\n  }\n  for (const [key, value] of Object.entries(dataDict)) {\n    dataFormat.push({ x: value.date, y: [value.min,value.max] });\n  }\n  return [\n    {\n      name: \"Heart Rate\",\n      data: dataFormat,\n    },\n  ];\n}\n\nfunction MinfdfulData(data){\n  let dataFormat = []\n  // dataFormat.push({x:\"TEST\",y:[new Date(),]})\n  if(data && data.length>0){\n    data.forEach((record)=>{\n      dataFormat.push({ x: \"Mind\", y: [record.StartDate.getTime() ,record.EndDate.getTime()] });\n    })\n  }\n\n  return[{\n    name: \"Mindful Minutes\",\n    data:dataFormat\n  }]\n}\n\nfunction SexualActivityData(data){\n  let dataFormat = []\n  let dataDict = {}\n  if(data && data.length>0){\n    data.forEach((record) => {\n      let date = DateFormat(record.Date.Date)\n      if (dataDict[date]){\n        dataDict[date].count+=1\n      }\n      else{\n        dataDict[date]={\n          date:date,\n          count:1\n        }\n      }\n    })\n  }\n  for (const [key, value] of Object.entries(dataDict)) {\n    dataFormat.push({ x: value.date, y: value.count });\n  }\n\n  return [{\n    name: \"Sexual Activity\",\n    data: dataFormat\n  }]\n} \n\nexport function getCategoryDataWebFormat(state) {\n  return (categoryId) => {\n    return state.healthWebFormat[categoryId];\n  };\n}\n\nexport function getValidCategories(state){\n  return state.validCategories\n}\n\nexport function getActivityIndexDataToGraphic(state){\n  \n  let metrics =state.userMetricData\n  let data=[]\n  metrics.forEach(element => {\n    data.push({\"x\":Date.parse(element.date),\"y\": parseInt(element.activityindex) })\n  });\n  let response = [{\n    \"name\":\"ActivityIndex\",\n    \"data\":data\n  }]\n  return response\n  \n\n  /* \n  [ \n    { \"name\": \"HKQuantityTypeIdentifierDistanceWalkingRunning\", \n      \"data\": [ \n        { \"x\": \"2021-08-03T20:43:30.823Z\", \"y\": \"131.68\" }, \n        { \"x\": \"2021-08-06T14:54:49.220Z\", \"y\": \"631.60\" }, \n        { \"x\": \"2021-08-09T16:06:59.679Z\", \"y\": \"421.70\" }, \n        { \"x\": \"2021-08-10T15:03:12.788Z\", \"y\": \"889.07\" }, \n        { \"x\": \"2021-08-11T05:04:47.586Z\", \"y\": \"2209.50\" } \n      ] \n    } \n  ]\n*/\n\n  return metrics\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}