{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/Rest\";\nimport { transformHealthDataToGlobalFormat } from \"@/common/helpers/healthKit\";\nimport { timeTransform } from \"@/plugins/firebase/firebase\";\nexport const FetchSpecificTypeData = async ({\n  commit\n}, payload) => {\n  let startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  let endDate = new Date();\n\n  if (payload.dates) {\n    startDate = payload.dates.startDate;\n    endDate = payload.dates.endDate;\n  }\n\n  let Ref = request.GET(`studies/${payload.studyId}/users/${payload.userId}/healthKit`);\n\n  if (payload.dataType.includes(\"Quantity\")) {\n    Ref = Ref.WHERE([\"body.quantity_type\", \"==\", payload.dataType]);\n  } else if (payload.dataType.includes(\"Category\")) {\n    Ref = Ref.WHERE([\"body.category_type\", \"==\", payload.dataType]);\n  } else {\n    Ref = Ref.WHERE([\"body.activity_name\", \"==\", payload.dataType]);\n  }\n\n  let RefCopy = Ref.CLONE();\n  RefCopy = RefCopy.WHERE([\"header.creation_date_time\", \">=\", startDate]);\n  RefCopy = RefCopy.WHERE([\"header.creation_date_time\", \"<=\", endDate]);\n  let dataSnap = await RefCopy.Execute();\n  let records = [];\n  records = dataSnap.docs.map(record => {\n    return transformHealthDataToGlobalFormat(record.data());\n  });\n\n  if (records.length == 0 && payload.dates == undefined) {\n    //Find Last and 1 month earlier\n    let NewRef = Ref.CLONE().ORDER_BY(\"header.creation_date_time\", true).LIMIT(1);\n    let dateSnap = await NewRef.Execute();\n\n    if (dateSnap.docs.length > 0) {\n      let endDate = dateSnap.docs[0].data().header.creation_date_time.toDate();\n      let startDate = new Date(endDate);\n      startDate.setDate(-30);\n      Ref = Ref.WHERE([\"header.creation_date_time\", \">=\", startDate]);\n      Ref = Ref.WHERE([\"header.creation_date_time\", \"<=\", endDate]);\n      let snapShot = await Ref.Execute();\n      records = snapShot.docs.map(record => {\n        return transformHealthDataToGlobalFormat(record.data());\n      });\n    }\n  } // if (records.length>0){\n\n\n  commit(\"saveSpecificTypeData\", {\n    data: records,\n    datatype: payload.dataType\n  }); // }\n};\nexport const FetchLastCategoryData = async ({\n  dispatch\n}, payload) => {\n  switch (payload.category) {\n    case \"activity\":\n      return dispatch(\"FetchLastActivityData\", payload);\n\n    case \"body\":\n      return dispatch(\"FetchLastBodyData\", payload);\n\n    case \"hearing\":\n      return dispatch(\"FetchLastHearingData\", payload);\n\n    case \"heart\":\n      return dispatch(\"FetchLastHeartData\", payload);\n\n    case \"mindfulness\":\n      return dispatch(\"FetchLastMindfulnessData\", payload);\n\n    case \"mobility\":\n      return dispatch(\"FetchLastMobilityData\", payload);\n\n    case \"nutrition\":\n      return dispatch(\"FetchLastNutritionData\", payload);\n\n    case \"respiratory\":\n      return dispatch(\"FetchLastRespiratoryData\", payload);\n\n    case \"sleep\":\n      return dispatch(\"FetchLastSleepData\", payload);\n\n    case \"symtoms\":\n      return dispatch(\"FetchLastSymtomsData\", payload);\n\n    case \"vitals\":\n      return dispatch(\"FetchLastVitalsData\", payload);\n\n    case \"other\":\n      return dispatch(\"FetchLastOtherData\", payload);\n  }\n};\nexport const FetchLastSurveys = async ({}, payload) => {\n  let surveysSnap = await request.GET(`studies/${payload.studyId}/surveys`).Execute();\n  return {\n    name: \"survey\",\n    data: surveysSnap.docs.filter(element => element.exists)\n  };\n};\nexport const FecthCategoryWithData = async ({\n  dispatch,\n  commit\n}, payload) => {\n  let values = await Promise.all([dispatch(\"FetchLastActivityData\", payload), dispatch(\"FetchLastBodyData\", payload), dispatch(\"FetchLastHearingData\", payload), dispatch(\"FetchLastHeartData\", payload), dispatch(\"FetchLastMindfulnessData\", payload), dispatch(\"FetchLastMobilityData\", payload), dispatch(\"FetchLastNutritionData\", payload), dispatch(\"FetchLastRespiratoryData\", payload), dispatch(\"FetchLastSleepData\", payload), dispatch(\"FetchLastSymtomsData\", payload), dispatch(\"FetchLastVitalsData\", payload), dispatch(\"FetchLastOtherData\", payload), dispatch(\"FetchLastSurveys\", payload)]);\n  let categories = values.filter(element => element.data.length > 0);\n  let categoriesNames = categories.map(element => {\n    return element.name;\n  });\n  commit(\"saveValidCategories\", categoriesNames);\n};\nexport const FetchMetricsData = async ({\n  commit\n}, {\n  studyId,\n  userId\n}) => {\n  let result = [];\n  let metricSnap = await request.GET(`studies/${studyId}/users/${userId}/metrics`).Execute();\n  /*  console.log(metricSnap.docs) */\n\n  for (const [key, element] of Object.entries(metricSnap.docs)) {\n    // let metricData = await request.GET(`studies/${studyId}/users/${userId}/metrics/${element.id}`).Execute();\n    result.push(element.data());\n  }\n\n  commit(\"saveMetricData\", result);\n};","map":{"version":3,"names":["request","transformHealthDataToGlobalFormat","timeTransform","FetchSpecificTypeData","commit","payload","startDate","Date","setDate","getDate","endDate","dates","Ref","GET","studyId","userId","dataType","includes","WHERE","RefCopy","CLONE","dataSnap","Execute","records","docs","map","record","data","length","undefined","NewRef","ORDER_BY","LIMIT","dateSnap","header","creation_date_time","toDate","snapShot","datatype","FetchLastCategoryData","dispatch","category","FetchLastSurveys","surveysSnap","name","filter","element","exists","FecthCategoryWithData","values","Promise","all","categories","categoriesNames","FetchMetricsData","result","metricSnap","key","Object","entries","push"],"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/store/modules/patient/HealthData/actions.js"],"sourcesContent":["import request from \"@/Rest\";\nimport { transformHealthDataToGlobalFormat } from \"@/common/helpers/healthKit\";\nimport { timeTransform } from \"@/plugins/firebase/firebase\";\n\nexport const FetchSpecificTypeData = async ({ commit }, payload) => {\n  let startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  let endDate = new Date();\n  if (payload.dates) {\n    startDate = payload.dates.startDate;\n    endDate = payload.dates.endDate;\n  }\n  let Ref = request.GET(\n    `studies/${payload.studyId}/users/${payload.userId}/healthKit`\n  );\n  if (payload.dataType.includes(\"Quantity\")) {\n    Ref = Ref.WHERE([\"body.quantity_type\", \"==\", payload.dataType]);\n  } else if (payload.dataType.includes(\"Category\")) {\n    Ref = Ref.WHERE([\"body.category_type\", \"==\", payload.dataType]);\n  } else {\n    Ref = Ref.WHERE([\"body.activity_name\", \"==\", payload.dataType]);\n  }\n  let RefCopy = Ref.CLONE();\n  RefCopy = RefCopy.WHERE([\"header.creation_date_time\", \">=\", startDate]);\n  RefCopy = RefCopy.WHERE([\"header.creation_date_time\", \"<=\", endDate]);\n  let dataSnap = await RefCopy.Execute();\n  let records = [];\n  records = dataSnap.docs.map((record) => {\n    return transformHealthDataToGlobalFormat(record.data());\n  });\n  if (records.length == 0 && payload.dates == undefined) {\n    //Find Last and 1 month earlier\n    let NewRef = Ref.CLONE()\n      .ORDER_BY(\"header.creation_date_time\", true)\n      .LIMIT(1);\n    let dateSnap = await NewRef.Execute();\n    if (dateSnap.docs.length > 0) {\n      let endDate = dateSnap.docs[0].data().header.creation_date_time.toDate();\n      let startDate = new Date(endDate);\n      startDate.setDate(-30);\n      Ref = Ref.WHERE([\"header.creation_date_time\", \">=\", startDate]);\n      Ref = Ref.WHERE([\"header.creation_date_time\", \"<=\", endDate]);\n\n      let snapShot = await Ref.Execute();\n      records = snapShot.docs.map((record) => {\n        return transformHealthDataToGlobalFormat(record.data());\n      });\n    }\n  }\n  // if (records.length>0){\n        commit(\"saveSpecificTypeData\", { data: records, datatype: payload.dataType });\n  // }\n  \n};\n\nexport const FetchLastCategoryData = async ({ dispatch }, payload) => {\n  switch (payload.category) {\n    case \"activity\":\n      return dispatch(\"FetchLastActivityData\", payload);\n    case \"body\":\n      return dispatch(\"FetchLastBodyData\", payload);\n    case \"hearing\":\n      return dispatch(\"FetchLastHearingData\", payload);\n    case \"heart\":\n      return dispatch(\"FetchLastHeartData\", payload);\n    case \"mindfulness\":\n      return dispatch(\"FetchLastMindfulnessData\", payload);\n    case \"mobility\":\n      return dispatch(\"FetchLastMobilityData\", payload);\n    case \"nutrition\":\n      return dispatch(\"FetchLastNutritionData\", payload);\n    case \"respiratory\":\n      return dispatch(\"FetchLastRespiratoryData\", payload);\n    case \"sleep\":\n      return dispatch(\"FetchLastSleepData\", payload);\n    case \"symtoms\":\n      return dispatch(\"FetchLastSymtomsData\", payload);\n    case \"vitals\":\n      return dispatch(\"FetchLastVitalsData\", payload);\n    case \"other\":\n      return dispatch(\"FetchLastOtherData\", payload);\n  }\n};\n\nexport const FetchLastSurveys = async ({}, payload) => {\n  let surveysSnap = await request\n    .GET(`studies/${payload.studyId}/surveys`)\n    .Execute();\n  return {\n    name: \"survey\",\n    data: surveysSnap.docs.filter((element) => element.exists),\n  };\n};\n\nexport const FecthCategoryWithData = async ({ dispatch, commit }, payload) => {\n  let values = await Promise.all([\n    dispatch(\"FetchLastActivityData\", payload),\n    dispatch(\"FetchLastBodyData\", payload),\n    dispatch(\"FetchLastHearingData\", payload),\n    dispatch(\"FetchLastHeartData\", payload),\n    dispatch(\"FetchLastMindfulnessData\", payload),\n    dispatch(\"FetchLastMobilityData\", payload),\n    dispatch(\"FetchLastNutritionData\", payload),\n    dispatch(\"FetchLastRespiratoryData\", payload),\n    dispatch(\"FetchLastSleepData\", payload),\n    dispatch(\"FetchLastSymtomsData\", payload),\n    dispatch(\"FetchLastVitalsData\", payload),\n    dispatch(\"FetchLastOtherData\", payload),\n    dispatch(\"FetchLastSurveys\", payload),\n  ]);\n  let categories = values.filter((element) => element.data.length > 0);\n  let categoriesNames = categories.map((element) => {\n    return element.name;\n  });\n  commit(\"saveValidCategories\", categoriesNames);\n};\n\nexport const FetchMetricsData = async ({ commit }, { studyId, userId }) => {\n  let result = [];\n  let metricSnap = await request.GET(`studies/${studyId}/users/${userId}/metrics`).Execute();\n /*  console.log(metricSnap.docs) */\n  for (const [key, element] of Object.entries(metricSnap.docs)) {\n    // let metricData = await request.GET(`studies/${studyId}/users/${userId}/metrics/${element.id}`).Execute();\n    result.push(element.data());\n  }\n  commit(\"saveMetricData\", result);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}