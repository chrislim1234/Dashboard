{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data: () => ({\n    errors: {}\n  }),\n  props: {\n    Options: Array\n  },\n  methods: {\n    classError(value) {\n      if (this.errors[value]) {\n        return \"TextInput input-no-value-style\";\n      }\n\n      return \"TextInput\";\n    },\n\n    addOptions() {\n      const val = this.Options.length;\n      this.Options.push({\n        text: \"\",\n        value: \"\" + val\n      });\n    },\n\n    deleteOptions(index) {\n      this.Options.splice(index, 1);\n    },\n\n    checkQuestion() {\n      let error = false;\n      let msg = \"\";\n      this.errors = {};\n      this.Options.forEach(element => {\n        if (element.text == \"\") {\n          error = true;\n          msg = \"The fields can't be blank\";\n          this.errors[element.value] = true;\n        }\n      });\n      return {\n        \"error\": error,\n        \"msg\": msg\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/components/surveys/SurveyBuilder/questionsTypes/Picker.vue"],"names":[],"mappings":";AAsCA,eAAe;EACb,IAAI,EAAC,OAAO;IACV,MAAM,EAAC;EADG,CAAP,CADQ;EAIb,KAAK,EAAE;IACL,OAAO,EAAE;EADJ,CAJM;EAOb,OAAO,EAAE;IACP,UAAU,CAAC,KAAD,EAAO;MACf,IAAG,KAAK,MAAL,CAAY,KAAZ,CAAH,EAAsB;QACpB,OAAO,gCAAP;MACF;;MACA,OAAO,WAAP;IACD,CANM;;IAOP,UAAU,GAAG;MACX,MAAM,GAAE,GAAI,KAAK,OAAL,CAAa,MAAzB;MACA,KAAK,OAAL,CAAa,IAAb,CAAkB;QAAE,IAAI,EAAE,EAAR;QAAY,KAAK,EAAE,KAAG;MAAtB,CAAlB;IACD,CAVM;;IAWP,aAAa,CAAC,KAAD,EAAQ;MACnB,KAAK,OAAL,CAAa,MAAb,CAAoB,KAApB,EAA2B,CAA3B;IACD,CAbM;;IAcP,aAAa,GAAE;MACb,IAAI,KAAI,GAAI,KAAZ;MACA,IAAI,GAAE,GAAI,EAAV;MACA,KAAK,MAAL,GAAY,EAAZ;MACA,KAAK,OAAL,CAAa,OAAb,CAAqB,OAAM,IAAK;QAC9B,IAAG,OAAO,CAAC,IAAR,IAAgB,EAAnB,EAAsB;UACpB,KAAI,GAAI,IAAR;UACA,GAAE,GAAI,2BAAN;UACA,KAAK,MAAL,CAAY,OAAO,CAAC,KAApB,IAA2B,IAA3B;QACF;MACD,CAND;MASA,OAAO;QAAC,SAAQ,KAAT;QAAe,OAAM;MAArB,CAAP;IACF;;EA5BO;AAPI,CAAf","sourcesContent":["<template>\n    <div>\n    <label>Options: </label>\n    <div v-for=\"(option, index) in Options\" :key=\"index\">\n      <br />\n      <div style=\"display: flex;\">\n        <input class=\"RadioInput\" type=\"radio\" disabled />\n        <input\n          v-model=\"option.text\"\n          :name=\"`options[${index}]`\"\n          type=\"text\"\n          class=\"TextInput\"\n          :class=\"classError(option.value)\"\n        />\n        <button\n          v-if=\"index > 1\"\n          @click=\"\n            () => {\n              deleteOptions(index);\n            }\n          \"\n          type=\"button\"\n        >\n          Delete\n        </button>\n      </div>\n      <br />\n    </div>\n    <br />\n    <br />\n    <div class=\"form-group\">\n      <button @click=\"addOptions(Options)\" type=\"button\" class=\"btn btn-terceary\">\n        Add Options\n      </button>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  data:() => ({\n    errors:{}\n  }),\n  props: {\n    Options: Array,\n  },\n  methods: {\n    classError(value){\n      if(this.errors[value]){\n        return \"TextInput input-no-value-style\"\n      }\n      return \"TextInput\"\n    },\n    addOptions() {\n      const val = this.Options.length;\n      this.Options.push({ text: \"\", value: \"\"+val });\n    },\n    deleteOptions(index) {\n      this.Options.splice(index, 1);\n    },\n    checkQuestion(){\n      let error = false\n      let msg = \"\"\n      this.errors={}\n      this.Options.forEach(element => {\n        if(element.text == \"\"){\n          error = true\n          msg = \"The fields can't be blank\"\n          this.errors[element.value]=true\n        }\n      });\n\n\n      return {\"error\":error,\"msg\":msg};\n    }\n  },\n};\n</script>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}