{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"page\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_4 = /*#__PURE__*/_createTextVNode(\" Select survey type \");\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_9 = /*#__PURE__*/_createTextVNode(\" Select Question of survey \");\n\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_13 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_alt_select = _resolveComponent(\"alt-select\");\n\n  const _component_survey = _resolveComponent(\"survey\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.schedule && $options.schedule(...args))\n  }, \"Scheduler\"), _hoisted_3, _hoisted_4, _hoisted_5, _hoisted_6, _createVNode(_component_alt_select, {\n    options: $options.surveyTypes,\n    modelValue: $data.surveySelected,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.surveySelected = $event),\n    onChange: $options.onSurveyTypeChange,\n    ref: \"surveyTypeSelect\"\n  }, null, 8, [\"options\", \"modelValue\", \"onChange\"]), _hoisted_7, _hoisted_8, _hoisted_9, _hoisted_10, _hoisted_11, _createVNode(_component_alt_select, {\n    options: $options.surveyQuestions,\n    modelValue: $data.questionSelected,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.questionSelected = $event),\n    ref: \"questionSelect\"\n  }, null, 8, [\"options\", \"modelValue\"]), _hoisted_12, _hoisted_13, _createVNode(_component_survey, {\n    data: $options.surveyData\n  }, null, 8, [\"data\"])]);\n}","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/views/surveys/surveyUser.vue"],"names":[],"mappings":";;EACO,KAAK,EAAC;;;gCACT,mBAAA,CAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM,CAAA,CAAN,C;;gCAEA,mBAAA,CAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM,CAAA,CAAN,C;;iDAAM,sB;;gCAEN,mBAAA,CAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM,CAAA,CAAN,C;;gCAAM,mBAAA,CAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM,CAAA,CAAN,C;;gCAON,mBAAA,CAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM,CAAA,CAAN,C;;gCAAM,mBAAA,CAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM,CAAA,CAAN,C;;iDAAM,6B;;iCAEZ,mBAAA,CAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM,CAAA,CAAN,C;;iCAAM,mBAAA,CAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM,CAAA,CAAN,C;;iCAMN,mBAAA,CAAK,IAAL,EAAK,IAAL,EAAK,IAAL,EAAK,CAAA,CAAL,C;;iCACA,mBAAA,CAAK,IAAL,EAAK,IAAL,EAAK,IAAL,EAAK,CAAA,CAAL,C;;;;;;;uBArBF,mBAAA,CAuBM,KAvBN,EAAA,UAAA,EAuBM,CAtBJ,UAsBI,EArBJ,mBAAA,CAA4C,QAA5C,EAA4C;IAAnC,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,IAAA,KAAE,QAAA,CAAA,QAAA,IAAA,QAAA,CAAA,QAAA,CAAA,GAAA,IAAA,CAAF;EAA8B,CAA5C,EAA0B,WAA1B,CAqBI,EApBJ,UAoBI,E,UAAA,EAlBJ,UAkBI,EAlBE,UAkBF,EAjBJ,YAAA,CAKE,qBALF,EAKE;IAJC,OAAO,EAAE,QAAA,CAAA,WAIV;gBAHS,KAAA,CAAA,cAGT;+DAHS,KAAA,CAAA,c,GAAc,M,CAGvB;IAFC,QAAQ,EAAE,QAAA,CAAA,kBAEX;IADA,GAAG,EAAC;EACJ,CALF,E,IAAA,E,CAAA,E,qCAAA,CAiBI,EAXJ,UAWI,EAXE,UAWF,E,UAAA,EATJ,WASI,EATE,WASF,EARJ,YAAA,CAIE,qBAJF,EAIE;IAHC,OAAO,EAAE,QAAA,CAAA,eAGV;gBAFS,KAAA,CAAA,gBAET;+DAFS,KAAA,CAAA,gB,GAAgB,M,CAEzB;IADA,GAAG,EAAC;EACJ,CAJF,E,IAAA,E,CAAA,E,yBAAA,CAQI,EAHJ,WAGI,EAFJ,WAEI,EADJ,YAAA,CAA6B,iBAA7B,EAA6B;IAApB,IAAI,EAAE,QAAA,CAAA;EAAc,CAA7B,EAAyB,IAAzB,EAAyB,CAAzB,EAAyB,CAAA,MAAA,CAAzB,CACI,CAvBN,C","sourcesContent":["<template>\n  <div class=\"page\">\n    <br />\n    <button @click=\"schedule\">Scheduler</button>\n    <br />\n    Select survey type\n    <br /><br />\n    <alt-select\n      :options=\"surveyTypes\"\n      v-model=\"surveySelected\"\n      :onChange=\"onSurveyTypeChange\"\n      ref=\"surveyTypeSelect\"\n    />\n    <br /><br />\n    Select Question of survey\n    <br /><br />\n    <alt-select\n      :options=\"surveyQuestions\"\n      v-model=\"questionSelected\"\n      ref=\"questionSelect\"\n    />\n    <br/>\n    <br/>\n    <survey :data=\"surveyData\" />\n  </div>\n</template>\n<script>\nimport altSelect from \"@/components/multiSelect/Select\";\nimport { mapGetters } from \"vuex\";\nimport store from \"@/store\";\nimport survey from \"@/components/surveys/survey\";\nexport default {\n  name: \"surveyUser\",\n  data() {\n    return {\n      surveySelected: null,\n      questionSelected: null,\n      studyId: this.$route.query.studyId\n    };\n  },\n  components: {\n    altSelect,\n    survey\n  },\n  methods: {\n    onSurveyTypeChange() {\n      this.$refs.questionSelect.setNewValue(\n        this.surveyQuestions && this.surveyQuestions.length > 0\n          ? this.surveyQuestions[0].id\n          : null\n      );\n    },\n    schedule() {\n      this.$router.push(`/surveyScheduler/${this.studyId}?userId=${this.$route.query.userId}`)\n    }\n  },\n  computed: {\n    ...mapGetters(\"surveys\", [\"getUserAnswers\"]),\n    surveyTypes() {\n      let types = [];\n      let surveys = this.getUserAnswers(this.studyId,this.$route.query.userId)\n      for (const [key, value] of Object.entries(surveys)) {\n        types.push({ id: key, name: value.data.title, value: key})\n    }\n      return types;\n    },\n    surveyQuestions() {\n      let qs = [];\n      if(this.surveySelected){\n        let surveys = this.getUserAnswers(this.studyId,this.$route.query.userId)\n        let questions = surveys[this.surveySelected].questions        \n        for (const [key, value] of Object.entries(questions)) {\n          qs.push({\n             id: value.identifier,\n             name: value.question,\n             value: value.identifier,\n           });\n        }\n      }\n      return qs;\n    },\n    surveyData(){\n      let surveys = this.getUserAnswers(this.studyId,this.$route.query.userId)\n      let questionData = surveys[this.surveySelected]\n      if(questionData){\n        if(questionData.answers[this.questionSelected]){\n          return questionData.answers[this.questionSelected]\n        }\n      }\n      return {}\n    }\n  },\n  mounted() {\n    this.$refs.surveyTypeSelect.setNewValue(\n      this.surveyTypes && this.surveyTypes.length > 0\n        ? this.surveyTypes[0].id\n        : null\n    );\n    this.surveySelected =\n      this.surveyTypes && this.surveyTypes.length > 0\n        ? this.surveyTypes[0].id\n        : null;\n    this.$refs.questionSelect.setNewValue(\n      this.surveyQuestions && this.surveyQuestions.length > 0\n        ? this.surveyQuestions[0].id\n        : null\n    );\n  },\n  beforeRouteEnter(to, from, next) {\n    Promise.all([\n      store.dispatch(\"surveys/FetchUserSurveyData\", {\n        studyId: to.query.studyId,\n        userId: to.query.userId,\n      }),\n    ]).then(() => {\n      next();\n    });\n  },\n};\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}