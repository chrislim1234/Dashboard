{"ast":null,"code":"export default {\n  data: () => ({\n    errors: {}\n  }),\n  props: {\n    Options: Object\n  },\n  methods: {\n    classError(value) {\n      if (this.errors[value]) {\n        return \"TextInput input-no-value-style\";\n      }\n\n      return \"TextInput\";\n    },\n\n    checkQuestion() {\n      this.errors = {};\n      let error = false;\n      let msg = \"\"; //Check all fields are not empty\n\n      if (!(this.Options != null && this.Options.id != \"\" && this.Options.minValueDescription != \"\" && this.Options.max != \"\" && this.Options.min != \"\" && this.Options.maxValueDescription != \"\" && this.Options.maxFractionDigits != \"\" && this.Options.default != \"\")) {\n        error = true;\n        msg = \"The fields can't be blank\";\n        this.errors['minDescription'] = this.Options.minValueDescription == \"\";\n        this.errors['max'] = this.Options.max == \"\";\n        this.errors['min'] = this.Options.min == \"\";\n        this.errors['maxDescription'] = this.Options.maxValueDescription == \"\";\n        this.errors['maxFraction'] = this.Options.maxFractionDigits == \"\";\n        this.errors['default'] = this.Options.default == \"\";\n      } else {\n        let min = parseInt(this.Options.min);\n        let max = parseInt(this.Options.max);\n        let defaults = parseInt(this.Options.default);\n        let step = parseInt(this.Options.step); //check step and default lower than max and greater than min\n\n        if (defaults < min) {\n          error = true;\n          msg = \"default value must be greater than min value\";\n          this.errors['default'] = true;\n        }\n\n        if (defaults > max) {\n          error = true;\n          msg = \"default value must be lower than max value\";\n          this.errors['default'] = true;\n        }\n\n        if (step > max) {\n          error = true;\n          msg = \"Step value must be lower than max value\";\n          this.errors['default'] = true;\n        } //check max value greater than min value\n\n\n        if (min > max) {\n          error = true;\n          msg = \"Min value must be lower than max value\";\n          this.errors['min'] = true;\n        }\n      }\n\n      console.log(\"this.errors\", this.errors);\n      console.log(msg);\n      return {\n        \"error\": error,\n        \"msg\": msg\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/components/surveys/SurveyBuilder/questionsTypes/ContinuosScale.vue"],"names":[],"mappings":"AA+EA,eAAe;EACb,IAAI,EAAC,OAAO;IACV,MAAM,EAAC;EADG,CAAP,CADQ;EAIb,KAAK,EAAE;IACL,OAAO,EAAE;EADJ,CAJM;EAOb,OAAO,EAAC;IACN,UAAU,CAAC,KAAD,EAAO;MACf,IAAG,KAAK,MAAL,CAAY,KAAZ,CAAH,EAAsB;QACpB,OAAO,gCAAP;MACF;;MACA,OAAO,WAAP;IACD,CANK;;IAON,aAAa,GAAE;MACb,KAAK,MAAL,GAAY,EAAZ;MACA,IAAI,KAAI,GAAI,KAAZ;MACA,IAAI,GAAE,GAAI,EAAV,CAHa,CAIb;;MACA,IAAG,EACA,KAAK,OAAL,IAAc,IAAd,IACD,KAAK,OAAL,CAAa,EAAb,IAAmB,EADlB,IAED,KAAK,OAAL,CAAa,mBAAb,IAAoC,EAFnC,IAGD,KAAK,OAAL,CAAa,GAAb,IAAoB,EAHnB,IAID,KAAK,OAAL,CAAa,GAAb,IAAoB,EAJnB,IAKD,KAAK,OAAL,CAAa,mBAAb,IAAoC,EALnC,IAMD,KAAK,OAAL,CAAa,iBAAb,IAAkC,EANjC,IAOD,KAAK,OAAL,CAAa,OAAb,IAAwB,EARvB,CAAH,EAUE;QACE,KAAI,GAAI,IAAR;QACA,GAAE,GAAI,2BAAN;QAEA,KAAK,MAAL,CAAY,gBAAZ,IAA+B,KAAK,OAAL,CAAa,mBAAb,IAAoC,EAAnE;QACA,KAAK,MAAL,CAAY,KAAZ,IAAoB,KAAK,OAAL,CAAa,GAAb,IAAoB,EAAxC;QACA,KAAK,MAAL,CAAY,KAAZ,IAAoB,KAAK,OAAL,CAAa,GAAb,IAAoB,EAAxC;QACA,KAAK,MAAL,CAAY,gBAAZ,IAA+B,KAAK,OAAL,CAAa,mBAAb,IAAoC,EAAnE;QACA,KAAK,MAAL,CAAY,aAAZ,IAA4B,KAAK,OAAL,CAAa,iBAAb,IAAkC,EAA9D;QACA,KAAK,MAAL,CAAY,SAAZ,IAAwB,KAAK,OAAL,CAAa,OAAb,IAAwB,EAAhD;MAEF,CArBF,MAsBK;QACH,IAAI,GAAE,GAAI,QAAQ,CAAC,KAAK,OAAL,CAAa,GAAd,CAAlB;QACA,IAAI,GAAE,GAAI,QAAQ,CAAC,KAAK,OAAL,CAAa,GAAd,CAAlB;QACA,IAAI,QAAO,GAAI,QAAQ,CAAC,KAAK,OAAL,CAAa,OAAd,CAAvB;QACA,IAAI,IAAG,GAAI,QAAQ,CAAC,KAAK,OAAL,CAAa,IAAd,CAAnB,CAJG,CAMH;;QAEA,IAAG,QAAQ,GAAC,GAAZ,EAAgB;UACd,KAAI,GAAI,IAAR;UACA,GAAE,GAAI,8CAAN;UAEA,KAAK,MAAL,CAAY,SAAZ,IAAyB,IAAzB;QACF;;QAEA,IAAG,QAAQ,GAAC,GAAZ,EAAgB;UACd,KAAI,GAAI,IAAR;UACA,GAAE,GAAI,4CAAN;UACA,KAAK,MAAL,CAAY,SAAZ,IAAyB,IAAzB;QACF;;QAEA,IAAG,IAAI,GAAC,GAAR,EAAY;UACV,KAAI,GAAI,IAAR;UACA,GAAE,GAAI,yCAAN;UACA,KAAK,MAAL,CAAY,SAAZ,IAAyB,IAAzB;QACF,CAzBG,CA2BH;;;QAEA,IAAG,GAAG,GAAC,GAAP,EAAW;UACT,KAAI,GAAI,IAAR;UACA,GAAE,GAAI,wCAAN;UACA,KAAK,MAAL,CAAY,KAAZ,IAAqB,IAArB;QACF;MACF;;MAEN,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA0B,KAAK,MAA/B;MACU,OAAO,CAAC,GAAR,CAAY,GAAZ;MACJ,OAAO;QAAC,SAAQ,KAAT;QAAe,OAAM;MAArB,CAAP;IACF;;EAzEM;AAPK,CAAf","sourcesContent":["<template>\n  <div>\n    <div class=\"wrap-input\">\n      <label>Min: </label>\n      <input\n        v-model=\"Options.min\"\n        :name=\"`options[${Options.id}]`\"\n        type=\"number\"\n        placeholder=\"1\"\n        min=\"0\"\n        :class=\"classError('min')\"\n      />\n      <label> Description: </label>\n      <input\n        v-model=\"Options.minValueDescription\"\n        class=\"TextInput\"\n        type=\"text\"\n        placeholder=\"Min value description\"\n        :class=\"classError('minDescription')\"\n      />    \n    </div>\n    <br/>\n    <div class=\"wrap-input\">\n      <label>Max: </label>\n      <input\n        v-model=\"Options.max\"\n        :name=\"`options[${Options.id}]`\"\n        type=\"number\"\n        placeholder=\"5\"\n        min=\"0\"\n        :class=\"classError('max')\"\n      />\n      <label> Description: </label>\n      <input\n        v-model=\"Options.maxValueDescription\"\n        class=\"TextInput\"\n        placeholder=\"MÃ¡x value description\"\n        type=\"text\"\n        :class=\"classError('maxDescription')\"\n      />   \n    </div>\n     <br/>\n    <div>\n      <label>Vertical: </label>\n      <input\n        v-model=\"Options.vertical\"\n        type=\"checkbox\"\n        class=\"TextInput\"\n      />\n    </div>\n    <br/>\n    <div>\n      <label>Default: </label>\n      <input\n        v-model=\"Options.default\"\n        :name=\"`default[${Options.id}]`\"\n        type=\"number\"\n        class=\"TextInput\"\n        placeholder=\"1\"\n        min=\"0\"\n        :class=\"classError('default')\"\n      />\n    </div>\n    <div>\n      <label>Max Fraction Digits: </label>\n      <input\n        v-model=\"Options.maxFractionDigits\"\n        :name=\"`default[${Options.id}]`\"\n        type=\"number\"\n        class=\"TextInput\"\n        placeholder=\"1\"\n        min=\"1\"\n        :class=\"classError('maxFraction')\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data:() => ({\n    errors:{}\n  }),\n  props: {\n    Options: Object\n  },\n  methods:{\n    classError(value){\n      if(this.errors[value]){\n        return \"TextInput input-no-value-style\"\n      }\n      return \"TextInput\"\n    },\n    checkQuestion(){\n      this.errors={}\n      let error = false\n      let msg = \"\"\n      //Check all fields are not empty\n      if(!\n        (this.Options!=null &&\n        this.Options.id != \"\" &&\n        this.Options.minValueDescription != \"\" &&\n        this.Options.max != \"\" && \n        this.Options.min != \"\" &&\n        this.Options.maxValueDescription != \"\" &&\n        this.Options.maxFractionDigits != \"\" &&\n        this.Options.default != \"\")\n        )\n        {     \n          error = true\n          msg = \"The fields can't be blank\"\n\n          this.errors['minDescription']= this.Options.minValueDescription == \"\"\n          this.errors['max']= this.Options.max == \"\"\n          this.errors['min']= this.Options.min == \"\"\n          this.errors['maxDescription']= this.Options.maxValueDescription == \"\"\n          this.errors['maxFraction']= this.Options.maxFractionDigits == \"\"\n          this.errors['default']= this.Options.default == \"\"\n\n        }\n      else {\n        let min = parseInt(this.Options.min)\n        let max = parseInt(this.Options.max)\n        let defaults = parseInt(this.Options.default)\n        let step = parseInt(this.Options.step)\n\n        //check step and default lower than max and greater than min\n        \n        if(defaults<min){\n          error = true\n          msg = \"default value must be greater than min value\"\n\n          this.errors['default'] = true\n        }    \n\n        if(defaults>max){\n          error = true\n          msg = \"default value must be lower than max value\"\n          this.errors['default'] = true\n        }\n\n        if(step>max){\n          error = true\n          msg = \"Step value must be lower than max value\"\n          this.errors['default'] = true\n        }\n\n        //check max value greater than min value\n\n        if(min>max){\n          error = true\n          msg = \"Min value must be lower than max value\"\n          this.errors['min'] = true\n        }      \n      }\n      \nconsole.log(\"this.errors\",this.errors)\n          console.log(msg)\n      return {\"error\":error,\"msg\":msg};\n    }\n  }\n};\n</script>\n\n<style>\n</style>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}