{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Question from \"@/components/surveys/SurveyBuilder/Questions\";\nimport { mapActions, mapGetters } from \"vuex\";\nimport store from \"@/store\";\nimport { uuidv4 } from \"@/helpers\";\nimport Swal from 'sweetalert2';\nexport default {\n  name: \"App\",\n  props: {\n    studyId: {\n      type: String,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      surveyId: this.$route.params.surveyId,\n      image: null,\n      section: \"\",\n      subtitle: \"\",\n      title: \"\",\n      scopeTypes: [\"Public\", \"Private\"],\n      surveyName: \"\",\n      orderQuestion: 0,\n      order: \"\",\n      main: null,\n      surveys: {},\n      surveyData: null,\n      questionData: {},\n      newQuestionsData: {},\n      errMsg: false,\n      msg: \"\",\n      cl: \"\"\n    };\n  },\n\n  components: {\n    Question\n  },\n  methods: { ...mapActions(\"surveys\", [\"DeleteSurveyQuestion\", \"AddSurvey\", \"DeleteSurvey\"]),\n\n    addQuestion() {\n      this.orderQuestion += 1;\n      let id = uuidv4();\n      this.newQuestionsData[id] = {\n        title: \"\",\n        id: id,\n        type: \"\",\n        scope: \"public\",\n        identifier: \"\",\n        readonly: false,\n        description: \"\",\n        question: [],\n        required: true,\n        options: [],\n        order: \"\" + this.orderQuestion\n      };\n    },\n\n    deleteQuestions(index) {\n      this.DeleteSurveyQuestion({ ...this.newQuestionsData[index],\n        name: this.surveyId,\n        studyId: this.studyId\n      }).then(() => {\n        delete this.questionData[index];\n        delete this.newQuestionsData[index];\n        console.log(\"deleted\");\n      });\n    },\n\n    saveSurvey(data) {\n      this.errMsg = false;\n      this.DeleteSurvey({\n        surveyId: this.surveyId,\n        studyId: this.studyId\n      }).then(() => {\n        let id = uuidv4();\n        data['identifier'] = id;\n        this.AddSurvey({\n          id: id,\n          studyId: this.studyId,\n          questions: this.newQuestionsData,\n          data: data\n        }).then(() => {\n          this.errMsg = true;\n          this.msg = \"Surveys Builder has been created successfully\";\n          this.cl = \"alert-success\";\n          Swal.fire({\n            title: 'success',\n            text: \"Surveys Builder has been created successfully\",\n            icon: 'success'\n          }).then(() => {\n            this.$router.push(`/surveysList/${this.studyId}`);\n          });\n        });\n      });\n    },\n\n    validSurvey(questions, data) {\n      // review if question has data\n      let isValid = true;\n\n      for (const [key, value] of Object.entries(questions)) {\n        console.log(\"tryReview\");\n\n        if (!this.$refs[value.id].reviewQuestionData()) {\n          isValid = false;\n        }\n      }\n\n      if (isValid) {\n        this.saveSurvey(data);\n      } else {\n        this.errMsg = true;\n        this.cl = \"alert-err\";\n        this.msg = \"Some data is incorrect\";\n      }\n    },\n\n    updateSurvey() {\n      this.errMsg = false;\n      this.msg = \"\";\n\n      if (this.surveys.title && this.surveys.subtitle && this.surveys.order && this.surveys.section) {\n        let surveyData = {\n          'image': \"SurveyIcon\",\n          'order': this.surveys.order,\n          'section': this.surveys.section,\n          'subtitle': this.surveys.subtitle,\n          'title': this.surveys.title,\n          'main': this.surveys.main\n        };\n\n        if (Object.keys(this.newQuestionsData).length) {\n          let questionIdentifiers = Object.keys(this.newQuestionsData).map(key => {\n            return this.newQuestionsData[key].identifier;\n          });\n          let uniqueIdentifiers = new Set(questionIdentifiers);\n\n          if (questionIdentifiers.length == uniqueIdentifiers.size) {\n            this.validSurvey(this.newQuestionsData, surveyData);\n          } else {\n            this.errMsg = true;\n            this.cl = \"alert-err\";\n            this.msg = \"The question identifiers must be unique\";\n          }\n        } else {\n          this.errMsg = true;\n          this.cl = \"alert-err\";\n          this.msg = \"The questions cannot be empty\";\n        }\n      } else {\n        this.errMsg = true;\n        this.cl = \"alert-err\";\n        this.msg = \"The fields can't be blank\";\n      }\n    },\n\n    setSurveyData() {\n      this.surveyData = this.getSurveysData(this.studyId)[this.surveyId];\n\n      if (this.surveyData) {\n        let data = this.surveyData.data;\n        this.surveys = {\n          'image': data.image,\n          'order': data.order,\n          'section': data.section,\n          'subtitle': data.subtitle,\n          'title': data.title,\n          'main': data.main\n        };\n        let questions = this.surveyData.questions;\n\n        if (questions) {\n          for (const [key, value] of Object.entries(questions)) {\n            this.questionData[value.id] = { ...value,\n              readonly: true,\n              disabled: true\n            };\n          }\n        }\n\n        this.newQuestionsData = { ...this.questionData\n        };\n      }\n    }\n\n  },\n  computed: { ...mapGetters(\"surveys\", [\"getSurveysData\"])\n  },\n\n  created() {\n    this.setSurveyData();\n  },\n\n  beforeRouteEnter(to, from, next) {\n    Promise.all([store.dispatch(\"surveys/FetchSurveyData\", {\n      studyId: to.params.studyId,\n      surveyId: to.params.surveyId\n    })]).then(() => {\n      next();\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/components/surveys/SurveyBuilder/editSurveyBuilder.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div  id=\"app\">\n    <div class=\"wrapper\" v-if=\"surveys\">\n      <div class=\"input-form\">\n        <div :class=\"cl\" v-if=\"errMsg\">\n          {{msg}}\n        </div>\n        <h1>Edit Surveys Builder</h1>\n        <br />\n        <label>Enter the title: </label>\n        <input v-model=\"surveys.title\" type=\"text\" placeholder=\"Title\" />\n        <br>\n        <label>Enter the subtitle: </label>\n        <input v-model=\"surveys.subtitle\" type=\"text\" placeholder=\"Subtitle\" />\n        <br>\n        <label class=\"my-4\">Show on main screen: </label>\n        <input v-model=\"surveys.main\" type=\"checkbox\" />\n        <br />\n        <label>Order: </label>\n        <input v-model=\"surveys.order\" type=\"number\"  min=\"1\" pattern=\"^[0-9]+\"/>\n        <br>\n        <label>Section: </label>\n        <input v-model=\"surveys.section\" type=\"text\" placeholder=\"Section\" />\n        <!-- <br>\n        <label>Icon: </label>\n        <input type=\"file\" placeholder=\"Icon\" accept=\"image/*\" /> -->\n        <br>\n        <div v-for=\"question in newQuestionsData\" :key=\"question.id\">\n          <Question :disabledSelect=\"question.disabled\" :question=\"question\" @DeleteQuestion=\"deleteQuestions\" :ref=\"question.id\"/>\n        </div>\n        <br />\n        <div class=\"form-group\">\n          <button @click=\"addQuestion\" type=\"button\" class=\"btn btn-secondary\">\n            Add question\n          </button>\n        </div>\n        <div class=\"form-group\">\n          <button @click=\"updateSurvey\" type=\"button\" class=\"btn btn-primary\">\n            Update\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Question from \"@/components/surveys/SurveyBuilder/Questions\";\nimport { mapActions, mapGetters } from \"vuex\";\nimport store from \"@/store\";\nimport { uuidv4 } from \"@/helpers\";\nimport Swal from 'sweetalert2'\n\nexport default {\n  name: \"App\",\n  props: {\n    studyId: {\n      type: String,\n      required: true,\n    }\n  },\n  data() {\n    return {\n      surveyId: this.$route.params.surveyId,\n      image: null,\n      section: \"\",\n      subtitle: \"\",\n      title: \"\",\n      scopeTypes: [\"Public\", \"Private\"],\n      surveyName: \"\",\n      orderQuestion:0,\n      order:\"\",\n      main: null,\n      surveys: {},\n      surveyData:null,\n      questionData: {},\n      newQuestionsData:{},\n      errMsg: false,\n      msg: \"\",\n      cl:\"\"\n    }\n  },\n  components: {\n    Question,\n  },\n  methods: {\n    ...mapActions(\"surveys\", [\"DeleteSurveyQuestion\", \"AddSurvey\",\"DeleteSurvey\"]),\n    addQuestion() {\n      this.orderQuestion+=1\n      let id = uuidv4()\n      this.newQuestionsData[id]={\n        title: \"\",\n        id: id,\n        type: \"\",\n        scope: \"public\",\n        identifier: \"\",\n        readonly: false,\n        description: \"\",\n        question: [],\n        required: true,\n        options: [],\n        order:\"\"+this.orderQuestion\n      }\n    },\n    deleteQuestions(index) {\n      this.DeleteSurveyQuestion({...this.newQuestionsData[index],\n       name: this.surveyId,\n       studyId: this.studyId\n      }).then(() => {\n        delete this.questionData[index]\n        delete this.newQuestionsData[index]\n        console.log(\"deleted\")\n      })\n    },\n    saveSurvey(data){\n      this.errMsg = false \n      this.DeleteSurvey({ surveyId: this.surveyId, studyId: this.studyId })\n      .then(() => {\n        let id = uuidv4()\n        data['identifier'] = id\n        this.AddSurvey({\n          id: id,\n          studyId: this.studyId,\n          questions: this.newQuestionsData,\n          data: data,\n        }).then(()=>{\n          this.errMsg = true\n          this.msg=\"Surveys Builder has been created successfully\"\n          this.cl= \"alert-success\"\n          Swal.fire({\n            title: 'success',\n            text:   \"Surveys Builder has been created successfully\",\n            icon: 'success'\n          }).then(()=>{\n            this.$router.push(`/surveysList/${this.studyId}`)\n          })\n        }) \n      })\n    },\n    validSurvey(questions, data){\n      // review if question has data\n      let isValid = true\n      for(const[key,value] of Object.entries(questions)){\n        console.log(\"tryReview\")\n        if(!this.$refs[value.id].reviewQuestionData()){\n          isValid = false\n        }\n      }\n      if(isValid){\n        this.saveSurvey(data)\n      }\n      else{\n        this.errMsg = true\n        this.cl = \"alert-err\"\n        this.msg=\"Some data is incorrect\"\n      }\n    },\n    updateSurvey(){\n      this.errMsg = false\n      this.msg=\"\"\n      if (\n        this.surveys.title && \n        this.surveys.subtitle && \n        this.surveys.order && \n        this.surveys.section\n      ){\n        let surveyData={\n          'image':\"SurveyIcon\",\n          'order':this.surveys.order,\n          'section':this.surveys.section,\n          'subtitle':this.surveys.subtitle,\n          'title':this.surveys.title,\n          'main': this.surveys.main\n        }\n        if (Object.keys(this.newQuestionsData).length){\n            let questionIdentifiers = Object.keys(this.newQuestionsData).map((key)=>{\n            return this.newQuestionsData[key].identifier\n          }) \n            let uniqueIdentifiers =new Set(questionIdentifiers)\n          if(questionIdentifiers.length==uniqueIdentifiers.size){\n            this.validSurvey(this.newQuestionsData, surveyData)\n          }\n          else{\n            this.errMsg = true\n            this.cl = \"alert-err\"\n            this.msg = \"The question identifiers must be unique\"\n          }\n        }else{\n          this.errMsg = true\n          this.cl = \"alert-err\"\n          this.msg = \"The questions cannot be empty\"\n        }\n      } else {\n        this.errMsg = true\n        this.cl = \"alert-err\"\n        this.msg = \"The fields can't be blank\"\n      }\n    }, \n    setSurveyData(){      \n      this.surveyData = this.getSurveysData(this.studyId)[this.surveyId]\n      if (this.surveyData) {\n        let data= this.surveyData.data\n        this.surveys={\n          'image':data.image,\n          'order':data.order,\n          'section':data.section,\n          'subtitle':data.subtitle,\n          'title':data.title,\n          'main': data.main\n        }\n        let questions = this.surveyData.questions\n        if(questions){\n          for (const [key, value] of Object.entries(questions)){\n            this.questionData[value.id]={...value, readonly: true, disabled: true}\n          }\n        }\n        this.newQuestionsData = {...this.questionData}\n      }\n    }\n  },\n  computed: {\n      ...mapGetters(\"surveys\",[\"getSurveysData\"])\n  },\n  created(){\n    this.setSurveyData()\n  },\n  beforeRouteEnter(to, from, next) {\n    Promise.all([\n      store.dispatch(\"surveys/FetchSurveyData\", {\n        studyId: to.params.studyId,\n        surveyId: to.params.surveyId\n      }),\n    ])\n    .then(() => {\n      next();\n    });\n  }\n};\n</script>\n\n<style lang=\"scss\">\n.wrapper {\n  margin-top: 5%;\n  margin-bottom: 5%;\n}\n.input-form{\n  margin: auto;\n  width: 60%;\n}\n.surveys > div {\n  margin: 10px 0;\n  padding-bottom: 10px;\n}\n.btn {\n  color: black;\n  background: transparent;\n  display: inline-block;\n  font-weight: 400;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  border: 1px solid transparent;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border-radius: 0.25rem;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,\n  border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n.btn-secondary {\n  text-decoration: none;\n  color: black;\n  border-color: #000000;\n  background: #b71540;\n}\n.btn-terceary {\n  text-decoration: underline;\n  color: black;\n  border-color: #000000;\n  background: transparent;\n}\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}