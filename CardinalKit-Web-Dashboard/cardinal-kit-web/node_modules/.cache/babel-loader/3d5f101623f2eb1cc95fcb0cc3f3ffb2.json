{"ast":null,"code":"import VueApexCharts from \"vue3-apexcharts\";\nexport default {\n  components: {\n    apexchart: VueApexCharts\n  },\n\n  data() {\n    return {\n      monthNames: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    };\n  },\n\n  props: {\n    series: {\n      type: Array,\n      required: true\n    },\n    yAxisFormat: {\n      type: Function,\n      required: false\n    },\n    yMax: {\n      type: Number,\n      required: false\n    },\n    yMin: {\n      type: Number,\n      required: false\n    },\n    customTooltip: {\n      type: Function,\n      required: false\n    },\n    titleFormatter: {\n      type: Function,\n      required: false\n    },\n    horizontal: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    toolTipYFormat: {\n      type: Function,\n      required: false\n    }\n  },\n  methods: {\n    zoomX(fromDate, toDate) {\n      if (this.$refs.chart.chart) {\n        this.$refs.chart.zoomX(fromDate.getTime(), toDate.getTime());\n      }\n    }\n\n  },\n  computed: {\n    format(val) {\n      if (Date.parse(value)) {\n        let date = new Date(value);\n        return date.getDate() + \" - \" + this.monthNames[date.getMonth()];\n      } else {\n        return new Date(value * 1000).toISOString().substr(11, 8);\n      }\n    },\n\n    chartOptions() {\n      return {\n        chart: {\n          height: 350,\n          type: \"rangeBar\",\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: this.horizontal\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        xaxis: {\n          type: \"datetime\",\n          labels: {\n            datetimeFormatter: {\n              year: 'yyyy',\n              month: 'MMM \\'yy',\n              day: 'MMM dd',\n              hour: 'HH:mm'\n            }\n          }\n        },\n        tooltip: {\n          custom: this.customTooltip,\n          y: {\n            formatter: (value, {\n              series,\n              seriesIndex,\n              dataPointIndex,\n              w\n            }) => {\n              let y = w.globals.initialSeries[seriesIndex].data[dataPointIndex].y;\n\n              if (this.yAxisFormat) {\n                y = [this.yAxisFormat(y[0]), this.yAxisFormat(y[1])];\n              }\n\n              if (this.toolTipYFormat) {\n                y = [this.toolTipYFormat(y[0]), this.toolTipYFormat(y[1])];\n              }\n\n              return y[0] + \" - \" + y[1];\n            },\n            title: {\n              formatter: this.titleFormatter\n            }\n          }\n        },\n        yaxis: {\n          max: this.yMax,\n          min: this.yMin,\n          labels: {\n            formatter: this.yAxisFormat\n          }\n        }\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/components/apexCharts/RangeChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <apexchart\n      ref=\"chart\"\n      height=\"300\"\n      type=\"rangeBar\"\n      :options=\"chartOptions\"\n      :series=\"series\"\n    ></apexchart>\n  </div>\n</template>\n\n<script>\nimport VueApexCharts from \"vue3-apexcharts\";\nexport default {\n  components: {\n    apexchart: VueApexCharts,\n  },\n  data() {\n    return {\n      monthNames: [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n      ],\n    };\n  },\n  props: {\n    series: {\n      type: Array,\n      required: true,\n    },\n    yAxisFormat:{\n      type: Function,\n      required: false\n    },\n    yMax:{\n      type: Number,\n      required: false\n    },\n     yMin:{\n      type: Number,\n      required: false\n    },\n    customTooltip:{\n      type: Function,\n      required: false\n    },\n    titleFormatter:{\n      type: Function,\n      required: false\n    },\n    horizontal:{\n      type: Boolean,\n      required: false,\n      default:false\n    },\n    toolTipYFormat:{\n      type: Function,\n      required: false\n    }\n  },\n  methods: {\n    zoomX(fromDate, toDate) {\n      if (this.$refs.chart.chart) {\n        this.$refs.chart.zoomX(fromDate.getTime(), toDate.getTime());\n      }\n    },\n  },\n  computed: {\n    format(val) {\n      if (Date.parse(value)) {\n        let date = new Date(value);\n        return date.getDate() + \" - \" + this.monthNames[date.getMonth()];\n      } else {\n        return new Date(value * 1000).toISOString().substr(11, 8);\n      }\n    },\n    chartOptions() {\n      return {\n        chart: {\n          height: 350,\n          type: \"rangeBar\",\n          toolbar:{\n            show:false\n          },\n           zoom:{\n             enabled:false\n           }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: this.horizontal,\n          },\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        xaxis: {\n          type: \"datetime\",\n          labels: {\n            datetimeFormatter: {\n              year: 'yyyy',\n              month: 'MMM \\'yy',\n              day: 'MMM dd',\n              hour: 'HH:mm'\n            }\n          }\n        },\n        tooltip: {\n          custom: this.customTooltip,\n          y:{\n            formatter:(value,{series,seriesIndex,dataPointIndex,w})=>{\n              let y = w.globals.initialSeries[seriesIndex].data[dataPointIndex].y\n              if(this.yAxisFormat){\n                y= [this.yAxisFormat(y[0]),this.yAxisFormat(y[1])]\n                \n              }\n              if(this.toolTipYFormat){\n                y= [this.toolTipYFormat(y[0]),this.toolTipYFormat(y[1])]\n                \n              }\n\n              return y[0]+\" - \"+y[1]\n            },\n            title: {\n              formatter: this.titleFormatter\n          },\n          }        \n        },\n        yaxis: {\n          max: this.yMax,\n          min: this.yMin,\n          labels: {\n            formatter:this.yAxisFormat\n          },\n        },\n      };\n    },\n  },\n};\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}