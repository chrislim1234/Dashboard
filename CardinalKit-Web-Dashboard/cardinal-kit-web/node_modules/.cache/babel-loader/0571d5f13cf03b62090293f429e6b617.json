{"ast":null,"code":"import altTable from \"@/components/tables/altTable\";\nexport default {\n  name: \"survey\",\n\n  data() {\n    return {\n      columns: [{\n        header: \"N°\"\n      }, {\n        header: \"UserId\"\n      }, {\n        header: \"Answer\"\n      }, {\n        header: \"Date\"\n      }],\n      currentPage: 1,\n      limit: 10\n    };\n  },\n\n  props: {\n    data: {\n      type: Object,\n      required: true\n    }\n  },\n  components: {\n    altTable\n  },\n  computed: {\n    answers() {\n      if (this.data.answers && this.data.answers.length > 10) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    paginationOptions() {\n      if (Object.keys(this.data).length) {\n        if (Object.keys(this.data).includes(\"answers\")) {\n          return {\n            limit: [10, 20],\n            total: this.data.answers.length,\n            currentPage: this.currentPage\n          };\n        }\n      }\n\n      return {\n        limit: [10, 20],\n        total: 0,\n        currentPage: this.currentPage\n      };\n    },\n\n    getPageItems() {\n      if (this.data.answers) {\n        let items = this.data.answers;\n        let lowerLimit = (this.currentPage - 1) * this.limit;\n        let upperLimit = this.currentPage * this.limit;\n        return items.slice(lowerLimit, upperLimit);\n      }\n\n      return {};\n    }\n\n  },\n  methods: {\n    handlePagination(pagination) {\n      this.currentPage = pagination.currentPage;\n      this.limit = pagination.limit;\n      let total = this.data.answers.length;\n\n      if (this.currentPage > Math.ceil(total / this.limit)) {\n        this.currentPage = Math.ceil(total / this.limit);\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/components/surveys/survey.vue"],"names":[],"mappings":"AAsEA,OAAO,QAAP,MAAqB,8BAArB;AACA,eAAe;EACb,IAAI,EAAE,QADO;;EAEb,IAAI,GAAG;IACL,OAAO;MACL,OAAO,EAAE,CACP;QAAE,MAAM,EAAE;MAAV,CADO,EAEP;QAAE,MAAM,EAAE;MAAV,CAFO,EAGP;QAAE,MAAM,EAAE;MAAV,CAHO,EAIP;QAAE,MAAM,EAAE;MAAV,CAJO,CADJ;MAOL,WAAW,EAAE,CAPR;MAQL,KAAK,EAAE;IARF,CAAP;EAUD,CAbY;;EAcb,KAAK,EAAE;IACL,IAAI,EAAE;MACJ,IAAI,EAAE,MADF;MAEJ,QAAQ,EAAE;IAFN;EADD,CAdM;EAoBb,UAAU,EAAE;IACV;EADU,CApBC;EAuBb,QAAQ,EAAC;IACP,OAAO,GAAE;MACP,IAAI,KAAK,IAAL,CAAU,OAAV,IAAqB,KAAK,IAAL,CAAU,OAAV,CAAkB,MAAlB,GAA2B,EAApD,EAAuD;QACrD,OAAO,IAAP;MACD,CAFD,MAEK;QACH,OAAO,KAAP;MACF;IACD,CAPM;;IAQP,iBAAiB,GAAG;MAClB,IAAI,MAAM,CAAC,IAAP,CAAY,KAAK,IAAjB,EAAuB,MAA3B,EAAkC;QAChC,IAAI,MAAM,CAAC,IAAP,CAAY,KAAK,IAAjB,EAAuB,QAAvB,CAAgC,SAAhC,CAAJ,EAA+C;UAC7C,OAAO;YACL,KAAK,EAAE,CAAC,EAAD,EAAK,EAAL,CADF;YAEL,KAAK,EAAE,KAAK,IAAL,CAAU,OAAV,CAAkB,MAFpB;YAGL,WAAW,EAAE,KAAK;UAHb,CAAP;QAKF;MACF;;MACA,OAAO;QACL,KAAK,EAAE,CAAC,EAAD,EAAK,EAAL,CADF;QAEL,KAAK,EAAE,CAFF;QAGL,WAAW,EAAE,KAAK;MAHb,CAAP;IAKD,CAvBM;;IAwBN,YAAY,GAAG;MACd,IAAI,KAAK,IAAL,CAAU,OAAd,EAAsB;QACpB,IAAI,KAAI,GAAI,KAAK,IAAL,CAAU,OAAtB;QACA,IAAI,UAAS,GAAI,CAAC,KAAK,WAAL,GAAmB,CAApB,IAAyB,KAAK,KAA/C;QACA,IAAI,UAAS,GAAI,KAAK,WAAL,GAAmB,KAAK,KAAzC;QACA,OAAO,KAAK,CAAC,KAAN,CAAY,UAAZ,EAAwB,UAAxB,CAAP;MACF;;MACA,OAAO,EAAP;IACD;;EAhCM,CAvBI;EAyDb,OAAO,EAAC;IACN,gBAAgB,CAAC,UAAD,EAAa;MAC3B,KAAK,WAAL,GAAiB,UAAU,CAAC,WAA5B;MACA,KAAK,KAAL,GAAW,UAAU,CAAC,KAAtB;MACA,IAAI,KAAI,GAAI,KAAK,IAAL,CAAU,OAAV,CAAkB,MAA9B;;MACA,IAAG,KAAK,WAAL,GAAmB,IAAI,CAAC,IAAL,CAAU,KAAK,GAAC,KAAK,KAArB,CAAtB,EAAkD;QAChD,KAAK,WAAL,GAAmB,IAAI,CAAC,IAAL,CAAU,KAAK,GAAC,KAAK,KAArB,CAAnB;MACF;IACD;;EARK;AAzDK,CAAf","sourcesContent":["<template>\n  <div  class=\"mx-3\">\n    <h6>{{ data.question }}</h6>\n    <br />\n    <!-- @TODO remove all conditionals and create a method that accepts all kinds of surveys.options and stylizes it in cardinal format-->\n    <div v-if=\"typeof data.Options != 'string'\">\n      <div class=\"surveyOptionsTxt\" v-if=\"data.questionType === 1\">\n        <span ><b>Min:</b> {{ data.Options[\"Min\"] + \"\" }}{{ data.Options[\"MinDescription\"] }}</span>\n        <br />\n        <span><b>Max:</b> {{data.Options[\"Max\"]  + \"\" }}{{ data.Options[\"MaxDescription\"] }}</span>\n        <br />\n        <span><b>Step:</b>   {{ data.Options[\"Step\"] }}</span>\n        <br />\n      </div>\n      <div class=\"surveyOptionsTxt\" v-else-if=\"data.questionType === 2\">\n        <br />\n        <span><b>0: </b>{{ data.Options[0][\"text\"] + \"\" }}</span>\n        <br />\n        <span><b>1: </b>{{ data.Options[1][\"text\"] + \"\" }}</span>\n        <br />\n        <span><b>2: </b>{{ data.Options[2][\"text\"] + \"\" }}</span>\n        <br />\n      </div>\n      <div class=\"surveyOptionsTxt\" v-else-if=\"data.questionType === 7\">\n        <br />\n        <span><b>False: </b> {{ data.Options[\"NoText\"] + \"\" }}</span>\n        <br />\n        <span><b>True: </b> {{ data.Options[\"YesText\"] + \"\" }}</span>\n        <br />\n      </div>\n      <div\n        class=\"surveyOptionsTxt\"\n        v-else\n        v-for=\"(option, optionKey) in data.Options\"\n        :key=\"optionKey\"\n      >\n        {{ optionKey }}: {{ option }}\n      </div>\n    </div>\n    <!-- @TODO remove all conditionals and  create a method that accepts all kinds of surveys.options and stylizes it in cardinal format-->\n\n    <br />\n\n    <br />\n    \n    <alt-table \n      :columns=\"columns\"\n      :pagination=\"answers\"\n      :paginationOptions=\"paginationOptions\"\n      @onPagination=\"handlePagination\"\n    >\n      <template #t-row>\n        <tr v-for=\"(answer, index) in getPageItems\" :key=\"answer\">\n          <td>{{ index + 1 }}</td>\n          <td class=\"userIdTxt\">\n            {{ answer.userId }}\n          </td>\n          <td class=\"answerTxt\">\n            {{ answer.answer }}\n          </td>\n          <td class=\"dateTxt\">\n            {{ answer.date }}\n          </td>\n        </tr>\n      </template>\n    </alt-table>\n    <br />\n  </div>\n</template>\n<script>\nimport altTable from \"@/components/tables/altTable\";\nexport default {\n  name: \"survey\",\n  data() {\n    return {\n      columns: [\n        { header: \"N°\" },\n        { header: \"UserId\" },\n        { header: \"Answer\" },\n        { header: \"Date\" },\n      ],\n      currentPage: 1,\n      limit: 10,\n    };\n  },\n  props: {\n    data: {\n      type: Object,\n      required: true,\n    },\n  },\n  components: {\n    altTable,\n  },\n  computed:{\n    answers(){\n      if (this.data.answers && this.data.answers.length > 10){\n        return true \n      }else{\n        return false\n      }\n    },\n    paginationOptions() {\n      if (Object.keys(this.data).length){\n        if (Object.keys(this.data).includes(\"answers\")){\n          return {\n            limit: [10, 20],\n            total: this.data.answers.length,\n            currentPage: this.currentPage,\n          };\n        }\n      }\n      return {\n        limit: [10, 20],\n        total: 0,\n        currentPage: this.currentPage,\n      };\n    },\n     getPageItems() {\n      if (this.data.answers){\n        let items = this.data.answers;\n        let lowerLimit = (this.currentPage - 1) * this.limit;\n        let upperLimit = this.currentPage * this.limit;\n        return items.slice(lowerLimit, upperLimit);\n      }\n      return {}\n    },\n  },\n  methods:{\n    handlePagination(pagination) {\n      this.currentPage=pagination.currentPage\n      this.limit=pagination.limit\n      let total = this.data.answers.length\n      if(this.currentPage > Math.ceil(total/this.limit)){\n        this.currentPage = Math.ceil(total/this.limit)\n      }\n    },\n  }\n};\n</script>\n<style lang=\"scss\">\n.downloadBtn {\n  text-decoration: none;\n  font-weight: 300;\n  font-size: 20px;\n  color: #000000;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  padding-left: 20px;\n  padding-right: 20px;\n  background-color: transparent;\n  border-width: 2px;\n  border-style: solid;\n  border-color: #000000;\n  margin: auto;\n  top: -20px;\n  box-shadow: 5px 5px 5px;\n}\n.footerBtn {\n  padding: 0px 25px 25px 25px;\n  width: 100%;\n  display: flex;\n}\n.surveyQuestionTxt {\n  font-size: 25px;\n  font-weight: 300;\n}\n.surveyOptionsTxt {\n  font-size: 15px;\n}\n.userIdTxt {\n  font-family: sans-serif;\n}\n.answerTxt {\n  font-family: sans-serif;\n}\n.dateTxt {\n  font-family: sans-serif;\n}\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}