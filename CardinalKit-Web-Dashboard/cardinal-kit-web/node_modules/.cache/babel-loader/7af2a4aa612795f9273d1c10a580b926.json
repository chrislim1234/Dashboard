{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Multiselect = _resolveComponent(\"Multiselect\");\n\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_Multiselect, {\n    searchable: true,\n    disabled: $props.disabledSelect,\n    trackBy: \"id\",\n    label: \"name\",\n    modelValue: $data.internalValue,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.internalValue = $event),\n    options: $props.options,\n    placeholder: $options._placeholder,\n    canClear: false,\n    canDeselect: false\n  }, null, 8\n  /* PROPS */\n  , [\"disabled\", \"modelValue\", \"options\", \"placeholder\"])]);\n}","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/components/multiSelect/Select.vue"],"names":[],"mappings":";;;;uBACE,mBAAA,CAYM,KAZN,EAYM,IAZN,EAYM,CAXJ,YAAA,CAUE,sBAVF,EAUE;IATC,UAAU,EAAE,IASb;IARC,QAAQ,EAAE,MAAA,CAAA,cAQX;IAPA,OAAO,EAAC,IAOR;IANA,KAAK,EAAC,MAMN;gBALS,KAAA,CAAA,aAKT;+DALS,KAAA,CAAA,a,GAAa,M,CAKtB;IAJC,OAAO,EAAE,MAAA,CAAA,OAIV;IAHC,WAAW,EAAE,QAAA,CAAA,YAGd;IAFC,QAAQ,EAAE,KAEX;IADC,WAAW,EAAE;EACd,CAVF,E,IAAA,E;;EAAA,E,oDAAA,CAWI,CAZN,C","sourcesContent":["<template>\n  <div>\n    <Multiselect  \n      :searchable=\"true\"\n      :disabled=\"disabledSelect\"\n      trackBy=\"id\"\n      label=\"name\"\n      v-model=\"internalValue\" \n      :options=\"options\" \n      :placeholder=\"_placeholder\" \n      :canClear=\"false\"\n      :canDeselect=\"false\"\n    />\n  </div>\n</template>\n<script>\nimport Multiselect from \"@vueform/multiselect\";\nexport default {\n  components: { Multiselect },\n  data() {\n    return {\n      internalValue: null,      \n    };\n  },\n  methods:{\n    setNewValue(newValue){\n      this.internalValue = newValue\n    }\n  },\n  watch: {\n    internalValue: function(value){\n      this.$emit('update:modelValue', value)\n      if(this.onChange) this.onChange()\n    }\n  },\n  computed: {\n    _placeholder() {\n      return this.placeholder??\"Select One\"\n    }\n  },\n  props: {\n    options: {\n      type:Array,\n      require:true\n    },\n    placeholder: {\n      type:String,\n      require:false\n    },\n    onChange: {\n      type:Function,\n      require:false\n    },\n    defaultValue:{\n      type: String,\n      require: false\n    },\n    disabledSelect: {\n      type: Boolean,\n      require: false,\n      default: () => false\n    }\n  },\n  created(){\n    if (this.defaultValue){\n      this.internalValue = this.defaultValue\n    }\n  }\n};\n</script>\n\n<style>\n  .is-disabled .multiselect-input {\n    background: transparent !important;\n  }\n</style>\n<style src=\"@vueform/multiselect/themes/default.css\"></style>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}