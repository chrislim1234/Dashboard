{"ast":null,"code":"/** To Transform units across the app in any other unit */\nimport store from \"@/store\";\n/** transform time on seconds */\n\nexport const transformTimeToSeconds = (Value, Unit) => {\n  switch (Unit) {\n    case \"Days\":\n      return Value * 3600 * 24;\n      break;\n\n    case \"Hours\":\n      return Value * 3600;\n\n    case \"Mins\":\n      return Value * 60;\n\n    default:\n      return Value;\n  }\n};\n/** Transform Distance in any unit to the unit used Globally */\n\nexport const transformDistanceToGlobalUnit = (Value, Unit) => {\n  // First Transform all to Cm\n  let valueInCm = 0;\n\n  switch (Unit) {\n    case \"mm\":\n      valueInCm = Value / 10;\n      break;\n\n    case \"cm\":\n      valueInCm = Value;\n      break;\n\n    case \"m\":\n      valueInCm = Value * 100;\n      break;\n\n    case \"km\":\n      valueInCm = Value * 100000;\n      break;\n\n    case \"mi\":\n      valueInCm = Value * 16036;\n      break;\n\n    case \"ft\":\n      valueInCm = Value * 30, 48;\n      break;\n\n    default:\n      //assume that by default it comes in meters \n      valueInCm = Value * 100;\n      break;\n  } //then transform cm in spected Value\n\n\n  let globalDistanceUnit = store.getters['units/getDistanceUnit'];\n  let ValueInGlobalMetric = 0;\n\n  switch (globalDistanceUnit) {\n    case \"mm\":\n      ValueInGlobalMetric = valueInCm * 10;\n      break;\n\n    case \"cm\":\n      ValueInGlobalMetric = valueInCm;\n      break;\n\n    case \"m\":\n      ValueInGlobalMetric = valueInCm / 100;\n      break;\n\n    case \"km\":\n      ValueInGlobalMetric = valueInCm / 100000;\n      break;\n\n    case \"mi\":\n      ValueInGlobalMetric = valueInCm / 16036;\n      break;\n\n    case \"ft\":\n      ValueInGlobalMetric = valueInCm / 30, 48;\n      break;\n\n    default:\n      //assume that by default is meters\n      ValueInGlobalMetric = valueInCm / 100;\n      break;\n  }\n\n  return ValueInGlobalMetric;\n};\n/** Transform seconds into a larger unit */\n\nexport const transformSecondsToBetterFormat = Value => {\n  let unit = \"Secs\";\n  let newValue = Value;\n\n  if (newValue > 60) {\n    newValue = newValue / 60;\n    unit = \"Mins\";\n\n    if (newValue > 60) {\n      newValue = newValue / 60;\n      unit = \"Hours\";\n\n      if (newValue > 24) {\n        newValue = newValue / 24;\n        unit = \"Days\";\n      }\n    }\n  }\n\n  if (newValue % 1 != 0) {\n    newValue = newValue.toFixed(2);\n  }\n\n  return {\n    Value: newValue,\n    Unit: unit\n  };\n};","map":{"version":3,"names":["store","transformTimeToSeconds","Value","Unit","transformDistanceToGlobalUnit","valueInCm","globalDistanceUnit","getters","ValueInGlobalMetric","transformSecondsToBetterFormat","unit","newValue","toFixed"],"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/common/helpers/units/index.js"],"sourcesContent":["/** To Transform units across the app in any other unit */\nimport store from \"@/store\";\n\n/** transform time on seconds */\nexport const transformTimeToSeconds=(Value,Unit)=>{\n    switch(Unit){\n        case \"Days\":\n            return Value*3600*24;\n            break;\n        case \"Hours\":\n            return Value*3600\n        case \"Mins\":\n            return Value*60\n        default:\n            return Value\n    }\n}\n\n/** Transform Distance in any unit to the unit used Globally */\nexport const transformDistanceToGlobalUnit=(Value,Unit)=>{\n    // First Transform all to Cm\n    let valueInCm = 0;\n    switch(Unit){      \n        case \"mm\":\n            valueInCm = Value/10;\n            break;\n        case \"cm\":\n            valueInCm = Value;\n            break;\n        case \"m\":\n            valueInCm = Value*100;\n            break;\n        case \"km\":\n            valueInCm = Value*100000;      \n            break;\n        case \"mi\":\n            valueInCm = Value*16036\n            break;\n        case \"ft\":\n            valueInCm = Value*30,48;\n            break;\n        default:\n            //assume that by default it comes in meters \n            valueInCm = Value*100;\n        break;\n    }\n    //then transform cm in spected Value\n    let globalDistanceUnit= store.getters['units/getDistanceUnit']\n    let ValueInGlobalMetric = 0;\n    switch(globalDistanceUnit){\n        case \"mm\":\n            ValueInGlobalMetric =valueInCm*10;\n            break;\n        case \"cm\":\n            ValueInGlobalMetric = valueInCm;\n            break;\n        case \"m\":\n            ValueInGlobalMetric = valueInCm/100;\n            break;\n        case \"km\":\n            ValueInGlobalMetric = valueInCm/100000;      \n            break;\n        case \"mi\":\n            ValueInGlobalMetric = valueInCm/16036\n            break;\n        case \"ft\":\n            ValueInGlobalMetric = valueInCm/30,48;\n            break;\n        default:\n            //assume that by default is meters\n            ValueInGlobalMetric = valueInCm/100;\n        break;\n    }\n\n    return ValueInGlobalMetric\n}\n\n/** Transform seconds into a larger unit */\nexport const transformSecondsToBetterFormat=(Value)=>{\n    let unit = \"Secs\"\n    let newValue = Value\n    if(newValue>60){\n        newValue=newValue/60\n        unit=\"Mins\"\n        if(newValue>60){\n            newValue=newValue/60\n            unit=\"Hours\"\n            if(newValue>24){\n                newValue=newValue/24\n                unit=\"Days\"\n            }\n        }\n    }\n    if(newValue%1!=0){\n        newValue = newValue.toFixed(2)\n    }\n    return{Value:newValue,Unit:unit}\n}"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,SAAlB;AAEA;;AACA,OAAO,MAAMC,sBAAsB,GAAC,CAACC,KAAD,EAAOC,IAAP,KAAc;EAC9C,QAAOA,IAAP;IACI,KAAK,MAAL;MACI,OAAOD,KAAK,GAAC,IAAN,GAAW,EAAlB;MACA;;IACJ,KAAK,OAAL;MACI,OAAOA,KAAK,GAAC,IAAb;;IACJ,KAAK,MAAL;MACI,OAAOA,KAAK,GAAC,EAAb;;IACJ;MACI,OAAOA,KAAP;EATR;AAWH,CAZM;AAcP;;AACA,OAAO,MAAME,6BAA6B,GAAC,CAACF,KAAD,EAAOC,IAAP,KAAc;EACrD;EACA,IAAIE,SAAS,GAAG,CAAhB;;EACA,QAAOF,IAAP;IACI,KAAK,IAAL;MACIE,SAAS,GAAGH,KAAK,GAAC,EAAlB;MACA;;IACJ,KAAK,IAAL;MACIG,SAAS,GAAGH,KAAZ;MACA;;IACJ,KAAK,GAAL;MACIG,SAAS,GAAGH,KAAK,GAAC,GAAlB;MACA;;IACJ,KAAK,IAAL;MACIG,SAAS,GAAGH,KAAK,GAAC,MAAlB;MACA;;IACJ,KAAK,IAAL;MACIG,SAAS,GAAGH,KAAK,GAAC,KAAlB;MACA;;IACJ,KAAK,IAAL;MACIG,SAAS,GAAGH,KAAK,GAAC,EAAlB,EAAqB,EAArB;MACA;;IACJ;MACI;MACAG,SAAS,GAAGH,KAAK,GAAC,GAAlB;MACJ;EAtBJ,CAHqD,CA2BrD;;;EACA,IAAII,kBAAkB,GAAEN,KAAK,CAACO,OAAN,CAAc,uBAAd,CAAxB;EACA,IAAIC,mBAAmB,GAAG,CAA1B;;EACA,QAAOF,kBAAP;IACI,KAAK,IAAL;MACIE,mBAAmB,GAAEH,SAAS,GAAC,EAA/B;MACA;;IACJ,KAAK,IAAL;MACIG,mBAAmB,GAAGH,SAAtB;MACA;;IACJ,KAAK,GAAL;MACIG,mBAAmB,GAAGH,SAAS,GAAC,GAAhC;MACA;;IACJ,KAAK,IAAL;MACIG,mBAAmB,GAAGH,SAAS,GAAC,MAAhC;MACA;;IACJ,KAAK,IAAL;MACIG,mBAAmB,GAAGH,SAAS,GAAC,KAAhC;MACA;;IACJ,KAAK,IAAL;MACIG,mBAAmB,GAAGH,SAAS,GAAC,EAAhC,EAAmC,EAAnC;MACA;;IACJ;MACI;MACAG,mBAAmB,GAAGH,SAAS,GAAC,GAAhC;MACJ;EAtBJ;;EAyBA,OAAOG,mBAAP;AACH,CAxDM;AA0DP;;AACA,OAAO,MAAMC,8BAA8B,GAAEP,KAAD,IAAS;EACjD,IAAIQ,IAAI,GAAG,MAAX;EACA,IAAIC,QAAQ,GAAGT,KAAf;;EACA,IAAGS,QAAQ,GAAC,EAAZ,EAAe;IACXA,QAAQ,GAACA,QAAQ,GAAC,EAAlB;IACAD,IAAI,GAAC,MAAL;;IACA,IAAGC,QAAQ,GAAC,EAAZ,EAAe;MACXA,QAAQ,GAACA,QAAQ,GAAC,EAAlB;MACAD,IAAI,GAAC,OAAL;;MACA,IAAGC,QAAQ,GAAC,EAAZ,EAAe;QACXA,QAAQ,GAACA,QAAQ,GAAC,EAAlB;QACAD,IAAI,GAAC,MAAL;MACH;IACJ;EACJ;;EACD,IAAGC,QAAQ,GAAC,CAAT,IAAY,CAAf,EAAiB;IACbA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,CAAjB,CAAX;EACH;;EACD,OAAM;IAACV,KAAK,EAACS,QAAP;IAAgBR,IAAI,EAACO;EAArB,CAAN;AACH,CAnBM"},"metadata":{},"sourceType":"module"}