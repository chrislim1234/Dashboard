{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport store from \"@/store\";\nimport { mapGetters } from \"vuex\";\nimport survey from \"@/components/surveys/survey\"; //Components\n\nimport altTable from \"@/components/tables/altTable\";\nimport altSelect from \"@/components/multiSelect/Select\";\nexport default {\n  data() {\n    return {\n      columns: [{\n        header: \"N°\"\n      }, {\n        header: \"UserId\"\n      }, {\n        header: \"Answer\"\n      }, {\n        header: \"Date\"\n      }],\n      questionSelected: \"\",\n      questionData: {},\n      errMsg: false,\n      noData: false\n    };\n  },\n\n  computed: { ...mapGetters(\"surveys\", [\"getSurveyAnswers\"]),\n\n    questions() {\n      let qs = [];\n      let questions = this.getSurveyAnswers(this.studyId)[this.surveyId];\n      questions.forEach(question => {\n        qs.push({\n          id: question.identifier,\n          name: question.question,\n          value: question.identifier\n        });\n      });\n      return qs;\n    }\n\n  },\n  components: {\n    altTable,\n    altSelect,\n    survey\n  },\n  props: {\n    studyId: {\n      type: String,\n      required: true\n    },\n    surveyId: {\n      type: String,\n      required: true\n    }\n  },\n  methods: {\n    convert() {\n      this.errMsg = false;\n      let surveyData = JSON.parse(JSON.stringify(this.getSurveyAnswers(this.studyId)[this.surveyId]));\n      let surveyTransformed = this.oneLineForEachAnswer(this.optionsInOneLine(surveyData));\n      let stringData = JSON.stringify(surveyTransformed);\n      const jsonData = JSON.parse(stringData);\n\n      if (jsonData.length) {\n        let csvData = this.objectToCsv(jsonData);\n        this.download(csvData);\n      } else {\n        this.errMsg = true;\n        this.msg = \"No data to download\";\n      }\n    },\n\n    optionsInOneLine(data) {\n      let result = [];\n      data.forEach(element => {\n        let nElement = element;\n\n        if (nElement.Options) {\n          let optionsInString = JSON.stringify(nElement.Options).replaceAll('\"', \"'\");\n\n          if (optionsInString) {\n            optionsInString = optionsInString;\n          }\n\n          nElement.Options = optionsInString;\n        }\n\n        result.push(nElement);\n      });\n      return result;\n    },\n\n    oneLineForEachAnswer(data) {\n      let result = [];\n      data.forEach(element => {\n        let answers = element.answers;\n        let nElement = element;\n        delete nElement[\"answers\"];\n        answers.forEach(answer => {\n          let nAnswer = answer;\n          Object.keys(nElement).map(key => {\n            nAnswer[key] = nElement[key];\n          });\n          result.push(nAnswer);\n        });\n      });\n      return result;\n    },\n\n    objectToCsv(data) {\n      const csvRows = [];\n      const headers = Object.keys(data[0]);\n      csvRows.push(headers.join(\",\"));\n\n      for (const row of data) {\n        const values = headers.map(header => {\n          const escaped = (\"\" + row[header]).replace(/\"/g, '\\\\\"');\n          return `\"${escaped}\"`;\n        });\n        csvRows.push(values.join(\",\"));\n      }\n\n      return csvRows.join(\"\\n\");\n    },\n\n    download(data) {\n      const blob = new Blob([data], {\n        type: \"text/csv\"\n      });\n      const url = window.URL.createObjectURL(blob);\n      const docu = document.createElement(\"a\");\n      docu.setAttribute(\"hidden\", \"\");\n      docu.setAttribute(\"href\", url);\n      docu.setAttribute(\"download\", \"csvname.csv\");\n      docu.click();\n    }\n\n  },\n\n  created() {\n    if (this.questions.length) {\n      this.questionSelected = this.questions ? this.questions[0].id : null;\n    } else {\n      this.noData = true;\n    }\n  },\n\n  beforeRouteEnter(to, from, next) {\n    Promise.all([store.dispatch(\"surveys/FetchSurveyData\", {\n      studyId: to.params.studyId,\n      surveyId: to.params.surveyId\n    }), store.dispatch(\"surveys/FetchSurveyDataAnswers\", {\n      studyId: to.params.studyId,\n      surveyId: to.params.surveyId\n    })]).then(() => {\n      next();\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/views/surveys/surveysDetail.vue"],"names":[],"mappings":";AA6BA,OAAO,KAAP,MAAkB,SAAlB;AACA,SAAS,UAAT,QAA2B,MAA3B;AACA,OAAO,MAAP,MAAmB,6BAAnB,C,CAEA;;AACA,OAAO,QAAP,MAAqB,8BAArB;AACA,OAAO,SAAP,MAAsB,iCAAtB;AAEA,eAAe;EACb,IAAI,GAAG;IACL,OAAO;MACL,OAAO,EAAE,CACP;QAAE,MAAM,EAAE;MAAV,CADO,EAEP;QAAE,MAAM,EAAE;MAAV,CAFO,EAGP;QAAE,MAAM,EAAE;MAAV,CAHO,EAIP;QAAE,MAAM,EAAE;MAAV,CAJO,CADJ;MAOL,gBAAgB,EAAE,EAPb;MAQL,YAAY,EAAE,EART;MASL,MAAM,EAAE,KATH;MAUL,MAAM,EAAE;IAVH,CAAP;EAYD,CAdY;;EAeb,QAAQ,EAAE,EACR,GAAG,UAAU,CAAC,SAAD,EAAY,CAAC,kBAAD,CAAZ,CADL;;IAGR,SAAS,GAAG;MACV,IAAI,EAAC,GAAI,EAAT;MACA,IAAI,SAAQ,GAAI,KAAK,gBAAL,CAAsB,KAAK,OAA3B,EAAoC,KAAK,QAAzC,CAAhB;MACA,SAAS,CAAC,OAAV,CAAkB,QAAO,IAAK;QAC5B,EAAE,CAAC,IAAH,CAAQ;UACN,EAAE,EAAE,QAAQ,CAAC,UADP;UAEN,IAAI,EAAE,QAAQ,CAAC,QAFT;UAGN,KAAK,EAAE,QAAQ,CAAC;QAHV,CAAR;MAKD,CAND;MAOA,OAAO,EAAP;IACD;;EAdO,CAfG;EAgCb,UAAU,EAAE;IACV,QADU;IAEV,SAFU;IAGV;EAHU,CAhCC;EAqCb,KAAK,EAAE;IACL,OAAO,EAAE;MACP,IAAI,EAAE,MADC;MAEP,QAAQ,EAAE;IAFH,CADJ;IAKL,QAAQ,EAAE;MACR,IAAI,EAAE,MADE;MAER,QAAQ,EAAE;IAFF;EALL,CArCM;EA+Cb,OAAO,EAAE;IACP,OAAO,GAAG;MACR,KAAK,MAAL,GAAc,KAAd;MACA,IAAI,UAAS,GAAI,IAAI,CAAC,KAAL,CACf,IAAI,CAAC,SAAL,CAAe,KAAK,gBAAL,CAAsB,KAAK,OAA3B,EAAoC,KAAK,QAAzC,CAAf,CADe,CAAjB;MAGA,IAAI,iBAAgB,GAAI,KAAK,oBAAL,CACtB,KAAK,gBAAL,CAAsB,UAAtB,CADsB,CAAxB;MAGA,IAAI,UAAS,GAAI,IAAI,CAAC,SAAL,CAAe,iBAAf,CAAjB;MACA,MAAM,QAAO,GAAI,IAAI,CAAC,KAAL,CAAW,UAAX,CAAjB;;MACA,IAAG,QAAQ,CAAC,MAAZ,EAAmB;QACjB,IAAI,OAAM,GAAI,KAAK,WAAL,CAAiB,QAAjB,CAAd;QACA,KAAK,QAAL,CAAc,OAAd;MACD,CAHD,MAGK;QACH,KAAK,MAAL,GAAc,IAAd;QACA,KAAK,GAAL,GAAW,qBAAX;MACF;IACD,CAlBM;;IAmBP,gBAAgB,CAAC,IAAD,EAAO;MACrB,IAAI,MAAK,GAAI,EAAb;MACA,IAAI,CAAC,OAAL,CAAc,OAAD,IAAa;QACxB,IAAI,QAAO,GAAI,OAAf;;QACA,IAAI,QAAQ,CAAC,OAAb,EAAsB;UACpB,IAAI,eAAc,GAAI,IAAI,CAAC,SAAL,CAAe,QAAQ,CAAC,OAAxB,EAAiC,UAAjC,CACpB,GADoB,EAEpB,GAFoB,CAAtB;;UAIA,IAAI,eAAJ,EAAqB;YACnB,eAAc,GAAI,eAAlB;UACF;;UACA,QAAQ,CAAC,OAAT,GAAmB,eAAnB;QACF;;QACA,MAAM,CAAC,IAAP,CAAY,QAAZ;MACD,CAbD;MAcA,OAAO,MAAP;IACD,CApCM;;IAqCP,oBAAoB,CAAC,IAAD,EAAO;MACzB,IAAI,MAAK,GAAI,EAAb;MACA,IAAI,CAAC,OAAL,CAAc,OAAD,IAAa;QACxB,IAAI,OAAM,GAAI,OAAO,CAAC,OAAtB;QACA,IAAI,QAAO,GAAI,OAAf;QACA,OAAO,QAAQ,CAAC,SAAD,CAAf;QACA,OAAO,CAAC,OAAR,CAAiB,MAAD,IAAY;UAC1B,IAAI,OAAM,GAAI,MAAd;UACA,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,GAAtB,CAA2B,GAAD,IAAS;YACjC,OAAO,CAAC,GAAD,CAAP,GAAe,QAAQ,CAAC,GAAD,CAAvB;UACD,CAFD;UAGA,MAAM,CAAC,IAAP,CAAY,OAAZ;QACD,CAND;MAOD,CAXD;MAYA,OAAO,MAAP;IACD,CApDM;;IAqDP,WAAW,CAAC,IAAD,EAAO;MAChB,MAAM,OAAM,GAAI,EAAhB;MACA,MAAM,OAAM,GAAI,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,CAAD,CAAhB,CAAhB;MACA,OAAO,CAAC,IAAR,CAAa,OAAO,CAAC,IAAR,CAAa,GAAb,CAAb;;MACA,KAAK,MAAM,GAAX,IAAkB,IAAlB,EAAwB;QACtB,MAAM,MAAK,GAAI,OAAO,CAAC,GAAR,CAAa,MAAD,IAAY;UACrC,MAAM,OAAM,GAAI,CAAC,KAAK,GAAG,CAAC,MAAD,CAAT,EAAmB,OAAnB,CAA2B,IAA3B,EAAiC,KAAjC,CAAhB;UACA,OAAQ,IAAG,OAAQ,GAAnB;QACD,CAHc,CAAf;QAIA,OAAO,CAAC,IAAR,CAAa,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAb;MACF;;MACA,OAAO,OAAO,CAAC,IAAR,CAAa,IAAb,CAAP;IACD,CAjEM;;IAkEP,QAAQ,CAAC,IAAD,EAAO;MACb,MAAM,IAAG,GAAI,IAAI,IAAJ,CAAS,CAAC,IAAD,CAAT,EAAiB;QAAE,IAAI,EAAE;MAAR,CAAjB,CAAb;MACA,MAAM,GAAE,GAAI,MAAM,CAAC,GAAP,CAAW,eAAX,CAA2B,IAA3B,CAAZ;MACA,MAAM,IAAG,GAAI,QAAQ,CAAC,aAAT,CAAuB,GAAvB,CAAb;MACA,IAAI,CAAC,YAAL,CAAkB,QAAlB,EAA4B,EAA5B;MACA,IAAI,CAAC,YAAL,CAAkB,MAAlB,EAA0B,GAA1B;MACA,IAAI,CAAC,YAAL,CAAkB,UAAlB,EAA8B,aAA9B;MACA,IAAI,CAAC,KAAL;IACD;;EA1EM,CA/CI;;EA2Hb,OAAO,GAAG;IACR,IAAI,KAAK,SAAL,CAAe,MAAnB,EAA0B;MACxB,KAAK,gBAAL,GAAwB,KAAK,SAAL,GAAiB,KAAK,SAAL,CAAe,CAAf,EAAkB,EAAnC,GAAwC,IAAhE;IACF,CAFA,MAGI;MACF,KAAK,MAAL,GAAc,IAAd;IACF;EACD,CAlIY;;EAmIb,gBAAgB,CAAC,EAAD,EAAK,IAAL,EAAW,IAAX,EAAiB;IAC/B,OAAO,CAAC,GAAR,CAAY,CACV,KAAK,CAAC,QAAN,CAAe,yBAAf,EAA0C;MACxC,OAAO,EAAE,EAAE,CAAC,MAAH,CAAU,OADqB;MAExC,QAAQ,EAAE,EAAE,CAAC,MAAH,CAAU;IAFoB,CAA1C,CADU,EAKV,KAAK,CAAC,QAAN,CAAe,gCAAf,EAAiD;MAC/C,OAAO,EAAE,EAAE,CAAC,MAAH,CAAU,OAD4B;MAE/C,QAAQ,EAAE,EAAE,CAAC,MAAH,CAAU;IAF2B,CAAjD,CALU,CAAZ,EASG,IATH,CASQ,MAAM;MACZ,IAAI;IACL,CAXD;EAYD;;AAhJY,CAAf","sourcesContent":["<template>\n  <div class=\"page\">\n    <div class=\"alert-err\" v-if=\"errMsg\">\n      {{msg}}\n    </div>\n    <div class=\"alert-err\" v-if=\"noData\">\n      This survey has no answers yet\n    </div>\n    <div v-else>\n      <br />\n      <h2> Select a Question</h2>\n      <br />\n      <alt-select :options=\"questions\" v-model=\"questionSelected\" :defaultValue=\"questionSelected\" />\n      <br />\n      \n      <div\n        class=\"surveyQuestionTxt\"\n        v-for=\"(value, key) in getSurveyAnswers(studyId)[surveyId]\"\n        :key=\"key\"\n        v-show=\"questionSelected == value.identifier\"\n      >\n        <survey :data=\"value\" />\n      </div>\n      <button @click=\"convert\">Download</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport store from \"@/store\";\nimport { mapGetters } from \"vuex\";\nimport survey from \"@/components/surveys/survey\";\n\n//Components\nimport altTable from \"@/components/tables/altTable\";\nimport altSelect from \"@/components/multiSelect/Select\";\n\nexport default {\n  data() {\n    return {\n      columns: [\n        { header: \"N°\" },\n        { header: \"UserId\" },\n        { header: \"Answer\" },\n        { header: \"Date\" },\n      ],\n      questionSelected: \"\",\n      questionData: {},\n      errMsg: false,\n      noData: false\n    };\n  },\n  computed: {\n    ...mapGetters(\"surveys\", [\"getSurveyAnswers\"]),\n   \n    questions() {\n      let qs = [];\n      let questions = this.getSurveyAnswers(this.studyId)[this.surveyId]\n      questions.forEach(question => {\n        qs.push({\n          id: question.identifier,\n          name: question.question,\n          value: question.identifier,\n        });\n      });\n      return qs;\n    },\n  },\n\n  components: {\n    altTable,\n    altSelect,\n    survey,\n  },\n  props: {\n    studyId: {\n      type: String,\n      required: true,\n    },\n    surveyId: {\n      type: String,\n      required: true,\n    },\n  },\n  methods: {    \n    convert() {\n      this.errMsg = false\n      let surveyData = JSON.parse(\n        JSON.stringify(this.getSurveyAnswers(this.studyId)[this.surveyId])\n      );\n      let surveyTransformed = this.oneLineForEachAnswer(\n        this.optionsInOneLine(surveyData)\n      );\n      let stringData = JSON.stringify(surveyTransformed);\n      const jsonData = JSON.parse(stringData);\n      if(jsonData.length){\n        let csvData = this.objectToCsv(jsonData);\n        this.download(csvData);\n      }else{\n        this.errMsg = true\n        this.msg = \"No data to download\"\n      }\n    },\n    optionsInOneLine(data) {\n      let result = [];\n      data.forEach((element) => {\n        let nElement = element;\n        if (nElement.Options) {\n          let optionsInString = JSON.stringify(nElement.Options).replaceAll(\n            '\"',\n            \"'\"\n          );\n          if (optionsInString) {\n            optionsInString = optionsInString;\n          }\n          nElement.Options = optionsInString;\n        }\n        result.push(nElement);\n      });\n      return result;\n    },\n    oneLineForEachAnswer(data) {\n      let result = [];\n      data.forEach((element) => {\n        let answers = element.answers;\n        let nElement = element;\n        delete nElement[\"answers\"];\n        answers.forEach((answer) => {\n          let nAnswer = answer;\n          Object.keys(nElement).map((key) => {\n            nAnswer[key] = nElement[key];\n          });\n          result.push(nAnswer);\n        });\n      });\n      return result;\n    },\n    objectToCsv(data) {\n      const csvRows = [];\n      const headers = Object.keys(data[0]);\n      csvRows.push(headers.join(\",\"));\n      for (const row of data) {\n        const values = headers.map((header) => {\n          const escaped = (\"\" + row[header]).replace(/\"/g, '\\\\\"');\n          return `\"${escaped}\"`;\n        });\n        csvRows.push(values.join(\",\"));\n      }\n      return csvRows.join(\"\\n\");\n    },\n    download(data) {\n      const blob = new Blob([data], { type: \"text/csv\" });\n      const url = window.URL.createObjectURL(blob);\n      const docu = document.createElement(\"a\");\n      docu.setAttribute(\"hidden\", \"\");\n      docu.setAttribute(\"href\", url);\n      docu.setAttribute(\"download\", \"csvname.csv\");\n      docu.click();\n    },\n  },\n  created() {\n    if (this.questions.length){\n      this.questionSelected = this.questions ? this.questions[0].id : null;\n    }\n    else{\n      this.noData = true\n    }\n  },\n  beforeRouteEnter(to, from, next) {\n    Promise.all([\n      store.dispatch(\"surveys/FetchSurveyData\", {\n        studyId: to.params.studyId,\n        surveyId: to.params.surveyId,\n      }),\n      store.dispatch(\"surveys/FetchSurveyDataAnswers\", {\n        studyId: to.params.studyId,\n        surveyId: to.params.surveyId,\n      }),\n    ]).then(() => {\n      next();\n    });\n  },\n};\n</script>\n<style lang=\"scss\">\n.surveyQuestionTxt {\n  font-size: 25px;\n  font-weight: 300;\n}\n.surveyOptionsTxt {\n  font-size: 15px;\n}\n.userIdTxt {\n  font-family: sans-serif;\n}\n.answerTxt {\n  font-family: sans-serif;\n}\n.dateTxt {\n  font-family: sans-serif;\n}\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}