{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport altSelect from \"@/components/multiSelect/Select\";\nimport { mapGetters } from \"vuex\";\nimport store from \"@/store\";\nimport survey from \"@/components/surveys/survey\";\nexport default {\n  name: \"surveyUser\",\n\n  data() {\n    return {\n      surveySelected: null,\n      questionSelected: null,\n      studyId: this.$route.query.studyId\n    };\n  },\n\n  components: {\n    altSelect,\n    survey\n  },\n  methods: {\n    onSurveyTypeChange() {\n      this.$refs.questionSelect.setNewValue(this.surveyQuestions && this.surveyQuestions.length > 0 ? this.surveyQuestions[0].id : null);\n    },\n\n    schedule() {\n      this.$router.push(`/surveyScheduler/${this.studyId}?userId=${this.$route.query.userId}`);\n    }\n\n  },\n  computed: { ...mapGetters(\"surveys\", [\"getUserAnswers\"]),\n\n    surveyTypes() {\n      let types = [];\n      let surveys = this.getUserAnswers(this.studyId, this.$route.query.userId);\n\n      for (const [key, value] of Object.entries(surveys)) {\n        types.push({\n          id: key,\n          name: value.data.title,\n          value: key\n        });\n      }\n\n      return types;\n    },\n\n    surveyQuestions() {\n      let qs = [];\n\n      if (this.surveySelected) {\n        let surveys = this.getUserAnswers(this.studyId, this.$route.query.userId);\n        let questions = surveys[this.surveySelected].questions;\n\n        for (const [key, value] of Object.entries(questions)) {\n          qs.push({\n            id: value.identifier,\n            name: value.question,\n            value: value.identifier\n          });\n        }\n      }\n\n      return qs;\n    },\n\n    surveyData() {\n      let surveys = this.getUserAnswers(this.studyId, this.$route.query.userId);\n      let questionData = surveys[this.surveySelected];\n\n      if (questionData) {\n        if (questionData.answers[this.questionSelected]) {\n          return questionData.answers[this.questionSelected];\n        }\n      }\n\n      return {};\n    }\n\n  },\n\n  mounted() {\n    this.$refs.surveyTypeSelect.setNewValue(this.surveyTypes && this.surveyTypes.length > 0 ? this.surveyTypes[0].id : null);\n    this.surveySelected = this.surveyTypes && this.surveyTypes.length > 0 ? this.surveyTypes[0].id : null;\n    this.$refs.questionSelect.setNewValue(this.surveyQuestions && this.surveyQuestions.length > 0 ? this.surveyQuestions[0].id : null);\n  },\n\n  beforeRouteEnter(to, from, next) {\n    Promise.all([store.dispatch(\"surveys/FetchUserSurveyData\", {\n      studyId: to.query.studyId,\n      userId: to.query.userId\n    })]).then(() => {\n      next();\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/views/surveys/surveyUser.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"page\">\n    <br />\n    <button @click=\"schedule\">Scheduler</button>\n    <br />\n    Select survey type\n    <br /><br />\n    <alt-select\n      :options=\"surveyTypes\"\n      v-model=\"surveySelected\"\n      :onChange=\"onSurveyTypeChange\"\n      ref=\"surveyTypeSelect\"\n    />\n    <br /><br />\n    Select Question of survey\n    <br /><br />\n    <alt-select\n      :options=\"surveyQuestions\"\n      v-model=\"questionSelected\"\n      ref=\"questionSelect\"\n    />\n    <br/>\n    <br/>\n    <survey :data=\"surveyData\" />\n  </div>\n</template>\n<script>\nimport altSelect from \"@/components/multiSelect/Select\";\nimport { mapGetters } from \"vuex\";\nimport store from \"@/store\";\nimport survey from \"@/components/surveys/survey\";\nexport default {\n  name: \"surveyUser\",\n  data() {\n    return {\n      surveySelected: null,\n      questionSelected: null,\n      studyId: this.$route.query.studyId\n    };\n  },\n  components: {\n    altSelect,\n    survey\n  },\n  methods: {\n    onSurveyTypeChange() {\n      this.$refs.questionSelect.setNewValue(\n        this.surveyQuestions && this.surveyQuestions.length > 0\n          ? this.surveyQuestions[0].id\n          : null\n      );\n    },\n    schedule() {\n      this.$router.push(`/surveyScheduler/${this.studyId}?userId=${this.$route.query.userId}`)\n    }\n  },\n  computed: {\n    ...mapGetters(\"surveys\", [\"getUserAnswers\"]),\n    surveyTypes() {\n      let types = [];\n      let surveys = this.getUserAnswers(this.studyId,this.$route.query.userId)\n      for (const [key, value] of Object.entries(surveys)) {\n        types.push({ id: key, name: value.data.title, value: key})\n    }\n      return types;\n    },\n    surveyQuestions() {\n      let qs = [];\n      if(this.surveySelected){\n        let surveys = this.getUserAnswers(this.studyId,this.$route.query.userId)\n        let questions = surveys[this.surveySelected].questions        \n        for (const [key, value] of Object.entries(questions)) {\n          qs.push({\n             id: value.identifier,\n             name: value.question,\n             value: value.identifier,\n           });\n        }\n      }\n      return qs;\n    },\n    surveyData(){\n      let surveys = this.getUserAnswers(this.studyId,this.$route.query.userId)\n      let questionData = surveys[this.surveySelected]\n      if(questionData){\n        if(questionData.answers[this.questionSelected]){\n          return questionData.answers[this.questionSelected]\n        }\n      }\n      return {}\n    }\n  },\n  mounted() {\n    this.$refs.surveyTypeSelect.setNewValue(\n      this.surveyTypes && this.surveyTypes.length > 0\n        ? this.surveyTypes[0].id\n        : null\n    );\n    this.surveySelected =\n      this.surveyTypes && this.surveyTypes.length > 0\n        ? this.surveyTypes[0].id\n        : null;\n    this.$refs.questionSelect.setNewValue(\n      this.surveyQuestions && this.surveyQuestions.length > 0\n        ? this.surveyQuestions[0].id\n        : null\n    );\n  },\n  beforeRouteEnter(to, from, next) {\n    Promise.all([\n      store.dispatch(\"surveys/FetchUserSurveyData\", {\n        studyId: to.query.studyId,\n        userId: to.query.userId,\n      }),\n    ]).then(() => {\n      next();\n    });\n  },\n};\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}