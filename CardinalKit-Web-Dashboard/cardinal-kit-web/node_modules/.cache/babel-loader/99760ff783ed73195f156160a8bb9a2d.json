{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/Rest\";\nexport const FetchCategoryTypeData = async (categoryType, payload) => {\n  let filterParams = [[\"body.category_type\", \"==\", categoryType]];\n  return await FetchGeneralData({ ...payload,\n    filterParams\n  });\n}; //TODO how is sample data export\n\nexport const FetchSampleData = async () => {};\nexport const FetchLastQuantityData = async (quantity_type, payload) => {\n  let lastRecord = await FetchQuantityData(quantity_type, payload);\n\n  if (lastRecord.length > 0) {\n    let date = new Date(lastRecord[0].header.creation_date_time);\n    date.setHours(0, 0, 0);\n    let endDate = new Date(date);\n    endDate.setHours(23, 59, 59);\n    let filterParams = [[\"body.quantity_type\", \"==\", quantity_type], [\"header.creation_date_time\", \">=\", date.toISOString()], [\"header.creation_date_time\", \"<=\", endDate.toISOString()]];\n    delete payload['limit'];\n    return await FetchGeneralData({ ...payload,\n      filterParams\n    });\n  } else {\n    return lastRecord;\n  }\n};\nexport const FetchQuantityData = async (quantity_type, payload) => {\n  let filterParams = [[\"body.quantity_type\", \"==\", quantity_type]];\n  return await FetchGeneralData({ ...payload,\n    filterParams\n  });\n};\nexport const FetchActivities = async payload => {\n  let snapShot = await request.GET(`studies/${payload.studyId}/users/${payload.userId}/healthKit`).WHERE([\"body.activity_name\", \"!=\", null]).ORDER_BY(\"body.activity_name\").ORDER_BY('header.creation_date_time', true).Execute();\n  let frecords = {};\n  let records = [];\n  snapShot.docs.map(record => {\n    frecords[record.data().body.activity_name] = record.data();\n  });\n\n  for (let [key, value] of Object.entries(frecords)) {\n    records.push(value);\n  }\n\n  return records;\n};\n\nconst FetchGeneralData = async payload => {\n  let Ref = request.GET(`studies/${payload.studyId}/users/${payload.userId}/healthKit`);\n  payload.filterParams.forEach(element => {\n    Ref = Ref.WHERE(element);\n  });\n\n  if (payload.limit != 0) {\n    Ref = Ref.ORDER_BY('header.creation_date_time', true).LIMIT(payload.limit);\n  }\n\n  let userSnap = await Ref.Execute();\n  let records = userSnap.docs.map(record => {\n    return record.data();\n  });\n  return records;\n};\n\nexport const initialState = () => ({\n  healthData: {},\n  userMetricData: []\n});\nexport default {\n  namespaced: true,\n  state: initialState(),\n  mutations: { ...require(\"./HealthData/mutations\"),\n    ...require(\"./HealthData/Activity/mutations\"),\n    ...require(\"./HealthData/Hearing/mutations\")\n  },\n  actions: { ...require(\"./HealthData/actions\"),\n    ...require(\"./HealthData/Activity/actions\"),\n    ...require(\"./HealthData/BodyMeasurements/actions\"),\n    ...require(\"./HealthData/Hearing/actions\"),\n    ...require(\"./HealthData/Heart/actions\"),\n    ...require(\"./HealthData/Mindfulness/actions\"),\n    ...require(\"./HealthData/Mobilitiy/actions\"),\n    ...require(\"./HealthData/Nutrition/actions\"),\n    ...require(\"./HealthData/Respiratory/actions\"),\n    ...require(\"./HealthData/Sleep/actions\"),\n    ...require(\"./HealthData/Symtoms/actions\"),\n    ...require(\"./HealthData/Vitals/actions\"),\n    ...require(\"./HealthData/Other/actions\")\n  },\n  getters: { ...require(\"./HealthData/getters\"),\n    ...require(\"./HealthData/Activity/getters\"),\n    ...require(\"./HealthData/Hearing/getters\")\n  }\n};","map":{"version":3,"names":["request","FetchCategoryTypeData","categoryType","payload","filterParams","FetchGeneralData","FetchSampleData","FetchLastQuantityData","quantity_type","lastRecord","FetchQuantityData","length","date","Date","header","creation_date_time","setHours","endDate","toISOString","FetchActivities","snapShot","GET","studyId","userId","WHERE","ORDER_BY","Execute","frecords","records","docs","map","record","data","body","activity_name","key","value","Object","entries","push","Ref","forEach","element","limit","LIMIT","userSnap","initialState","healthData","userMetricData","namespaced","state","mutations","require","actions","getters"],"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/store/modules/patient/index.js"],"sourcesContent":["import request from \"@/Rest\";\n\nexport const FetchCategoryTypeData = async (  \n  categoryType,\n  payload\n) => {\n  let filterParams = [\n    [\"body.category_type\",\"==\",categoryType],    \n  ]\n  return await FetchGeneralData({...payload,filterParams})\n};\n\n//TODO how is sample data export\nexport const FetchSampleData = async(\n\n)=>{\n\n};\n\nexport const FetchLastQuantityData = async(\n  quantity_type,\n  payload\n)=>{\n  let lastRecord = await FetchQuantityData(quantity_type,payload)\n  \n  if(lastRecord.length>0){\n    let date = new Date(lastRecord[0].header.creation_date_time)\n    date.setHours(0,0,0)\n    let endDate = new Date(date)\n    endDate.setHours(23,59,59)\n\n    let filterParams = [\n      [\"body.quantity_type\",\"==\",quantity_type],\n      [\"header.creation_date_time\", \">=\", date.toISOString()],\n      [\"header.creation_date_time\", \"<=\", endDate.toISOString()],\n    ]\n    delete payload['limit']\n    return await FetchGeneralData({...payload,filterParams})\n  }\n  else{\n    return lastRecord\n  }\n}\n\nexport const FetchQuantityData = async(\n  quantity_type,\n  payload\n) => {\n  let filterParams = [\n    [\"body.quantity_type\",\"==\",quantity_type]\n  ]\n  return await FetchGeneralData({...payload,filterParams})\n};\n\nexport const FetchActivities = async(payload)=>{\n  let snapShot =  await request\n    .GET(`studies/${payload.studyId}/users/${payload.userId}/healthKit`)\n    .WHERE([\"body.activity_name\",\"!=\",null])\n    .ORDER_BY(\"body.activity_name\")\n    .ORDER_BY('header.creation_date_time',true)\n    .Execute()    \n\n    let frecords = {}\n    let records = []\n\n    snapShot.docs.map((record) => {      \n      frecords[record.data().body.activity_name]   = record.data()\n    });\n\n    for (let [key, value] of Object.entries(frecords)){\n      records.push(value)\n    }\n    return records\n}\n\nconst FetchGeneralData = async (payload) => { \n  let Ref = request.GET(`studies/${payload.studyId}/users/${payload.userId}/healthKit`)\n  payload.filterParams.forEach(element => {    \n    Ref=Ref.WHERE(element)\n  });\n  if(payload.limit != 0){\n\n    Ref = Ref.ORDER_BY('header.creation_date_time',true).LIMIT(payload.limit)\n  }\n  let userSnap = await Ref\n    .Execute()\n  let records = userSnap.docs.map((record) => {\n    return record.data();\n  });\n  return records\n};\n\nexport const initialState = () => ({\n  healthData: {},\n  userMetricData:[]\n});\n\nexport default {\n  namespaced: true,\n  state: initialState(),\n  mutations:\n  {\n    ...require(\"./HealthData/mutations\"),\n    ...require(\"./HealthData/Activity/mutations\"),\n    ...require(\"./HealthData/Hearing/mutations\"),\n  },\n  actions: {\n    ...require(\"./HealthData/actions\"),\n    ...require(\"./HealthData/Activity/actions\"),\n    ...require(\"./HealthData/BodyMeasurements/actions\"),\n    ...require(\"./HealthData/Hearing/actions\"),\n    ...require(\"./HealthData/Heart/actions\"),\n    ...require(\"./HealthData/Mindfulness/actions\"),\n    ...require(\"./HealthData/Mobilitiy/actions\"),\n    ...require(\"./HealthData/Nutrition/actions\"),\n    ...require(\"./HealthData/Respiratory/actions\"),\n    ...require(\"./HealthData/Sleep/actions\"),\n    ...require(\"./HealthData/Symtoms/actions\"),\n    ...require(\"./HealthData/Vitals/actions\"),\n    ...require(\"./HealthData/Other/actions\"),\n  },\n  getters:{\n    ...require(\"./HealthData/getters\"),\n    ...require(\"./HealthData/Activity/getters\"),\n    ...require(\"./HealthData/Hearing/getters\"),\n    \n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}