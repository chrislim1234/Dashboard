{"ast":null,"code":"import { logosByCategory, categoriesOfSubcategories } from '@/common/static_data';\n/*\n    CustomDataFormat\n    {\n        HkCode :  String,\n        HkValue : String,\n        Date : Date,\n        Value: Integer,\n        Unit : String,\n        id: String\n        //If has duration \n        startDate: date\n        endDate: date\n    }\n*/\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n/** Function to transform OmhData into a format that works throughout the application */\n// TODO There is a case with distance duration and kcal  \n\nexport const transformHealthDataToGlobalFormat = data => {\n  let HkCode,\n      HkCodeName,\n      HkValue,\n      _Date,\n      Value,\n      Unit,\n      Id,\n      StartDate,\n      EndDate,\n      ExtraData = null; //HkCode\n\n\n  if (data.body.category_type) {\n    HkCode = data.body.category_type;\n\n    if (data.body.category_value != \"Not Applicable\") {\n      HkValue = data.body.category_value;\n      Value = data.body.category_value;\n      Unit = \" \";\n    }\n  } //Dates\n\n\n  if (data.body.effective_time_frame.time_interval) {\n    StartDate = new Date(data.body.effective_time_frame.time_interval.start_date_time);\n    EndDate = new Date(data.body.effective_time_frame.time_interval.end_date_time);\n    let difference = EndDate.getTime() - StartDate.getTime(); //Secs \n\n    let transformTime = TransformTime(difference / 1000);\n    Unit = transformTime.Unit;\n    Value = transformTime.Value;\n  }\n\n  if (data.body.quantity_type) {\n    HkCode = data.body.quantity_type;\n  }\n\n  if (data.body.activity_name) {\n    HkCode = data.body.activity_name; //if is activity has 3 types of data\n\n    ExtraData = {};\n\n    if (data.body.distance) {\n      ExtraData[\"distance\"] = data.body.distance;\n    }\n\n    if (data.body.duration) {\n      let transform = TransformTime(parseInt(data.body.duration.value));\n      transform[\"value\"] = transform.Value;\n      ExtraData[\"duration\"] = transform;\n    }\n\n    if (data.body.kcal_burned) {\n      ExtraData[\"kcal\"] = data.body.kcal_burned;\n    }\n  }\n\n  HkCodeName = transformAppleCode(HkCode); //Date\n\n  _Date = new Date(data.header.creation_date_time); //Unit and value\n\n  if (data.body.kcal_burned) {\n    Unit = data.body.kcal_burned.unit;\n    Value = data.body.kcal_burned.value;\n  }\n\n  if (data.body.body_temperature) {\n    Unit = data.body.body_temperature.unit;\n    Value = data.body.body_temperature.value;\n  }\n\n  if (data.body.unit_value) {\n    Unit = data.body.unit_value.unit;\n    Value = data.body.unit_value.value;\n  }\n\n  if (data.body.blood_glucose) {\n    Unit = data.body.blood_glucose.unit;\n    Value = data.body.blood_glucose.value;\n  }\n\n  if (data.body.body_fat_percentage) {\n    Unit = data.body.body_fat_percentage.unit;\n    Value = data.body.body_fat_percentage.value;\n  }\n\n  if (data.body.body_mass_index) {\n    Unit = data.body.body_mass_index.unit;\n    Value = data.body.body_mass_index.value;\n  }\n\n  if (data.body.body_weight) {\n    Unit = data.body.body_weight.unit;\n    Value = data.body.body_weight.value;\n  }\n\n  if (data.body.count) {\n    Value = data.body.count;\n\n    switch (data.body.quantity_type) {\n      case \"HKQuantityTypeIdentifierFlightsClimbed\":\n        Unit = \"Flight\";\n\n        if (Value > 1) {\n          Unit += \"s\";\n        }\n\n        break;\n\n      case \"HKQuantityTypeIdentifierPushCount\":\n        Unit = \"Push\";\n\n        if (Value > 1) {\n          Unit += \"es\";\n        }\n\n        break;\n\n      case \"HKQuantityTypeIdentifierSwimmingStrokeCount\":\n        Unit = \"Stroke\";\n\n        if (Value > 1) {\n          Unit += \"s\";\n        }\n\n        break;\n\n      case \"HKQuantityTypeIdentifierInhalerUsage\":\n      case \"HKQuantityTypeIdentifierNumberOfTimesFallen\":\n        Unit = \"Time\";\n\n        if (Value > 1) {\n          Unit += \"s\";\n        }\n\n        break;\n\n      default:\n        Unit = \" \";\n        break;\n    }\n  }\n\n  if (data.body.body_height) {\n    Unit = data.body.body_height.unit;\n    Value = data.body.body_height.value;\n  }\n\n  if (data.body.oxygen_saturation) {\n    Unit = data.body.oxygen_saturation.unit;\n    Value = data.body.oxygen_saturation.value;\n  }\n\n  if (data.body.respiratory_rate) {\n    Unit = data.body.respiratory_rate.unit;\n    Value = data.body.respiratory_rate.value;\n  }\n\n  if (data.body.step_count) {\n    Unit = \"Steps\";\n    Value = data.body.step_count;\n  }\n\n  if (data.body.heart_rate) {\n    Unit = data.body.heart_rate.unit;\n    Value = data.body.heart_rate.value;\n  }\n\n  if (data.body.distance) {\n    Unit = data.body.distance.unit;\n    Value = data.body.distance.value;\n  }\n\n  if (data.body.sleep_duration) {\n    let transformTime = TransformTime(parseInt(data.body.sleep_duration.value));\n    Unit = transformTime.Unit;\n    Value = transformTime.Value;\n  }\n\n  if (data.body.duration) {\n    if (data.body.duration.Unit = \"Secs\") {\n      let transformTime = TransformTime(parseInt(data.body.duration.value));\n      Unit = transformTime.Unit;\n      Value = transformTime.Value;\n    } else {\n      Unit = data.body.duration.unit;\n      Value = data.body.duration.value;\n    }\n  }\n\n  if (typeof Value === 'number' && Value % 1 != 0) {\n    Value = parseFloat(parseFloat(Value).toFixed(2));\n  } //Id\n\n\n  Id = data.header.id;\n\n  let logo = require(\"@/assets/icons/Flame.png\");\n\n  let category = categoriesOfSubcategories[HkCode];\n\n  if (category) {\n    let logoCategory = logosByCategory[category];\n\n    if (logoCategory) {\n      logo = logoCategory;\n    }\n  }\n\n  return {\n    HkCode: HkCode,\n    HkCodeName: HkCodeName,\n    HkValue: HkValue,\n    Date: {\n      Date: _Date,\n      formatted: monthNames[_Date.getMonth()] + \" \" + _Date.getDate()\n    },\n    Value: Value,\n    Unit: Unit,\n    Id: Id,\n    StartDate: StartDate,\n    EndDate: EndDate,\n    Logo: logo,\n    Color: \"red\",\n    Extrada: ExtraData\n  };\n};\n/** Function to transform apple code in string human readable */\n\nexport const transformAppleCode = appleCode => {\n  return appleCode.replace(\"HKQuantityTypeIdentifier\", \"\").replace(\"HKCategoryTypeIdentifier\", \"\").replace(/([A-Z]+)/g, \" $1\").replace(/([A-Z][a-z])/g, \" $1\");\n};\n/** Function to transform Time units*/\n\nfunction TransformTime(timeInSecs) {\n  let Secs = timeInSecs;\n\n  if (Secs >= 60) {\n    let mins = Secs / 60;\n\n    if (mins >= 60) {\n      let hours = mins / 60;\n\n      if (hours >= 24) {\n        let days = hours / 24;\n        return {\n          Unit: \"Days\",\n          Value: Math.trunc(days)\n        };\n      } else {\n        return {\n          Unit: \"Hours\",\n          Value: Math.trunc(hours)\n        };\n      }\n    } else {\n      return {\n        Unit: \"Mins\",\n        Value: Math.trunc(mins)\n      };\n    }\n  } else {\n    return {\n      Unit: \"Secs\",\n      Value: Math.trunc(Secs)\n    };\n  }\n}\n/** Get Category values by apple code  \"HKCategoryTypes\" */\n\n\nexport const GetCategoriesByHkType = HkCode => {\n  switch (HkCode) {\n    case 'HKCategoryTypeIdentifierAppetiteChanges':\n      return ['No change', 'Unspecified', 'Decreased', 'Increased'];\n\n    case 'HKCategoryTypeIdentifierSleepAnalysis':\n      return ['InBed', 'Asleep'];\n\n    case 'HKCategoryTypeIdentifierAppleStandHour':\n      return ['Idle', 'Standing'];\n\n    case 'HKCategoryTypeIdentifierCervicalMucusQuality':\n      return ['Creamy', 'Dry', 'Egg white', 'Sticky', 'Watery'];\n\n    case 'HKCategoryTypeIdentifierIntermenstrualFlow':\n      return ['Unspecified', 'Light', 'Medium', 'Heavy'];\n\n    case 'HKCategoryTypeIdentifierMoodChanges':\n    case 'HKCategoryTypeIdentifierSleepChanges':\n      return ['Not Present', 'Present'];\n\n    case 'HKCategoryTypeIdentifierContraceptive':\n      return ['UnSpecified', 'Implant', 'Injection', 'Intrauterine Device', 'Intravaginal Ring', 'Oral', 'Patch'];\n\n    case 'HKCategoryTypeIdentifierOvulationTestResult':\n      return ['Negative', 'Positive', 'Indeterminate'];\n\n    default:\n      return ['Present', 'Not Present', 'Mild', 'Moderate', 'Severe'];\n  }\n};","map":{"version":3,"names":["logosByCategory","categoriesOfSubcategories","monthNames","transformHealthDataToGlobalFormat","data","HkCode","HkCodeName","HkValue","_Date","Value","Unit","Id","StartDate","EndDate","ExtraData","body","category_type","category_value","effective_time_frame","time_interval","Date","start_date_time","end_date_time","difference","getTime","transformTime","TransformTime","quantity_type","activity_name","distance","duration","transform","parseInt","value","kcal_burned","transformAppleCode","header","creation_date_time","unit","body_temperature","unit_value","blood_glucose","body_fat_percentage","body_mass_index","body_weight","count","body_height","oxygen_saturation","respiratory_rate","step_count","heart_rate","sleep_duration","parseFloat","toFixed","id","logo","require","category","logoCategory","formatted","getMonth","getDate","Logo","Color","Extrada","appleCode","replace","timeInSecs","Secs","mins","hours","days","Math","trunc","GetCategoriesByHkType"],"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/common/helpers/healthKit/index.js"],"sourcesContent":["import {logosByCategory,categoriesOfSubcategories} from '@/common/static_data'\n\n/*\n    CustomDataFormat\n    {\n        HkCode :  String,\n        HkValue : String,\n        Date : Date,\n        Value: Integer,\n        Unit : String,\n        id: String\n        //If has duration \n        startDate: date\n        endDate: date\n    }\n*/\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\n/** Function to transform OmhData into a format that works throughout the application */\n\n// TODO There is a case with distance duration and kcal  \nexport const transformHealthDataToGlobalFormat = (data) => {\n  let HkCode,\n    HkCodeName,\n    HkValue,\n    _Date,\n    Value,\n    Unit,\n    Id,\n    StartDate,\n    EndDate,\n    ExtraData = null;\n\n   \n  //HkCode\n  if (data.body.category_type) {\n    HkCode = data.body.category_type;\n    \n    if(data.body.category_value!=\"Not Applicable\"){\n      HkValue = data.body.category_value;\n      Value = data.body.category_value\n      Unit = \" \"\n    }\n  }\n\n  //Dates\n  if (data.body.effective_time_frame.time_interval) {\n    StartDate = new Date(data.body.effective_time_frame.time_interval.start_date_time);\n    EndDate = new Date(data.body.effective_time_frame.time_interval.end_date_time);\n    let difference = EndDate.getTime()-StartDate.getTime()\n    //Secs \n    let transformTime = TransformTime(difference/1000);\n    Unit=transformTime.Unit\n    Value = transformTime.Value \n  }\n\n  if (data.body.quantity_type) {\n    HkCode = data.body.quantity_type;\n  }\n\n  if(data.body.activity_name){\n    HkCode = data.body.activity_name;\n\n    //if is activity has 3 types of data\n    ExtraData = {}\n    if(data.body.distance){\n      ExtraData[\"distance\"]= data.body.distance;\n    }\n\n    if(data.body.duration){\n      let transform = TransformTime(parseInt(data.body.duration.value))\n      transform[\"value\"] = transform.Value\n      ExtraData[\"duration\"]=transform\n\n    }\n\n    if(data.body.kcal_burned){\n      ExtraData[\"kcal\"]=data.body.kcal_burned\n    }\n\n  }\n\n  HkCodeName=transformAppleCode(HkCode)\n\n  //Date\n  _Date = new Date(data.header.creation_date_time);\n\n  //Unit and value\n\n  if (data.body.kcal_burned) {\n    Unit = data.body.kcal_burned.unit;\n    Value = data.body.kcal_burned.value;\n  }\n  if (data.body.body_temperature) {\n    Unit = data.body.body_temperature.unit;\n    Value = data.body.body_temperature.value;\n  }\n  if (data.body.unit_value) {\n    Unit = data.body.unit_value.unit;\n    Value = data.body.unit_value.value;\n  }\n  if (data.body.blood_glucose) {\n    Unit = data.body.blood_glucose.unit;\n    Value = data.body.blood_glucose.value;\n  }\n  if (data.body.body_fat_percentage) {\n    Unit = data.body.body_fat_percentage.unit;\n    Value = data.body.body_fat_percentage.value;\n  }\n  if (data.body.body_mass_index) {\n    Unit = data.body.body_mass_index.unit;\n    Value = data.body.body_mass_index.value;\n  }\n  if (data.body.body_weight) {\n    Unit = data.body.body_weight.unit;\n    Value = data.body.body_weight.value;\n  }\n  if (data.body.count) {\n    Value = data.body.count;\n    switch(data.body.quantity_type){\n      case \"HKQuantityTypeIdentifierFlightsClimbed\":\n        Unit=\"Flight\"\n        if(Value>1){\n          Unit+=\"s\"\n        }\n        break;\n      case \"HKQuantityTypeIdentifierPushCount\":\n        Unit=\"Push\"\n        if(Value>1){\n          Unit+=\"es\"\n        }\n        break;\n      case \"HKQuantityTypeIdentifierSwimmingStrokeCount\":\n        Unit=\"Stroke\"\n        if(Value>1){\n          Unit+=\"s\"\n        }\n        break;\n      case \"HKQuantityTypeIdentifierInhalerUsage\": \n      case \"HKQuantityTypeIdentifierNumberOfTimesFallen\":\n        Unit=\"Time\"\n        if(Value>1){\n          Unit+=\"s\"\n        }\n        break;\n      default:\n        Unit = \" \"\n        break;\n    }\n    \n  }\n  if (data.body.body_height) {\n    Unit = data.body.body_height.unit;\n    Value = data.body.body_height.value;\n  }\n  if (data.body.oxygen_saturation) {\n    Unit = data.body.oxygen_saturation.unit;\n    Value = data.body.oxygen_saturation.value;\n  }\n  if (data.body.respiratory_rate) {\n    Unit = data.body.respiratory_rate.unit;\n    Value = data.body.respiratory_rate.value;\n  }\n  if (data.body.step_count) {\n    Unit = \"Steps\";\n    Value = data.body.step_count;\n  }\n  if (data.body.heart_rate) {\n    Unit = data.body.heart_rate.unit;\n    Value = data.body.heart_rate.value;\n  }\n  if (data.body.distance) {\n    Unit = data.body.distance.unit;\n    Value = data.body.distance.value;\n  }\n  if(data.body.sleep_duration){\n    let transformTime = TransformTime(parseInt(data.body.sleep_duration.value));\n    Unit=transformTime.Unit\n    Value = transformTime.Value\n  }\n  if (data.body.duration) {\n    if(data.body.duration.Unit=\"Secs\"){\n      let transformTime = TransformTime(parseInt(data.body.duration.value));\n      Unit=transformTime.Unit\n      Value = transformTime.Value\n    }\n    else{\n      Unit = data.body.duration.unit;\n      Value = data.body.duration.value;\n    }\n  }\n\n  if(typeof Value === 'number' && Value%1!=0){\n    Value=  parseFloat(parseFloat(Value).toFixed(2))\n  }\n  \n  //Id\n  Id = data.header.id;\n  \n  let logo = require(\"@/assets/icons/Flame.png\")\n  let category = categoriesOfSubcategories[HkCode]\n  if(category){\n    let logoCategory = logosByCategory[category]\n    if(logoCategory){\n      logo = logoCategory\n    }\n  }\n  \n\n\n  return {\n    HkCode: HkCode,\n    HkCodeName: HkCodeName,\n    HkValue: HkValue,\n    Date: {Date:_Date,formatted:monthNames[_Date.getMonth()]+\" \"+_Date.getDate()},\n    Value: Value,\n    Unit: Unit,\n    Id: Id,\n    StartDate: StartDate,\n    EndDate: EndDate,\n    Logo:logo,\n    Color: \"red\",\n    Extrada: ExtraData\n  };\n};\n\n/** Function to transform apple code in string human readable */\nexport const transformAppleCode = (appleCode) => {\n  return appleCode\n    .replace(\"HKQuantityTypeIdentifier\", \"\")\n    .replace(\"HKCategoryTypeIdentifier\", \"\")\n    .replace(/([A-Z]+)/g, \" $1\")\n    .replace(/([A-Z][a-z])/g, \" $1\");\n};\n\n\n/** Function to transform Time units*/\nfunction TransformTime(timeInSecs){\n  let Secs = timeInSecs;\n  if(Secs>=60){\n    let mins = Secs/60;\n\n    if(mins>=60){\n      let hours = mins/60;\n      if(hours>=24){\n        let days = hours/24\n        return {Unit:\"Days\",Value: Math.trunc(days)}\n      }\n      else{\n        return {Unit:\"Hours\",Value: Math.trunc(hours)}\n      }\n    }\n    else{\n      return {Unit:\"Mins\",Value: Math.trunc(mins)}\n    }\n  }\n  else{\n    return {Unit:\"Secs\",Value:Math.trunc(Secs)}\n  }\n}\n\n\n/** Get Category values by apple code  \"HKCategoryTypes\" */\nexport const GetCategoriesByHkType=(HkCode)=>{\n  switch(HkCode){\n    case 'HKCategoryTypeIdentifierAppetiteChanges':\n      return ['No change','Unspecified','Decreased','Increased']\n    case 'HKCategoryTypeIdentifierSleepAnalysis':\n      return ['InBed','Asleep']\n    case 'HKCategoryTypeIdentifierAppleStandHour':\n      return ['Idle','Standing']\n    case 'HKCategoryTypeIdentifierCervicalMucusQuality':\n      return ['Creamy','Dry','Egg white','Sticky','Watery']\n    case 'HKCategoryTypeIdentifierIntermenstrualFlow':\n      return ['Unspecified','Light','Medium','Heavy']\n    case 'HKCategoryTypeIdentifierMoodChanges':\n    case 'HKCategoryTypeIdentifierSleepChanges':\n      return ['Not Present','Present']\n    case 'HKCategoryTypeIdentifierContraceptive':\n      return ['UnSpecified','Implant','Injection','Intrauterine Device','Intravaginal Ring','Oral','Patch']\n    case 'HKCategoryTypeIdentifierOvulationTestResult':\n      return ['Negative','Positive','Indeterminate']\n    default:\n      return ['Present','Not Present','Mild','Moderate','Severe']\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}