{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, vShow as _vShow, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"page\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"alert-err\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"alert-err\"\n};\nconst _hoisted_4 = {\n  key: 2\n};\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"h2\", null, \" Select a Question\", -1\n/* HOISTED */\n);\n\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_alt_select = _resolveComponent(\"alt-select\");\n\n  const _component_survey = _resolveComponent(\"survey\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.errMsg ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _toDisplayString(_ctx.msg), 1\n  /* TEXT */\n  )) : _createCommentVNode(\"v-if\", true), $data.noData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, \" This survey has no answers yet \")) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_hoisted_5, _hoisted_6, _hoisted_7, _createVNode(_component_alt_select, {\n    options: $options.questions,\n    modelValue: $data.questionSelected,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.questionSelected = $event),\n    defaultValue: $data.questionSelected\n  }, null, 8\n  /* PROPS */\n  , [\"options\", \"modelValue\", \"defaultValue\"]), _hoisted_8, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.getSurveyAnswers($props.studyId)[$props.surveyId], (value, key) => {\n    return _withDirectives((_openBlock(), _createElementBlock(\"div\", {\n      class: \"surveyQuestionTxt\",\n      key: key\n    }, [_createVNode(_component_survey, {\n      data: value\n    }, null, 8\n    /* PROPS */\n    , [\"data\"])])), [[_vShow, $data.questionSelected == value.identifier]]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  )), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.convert && $options.convert(...args))\n  }, \"Download\")]))]);\n}","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/views/surveys/surveysDetail.vue"],"names":[],"mappings":";;EACO,KAAK,EAAC;;;;EACJ,KAAK,EAAC;;;;EAGN,KAAK,EAAC;;;;;;gCAIT,mBAAA,CAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM,CAAA;AAAA;AAAN,C;;gCACA,mBAAA,CAA2B,IAA3B,EAA2B,IAA3B,EAAI,oBAAJ,EAAsB,CAAA;AAAA;AAAtB,C;;gCACA,mBAAA,CAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM,CAAA;AAAA;AAAN,C;;gCAEA,mBAAA,CAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM,CAAA;AAAA;AAAN,C;;;;;;;uBAZJ,mBAAA,CAwBM,KAxBN,EAAA,UAAA,EAwBM,CAvByB,KAAA,CAAA,M,kBAA7B,mBAAA,CAEM,KAFN,EAAA,UAAA,EAEM,gBAAA,CADF,IAAA,CAAA,GACE,CAFN,EACO;EAAA;EADP,C,qCAuBI,EApByB,KAAA,CAAA,M,kBAA7B,mBAAA,CAEM,KAFN,EAAA,UAAA,EAAqC,kCAArC,C,mBAGA,mBAAA,CAgBM,KAhBN,EAgBM,UAhBN,EAgBM,CAfJ,UAeI,EAdJ,UAcI,EAbJ,UAaI,EAZJ,YAAA,CAA+F,qBAA/F,EAA+F;IAAlF,OAAO,EAAE,QAAA,CAAA,SAAyE;gBAArD,KAAA,CAAA,gBAAqD;+DAArD,KAAA,CAAA,gB,GAAgB,M,CAAqC;IAAlC,YAAY,EAAE,KAAA,CAAA;EAAoB,CAA/F,E,IAAA,E;;EAAA,E,yCAAA,CAYI,EAXJ,UAWI,G,kBATJ,mBAAA,CAOM,SAPN,EAOM,IAPN,EAOM,WAAA,CALmB,IAAA,CAAA,gBAAA,CAAiB,MAAA,CAAA,OAAjB,EAA0B,MAAA,CAAA,QAA1B,CAKnB,EALqD,CAAjD,KAAiD,EAA1C,GAA0C,KAAvC;0CAFpB,mBAAA,CAOM,KAPN,EAOM;MANJ,KAAK,EAAC,mBAMF;MAJH,GAAG,EAAE;IAIF,CAPN,E,CAME,YAAA,CAAwB,iBAAxB,EAAwB;MAAf,IAAI,EAAE;IAAS,CAAxB,EAAoB,IAApB,EAAoB;IAAA;IAApB,EAAoB,CAAA,MAAA,CAApB,C,CANF,C,aAIU,KAAA,CAAA,gBAAA,IAAoB,KAAK,CAAC,U;GAG9B,CAPN,E;;EAAA,CASI,GADJ,mBAAA,CAA0C,QAA1C,EAA0C;IAAjC,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,IAAA,KAAE,QAAA,CAAA,OAAA,IAAA,QAAA,CAAA,OAAA,CAAA,GAAA,IAAA,CAAF;EAA4B,CAA1C,EAAyB,UAAzB,CACI,CAhBN,C,CAiBI,CAxBN,C","sourcesContent":["<template>\n  <div class=\"page\">\n    <div class=\"alert-err\" v-if=\"errMsg\">\n      {{msg}}\n    </div>\n    <div class=\"alert-err\" v-if=\"noData\">\n      This survey has no answers yet\n    </div>\n    <div v-else>\n      <br />\n      <h2> Select a Question</h2>\n      <br />\n      <alt-select :options=\"questions\" v-model=\"questionSelected\" :defaultValue=\"questionSelected\" />\n      <br />\n      \n      <div\n        class=\"surveyQuestionTxt\"\n        v-for=\"(value, key) in getSurveyAnswers(studyId)[surveyId]\"\n        :key=\"key\"\n        v-show=\"questionSelected == value.identifier\"\n      >\n        <survey :data=\"value\" />\n      </div>\n      <button @click=\"convert\">Download</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport store from \"@/store\";\nimport { mapGetters } from \"vuex\";\nimport survey from \"@/components/surveys/survey\";\n\n//Components\nimport altTable from \"@/components/tables/altTable\";\nimport altSelect from \"@/components/multiSelect/Select\";\n\nexport default {\n  data() {\n    return {\n      columns: [\n        { header: \"NÂ°\" },\n        { header: \"UserId\" },\n        { header: \"Answer\" },\n        { header: \"Date\" },\n      ],\n      questionSelected: \"\",\n      questionData: {},\n      errMsg: false,\n      noData: false\n    };\n  },\n  computed: {\n    ...mapGetters(\"surveys\", [\"getSurveyAnswers\"]),\n   \n    questions() {\n      let qs = [];\n      let questions = this.getSurveyAnswers(this.studyId)[this.surveyId]\n      questions.forEach(question => {\n        qs.push({\n          id: question.identifier,\n          name: question.question,\n          value: question.identifier,\n        });\n      });\n      return qs;\n    },\n  },\n\n  components: {\n    altTable,\n    altSelect,\n    survey,\n  },\n  props: {\n    studyId: {\n      type: String,\n      required: true,\n    },\n    surveyId: {\n      type: String,\n      required: true,\n    },\n  },\n  methods: {    \n    convert() {\n      this.errMsg = false\n      let surveyData = JSON.parse(\n        JSON.stringify(this.getSurveyAnswers(this.studyId)[this.surveyId])\n      );\n      let surveyTransformed = this.oneLineForEachAnswer(\n        this.optionsInOneLine(surveyData)\n      );\n      let stringData = JSON.stringify(surveyTransformed);\n      const jsonData = JSON.parse(stringData);\n      if(jsonData.length){\n        let csvData = this.objectToCsv(jsonData);\n        this.download(csvData);\n      }else{\n        this.errMsg = true\n        this.msg = \"No data to download\"\n      }\n    },\n    optionsInOneLine(data) {\n      let result = [];\n      data.forEach((element) => {\n        let nElement = element;\n        if (nElement.Options) {\n          let optionsInString = JSON.stringify(nElement.Options).replaceAll(\n            '\"',\n            \"'\"\n          );\n          if (optionsInString) {\n            optionsInString = optionsInString;\n          }\n          nElement.Options = optionsInString;\n        }\n        result.push(nElement);\n      });\n      return result;\n    },\n    oneLineForEachAnswer(data) {\n      let result = [];\n      data.forEach((element) => {\n        let answers = element.answers;\n        let nElement = element;\n        delete nElement[\"answers\"];\n        answers.forEach((answer) => {\n          let nAnswer = answer;\n          Object.keys(nElement).map((key) => {\n            nAnswer[key] = nElement[key];\n          });\n          result.push(nAnswer);\n        });\n      });\n      return result;\n    },\n    objectToCsv(data) {\n      const csvRows = [];\n      const headers = Object.keys(data[0]);\n      csvRows.push(headers.join(\",\"));\n      for (const row of data) {\n        const values = headers.map((header) => {\n          const escaped = (\"\" + row[header]).replace(/\"/g, '\\\\\"');\n          return `\"${escaped}\"`;\n        });\n        csvRows.push(values.join(\",\"));\n      }\n      return csvRows.join(\"\\n\");\n    },\n    download(data) {\n      const blob = new Blob([data], { type: \"text/csv\" });\n      const url = window.URL.createObjectURL(blob);\n      const docu = document.createElement(\"a\");\n      docu.setAttribute(\"hidden\", \"\");\n      docu.setAttribute(\"href\", url);\n      docu.setAttribute(\"download\", \"csvname.csv\");\n      docu.click();\n    },\n  },\n  created() {\n    if (this.questions.length){\n      this.questionSelected = this.questions ? this.questions[0].id : null;\n    }\n    else{\n      this.noData = true\n    }\n  },\n  beforeRouteEnter(to, from, next) {\n    Promise.all([\n      store.dispatch(\"surveys/FetchSurveyData\", {\n        studyId: to.params.studyId,\n        surveyId: to.params.surveyId,\n      }),\n      store.dispatch(\"surveys/FetchSurveyDataAnswers\", {\n        studyId: to.params.studyId,\n        surveyId: to.params.surveyId,\n      }),\n    ]).then(() => {\n      next();\n    });\n  },\n};\n</script>\n<style lang=\"scss\">\n.surveyQuestionTxt {\n  font-size: 25px;\n  font-weight: 300;\n}\n.surveyOptionsTxt {\n  font-size: 15px;\n}\n.userIdTxt {\n  font-family: sans-serif;\n}\n.answerTxt {\n  font-family: sans-serif;\n}\n.dateTxt {\n  font-family: sans-serif;\n}\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}