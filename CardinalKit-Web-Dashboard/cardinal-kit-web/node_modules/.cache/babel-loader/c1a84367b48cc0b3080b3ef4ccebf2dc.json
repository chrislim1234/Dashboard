{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createBlock as _createBlock, createCommentVNode as _createCommentVNode, withCtx as _withCtx, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-4e101ac4\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"page\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"mb-5 text-muted\"\n}, \"Patients\", -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_loading_icon = _resolveComponent(\"loading-icon\");\n\n  const _component_alt_table = _resolveComponent(\"alt-table\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createVNode(_component_alt_table, {\n    columns: $data.columns,\n    pagination: \"\",\n    paginationOptions: $options.paginationOptions,\n    onOnPagination: $options.handlePagination\n  }, {\n    \"t-row\": _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.getPageItems, (patient, index) => {\n      return _openBlock(), _createElementBlock(\"tr\", {\n        key: patient.id\n      }, [_createElementVNode(\"td\", null, _toDisplayString(index + 1), 1\n      /* TEXT */\n      ), _createElementVNode(\"td\", null, _toDisplayString(patient.email || 'NN'), 1\n      /* TEXT */\n      ), _createElementVNode(\"td\", null, _toDisplayString(patient.id || 'NN'), 1\n      /* TEXT */\n      ), _createElementVNode(\"td\", null, [$data.loadingId == patient.id ? (_openBlock(), _createBlock(_component_loading_icon, {\n        key: 0,\n        size: \"3px\"\n      })) : (_openBlock(), _createElementBlock(\"span\", {\n        key: 1,\n        class: \"pointer btn-view\",\n        onClick: $event => $options.handleSelecPatient(patient.id)\n      }, \" View \", 8\n      /* PROPS */\n      , _hoisted_3))])]);\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"columns\", \"paginationOptions\", \"onOnPagination\"])]);\n}","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/components/studies/patientsList.vue"],"names":[],"mappings":";;;;;EACO,KAAK,EAAC;;;gEACT,mBAAA,CAAyC,IAAzC,EAAyC;EAArC,KAAK,EAAC;AAA+B,CAAzC,EAA4B,UAA5B,EAAoC,CAAA;AAAA;AAApC,C;;;;;;;;uBADF,mBAAA,CAqBM,KArBN,EAAA,UAAA,EAqBM,CApBJ,UAoBI,EAnBJ,YAAA,CAkBY,oBAlBZ,EAkBY;IAlBA,OAAO,EAAE,KAAA,CAAA,OAkBT;IAlBkB,UAAU,EAAV,EAkBlB;IAlB8B,iBAAiB,EAAE,QAAA,CAAA,iBAkBjD;IAlBqE,cAAY,EAAE,QAAA,CAAA;EAkBnF,CAlBZ,E;IACa,SAAK,QAAA,CACV,MAAwC,E,kBAA5C,mBAAA,CAcK,SAdL,EAcK,IAdL,EAcK,WAAA,CAd0B,QAAA,CAAA,YAc1B,EAdsC,CAA/B,OAA+B,EAAtB,KAAsB,KAAjB;2BAA1B,mBAAA,CAcK,IAdL,EAcK;QAdyC,GAAG,EAAE,OAAO,CAAC;MActD,CAdL,E,CACE,mBAAA,CAAsB,IAAtB,EAAsB,IAAtB,EAAsB,gBAAA,CAAhB,KAAK,GAAA,CAAW,CAAtB,EAAW;MAAA;MAAX,C,EACA,mBAAA,CAEK,IAFL,EAEK,IAFL,EAEK,gBAAA,CADD,OAAO,CAAC,KAAR,IAAa,IACZ,CAFL,EACiB;MAAA;MADjB,C,EAGA,mBAAA,CAEK,IAFL,EAEK,IAFL,EAEK,gBAAA,CADD,OAAO,CAAC,EAAR,IAAU,IACT,CAFL,EACc;MAAA;MADd,C,EAGA,mBAAA,CAKK,IALL,EAKK,IALL,EAKK,CAJiB,KAAA,CAAA,SAAA,IAAa,OAAO,CAAC,E,kBAAzC,YAAA,CAAyD,uBAAzD,EAAyD;cAAA;QAAZ,IAAI,EAAC;MAAO,CAAzD,C,mBACA,mBAAA,CAEO,MAFP,EAEO;cAAA;QAFM,KAAK,EAAC,kBAEZ;QAFgC,OAAK,EAAA,MAAA,IAAE,QAAA,CAAA,kBAAA,CAAmB,OAAO,CAAC,EAA3B;MAEvC,CAFP,EAA8E,QAA9E,EAEA;MAAA;MAFA,EAEA,UAFA,C,CAGG,CALL,C,CARF,C;KAcK,CAdL,E;;IAAA,CAA4C,EAD9B,C;;;;GADlB,E;;EAAA,E,kDAAA,CAmBI,CArBN,C","sourcesContent":["<template>\n  <div class=\"page\">\n    <h1 class=\"mb-5 text-muted\">Patients</h1>\n    <alt-table :columns=\"columns\" pagination :paginationOptions=\"paginationOptions\" @onPagination=\"handlePagination\">\n      <template #t-row>\n        <tr v-for=\"(patient, index) in getPageItems\" :key=\"patient.id\">\n          <td>{{index + 1}}</td>\n          <td>\n            {{patient.email || 'NN'}}\n          </td>\n          <td>\n            {{patient.id || 'NN'}}\n          </td>\n          <td>\n            <loading-icon v-if=\"loadingId == patient.id\" size=\"3px\"/>\n            <span v-else class=\"pointer btn-view\" @click=\"handleSelecPatient(patient.id)\">\n              View\n            </span>\n          </td>\n        </tr>\n      </template>\n    </alt-table>\n  </div>\n</template>\n<script>\nimport altTable from '@/components/tables/altTable';\nimport loadingIcon from \"@/components/loading\";\n  export default {\n    name: 'name',\n    props: {\n      patients:{\n        type:Array,\n        required:true\n      },\n      studyId:{\n        type:String,\n        required:true\n      }\n    },\n    components:{\n      altTable,\n      loadingIcon,\n    },\n    data(){\n      return{\n        columns: [{ header: 'NÂ°' }, { header: 'Email' } ,{header: 'userId'},{ header: 'Action' },{ header: '' }],\n        loadingId : 0,\n        currentPage: 1,\n        limit: 10,\n      }\n    },\n    methods: {\n      handleSelecPatient(patientId){\n        this.loadingId = patientId\n        this.$router.push({name: \"healthUser\", query: {studyId: this.studyId, userId: patientId }})\n      }, \n      handlePagination(pagination) {\n        this.currentPage=pagination.currentPage\n        this.limit=pagination.limit\n        let total = this.patients.length\n        if(this.currentPage > Math.ceil(total/this.limit)){\n          this.currentPage = Math.ceil(total/this.limit)\n        }\n      },\n    },\n    computed:{\n      paginationOptions() {\n        return {\n          limit: [10, 20],\n          total: this.patients?.length,\n          currentPage: this.currentPage,\n        };\n      },\n      getPageItems() {\n        let items = this.patients;\n        let lowerLimit = (this.currentPage - 1) * this.limit;\n        let upperLimit = this.currentPage * this.limit;\n        return items.slice(lowerLimit, upperLimit);\n      },\n    }\n  };\n</script>\n<style lang=\"scss\" scoped>\n  .btn-view{\n    padding: 0.4rem 1.8em;\n    background: #b71540;\n    color: white;\n  }\n</style>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}