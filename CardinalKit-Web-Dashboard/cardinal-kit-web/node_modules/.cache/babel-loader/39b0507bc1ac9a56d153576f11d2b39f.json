{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Question from \"@/components/surveys/SurveyBuilder/Questions\";\nimport { mapActions, mapGetters } from \"vuex\";\nimport { uuidv4 } from \"@/helpers\";\nimport store from \"@/store\";\nimport Swal from 'sweetalert2';\nexport default {\n  name: \"App\",\n  props: {\n    studyId: {\n      type: String,\n      required: true\n    }\n  },\n  data: () => ({\n    image: null,\n    main: true,\n    section: \"\",\n    subtitle: \"\",\n    title: \"\",\n    scopeTypes: [\"Public\", \"Private\"],\n    surveyName: \"\",\n    orderQuestion: 0,\n    orderSurvey: \"1\",\n    questions: {},\n    errMsg: false,\n    msg: \"\",\n    cl: \"\",\n    errors: {}\n  }),\n  components: {\n    Question\n  },\n  methods: { ...mapActions(\"surveys\", [\"AddSurvey\"]),\n\n    addQuestion() {\n      this.errMsg = false;\n      this.msg = \"\";\n      this.orderQuestion += 1;\n      let id = uuidv4();\n      this.questions[id] = {\n        title: \"\",\n        id: id,\n        type: \"\",\n        scope: \"public\",\n        identifier: \"\",\n        description: \"\",\n        question: [],\n        required: true,\n        options: [],\n        order: \"\" + this.orderQuestion\n      };\n    },\n\n    deleteQuestions(index) {\n      delete this.questions[index];\n    },\n\n    validSurvey(questions, data, isValid) {\n      // review if question has data\n      for (const [key, value] of Object.entries(questions)) {\n        if (!this.$refs[value.id].reviewQuestionData()) {\n          isValid = false;\n        }\n      }\n\n      if (isValid) {\n        let id = uuidv4();\n        data['identifier'] = id;\n        this.AddSurvey({\n          id: id,\n          studyId: this.studyId,\n          questions: questions,\n          data: data\n        }).then(() => {\n          this.errMsg = true;\n          Swal.fire({\n            title: 'success',\n            text: \"Surveys Builder has been created successfully\",\n            icon: 'success'\n          }).then(() => {\n            this.$router.push(`/surveysList/${this.studyId}`);\n          });\n        });\n      } else {\n        this.errMsg = true;\n        this.cl = \"alert-err\";\n        this.msg = \"Some data is incorrect\";\n        Swal.fire({\n          title: 'Error',\n          text: \"Some data is incorrect\",\n          icon: 'warning'\n        });\n      }\n    },\n\n    classError(value) {\n      if (this.errors[value]) {\n        return \"input-no-value-style\";\n      }\n\n      return \"\";\n    },\n\n    saveSurveybuild() {\n      this.errMsg = false;\n      this.msg = \"\";\n\n      if (!(this.section && this.subtitle && this.title)) {\n        Swal.fire({\n          title: 'Error',\n          text: \"The fields can't be blank\",\n          icon: 'warning'\n        });\n        this.errMsg = true;\n      }\n\n      if (Object.keys(this.questions).length) {\n        let surveyData = {\n          'image': \"SurveyIcon\",\n          'order': this.orderSurvey,\n          'section': this.section,\n          'subtitle': this.subtitle,\n          'title': this.title,\n          'main': this.main\n        };\n        let questionIdentifiers = Object.keys(this.questions).map(key => {\n          return this.questions[key].identifier;\n        });\n        let uniqueIdentifiers = new Set(questionIdentifiers);\n\n        if (questionIdentifiers.length == uniqueIdentifiers.size) {\n          this.validSurvey(this.questions, surveyData, !this.errMsg);\n        } else {\n          if (!this.errMsg) {\n            this.errMsg = true;\n            Swal.fire({\n              title: 'Error',\n              text: \"The question identifiers must be unique\",\n              icon: 'warning'\n            });\n          }\n        }\n      } else {\n        if (!this.errMsg) {\n          this.errMsg = true;\n          Swal.fire({\n            title: 'Error',\n            text: \"The questions cannot be empty\",\n            icon: 'warning'\n          });\n        }\n      }\n\n      this.errors[\"title\"] = this.title ? false : true;\n      this.errors[\"subtitle\"] = this.subtitle ? false : true;\n      this.errors[\"section\"] = this.section ? false : true;\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/views/surveys/surveysBuilder.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"wrapper\">\n      <h1 class=\"text-center text-muted font-weight-bold\">Surveys Builder</h1>\n      <br />\n      <div class=\"input-form\">\n        <!-- <div :class=\"cl\" v-if=\"errMsg\">\n          {{msg}}\n        </div>-->\n        <label>Title: </label>\n        <input v-model=\"title\" type=\"text\" placeholder=\"Enter the title\"  :class=\"classError('title')\"/>\n        <br />\n        <label>Subtitle: </label>\n        <input v-model=\"subtitle\" type=\"text\" placeholder=\"Enter the subtitle\" :class=\"classError('subtitle')\" />\n        <br />\n        <label class=\"my-4\">Show on main screen: </label>\n        <input v-model=\"main\" type=\"checkbox\" />\n        <br />\n        <label>Order: </label>\n        <input v-model=\"orderSurvey\" type=\"number\"  min=\"1\" pattern=\"^[0-9]+\" :class=\"classError('order')\"/>\n        <br />\n        <label>Section: </label>\n        <input v-model=\"section\" type=\"text\" placeholder=\"Enter the section\" :class=\"classError('section')\"/>\n        <!-- <br />\n        <label>Icon: </label>\n        <input type=\"file\" placeholder=\"Icon\" accept=\"image/*\" /> -->\n        <br>\n        <div v-for=\"question in questions\" :key=\"question.id\">\n          <Question :question=\"question\" :readonly=\"false\" @DeleteQuestion=\"deleteQuestions\" :ref=\"question.id\" />\n        </div>\n        <br />\n        <div class=\"form-group my-4\">\n          <button @click=\"addQuestion\" type=\"button\" class=\"btn btn-secondary\">\n            Add question\n          </button>\n        </div>\n\n        <div class=\"form-group\">\n          <button @click=\"saveSurveybuild\" type=\"button\" class=\"btn btn-primary\">\n            Save\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Question from \"@/components/surveys/SurveyBuilder/Questions\";\nimport { mapActions, mapGetters } from \"vuex\";\nimport { uuidv4 } from \"@/helpers\";\nimport store from \"@/store\";\nimport Swal from 'sweetalert2'\n\nexport default {\n  name: \"App\",\n  props: {\n    studyId: {\n      type: String,\n      required: true,\n    }\n  },\n  data: () => ({\n      image: null,\n      main: true,\n      section: \"\",\n      subtitle: \"\",\n      title: \"\",\n      scopeTypes: [\"Public\", \"Private\"],\n      surveyName: \"\",\n      orderQuestion:0,\n      orderSurvey:\"1\",\n      questions: {},\n      errMsg: false,\n      msg:\"\",\n      cl: \"\",\n      errors:{}\n  }),\n  components: {\n      Question,\n  },\n  methods: {\n    ...mapActions(\"surveys\", [\"AddSurvey\"]),\n    addQuestion() {\n      this.errMsg = false\n      this.msg = \"\"\n      this.orderQuestion+=1\n      let id = uuidv4()\n      this.questions[id]={\n        title: \"\",\n        id: id,\n        type: \"\",\n        scope: \"public\",\n        identifier: \"\",\n        description: \"\",\n        question: [],\n        required: true,\n        options: [],\n        order:\"\"+this.orderQuestion\n      }\n    },\n    deleteQuestions(index) {\n      delete this.questions[index]\n    },\n    validSurvey(questions, data,isValid){\n      // review if question has data\n      for(const[key,value] of Object.entries(questions)){\n        if(!this.$refs[value.id].reviewQuestionData()){\n          isValid = false\n        }        \n      }\n      if(isValid){\n        let id = uuidv4()\n        data['identifier'] = id\n        this.AddSurvey({\n          id: id,\n          studyId: this.studyId,\n          questions: questions,\n          data: data,\n        }).then(()=>{\n          this.errMsg = true\n\n          Swal.fire({\n            title: 'success',\n            text:   \"Surveys Builder has been created successfully\",\n            icon: 'success'\n          }).then(()=>{\n            this.$router.push(`/surveysList/${this.studyId}`)\n          })\n        })\n      }\n      else{\n        this.errMsg = true\n        this.cl = \"alert-err\"\n        this.msg=\"Some data is incorrect\"\n\n        Swal.fire({\n          title: 'Error',\n          text: \"Some data is incorrect\",\n          icon: 'warning'\n        })\n      }\n    },\n    classError(value){\n      if(this.errors[value]){\n        return \"input-no-value-style\"\n      }\n      return \"\"\n    },\n    saveSurveybuild() {\n      this.errMsg = false\n      this.msg=\"\"\n      if(!(this.section && this.subtitle && this.title)){\n        Swal.fire({\n          title: 'Error',\n          text: \"The fields can't be blank\",\n          icon: 'warning'\n        })\n        this.errMsg = true  \n      }\n\n      if(Object.keys(this.questions).length){\n        let surveyData={\n          'image':\"SurveyIcon\",\n          'order':this.orderSurvey,\n          'section':this.section,\n          'subtitle':this.subtitle,\n          'title':this.title,\n          'main': this.main\n        }        \n          let questionIdentifiers = Object.keys(this.questions).map((key)=>{\n            return this.questions[key].identifier\n          }) \n          let uniqueIdentifiers =new Set(questionIdentifiers)\n          if(questionIdentifiers.length==uniqueIdentifiers.size){\n            this.validSurvey(this.questions, surveyData,!this.errMsg)\n          }\n          else{\n            if(!this.errMsg){\n              this.errMsg = true            \n              Swal.fire({\n                title: 'Error',\n                text: \"The question identifiers must be unique\",\n                icon: 'warning'\n              })\n            }\n           \n          }\n        }else{\n          if(!this.errMsg){\n            this.errMsg = true\n            Swal.fire({\n              title: 'Error',\n              text: \"The questions cannot be empty\",\n              icon: 'warning'\n            })\n          }\n        }\n\n\n\n      this.errors[\"title\"]=this.title ? false : true\n        this.errors[\"subtitle\"]=this.subtitle ? false : true\n        this.errors[\"section\"]=this.section ? false : true\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.input-no-value-style {\n  background-color:pink !important;\n}\n.wrapper {\n  margin-top: 5%;\n  margin-bottom: 5%;\n}\n.input-form{\n  margin: auto;\n  width: 60%;\n}\n.surveys > div {\n  margin: 10px 0;\n  padding-bottom: 10px;\n}\n.btn {\n  color: black;\n  background: transparent;\n  display: inline-block;\n  font-weight: 400;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  border: 1px solid transparent;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border-radius: 0.25rem;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,\n    border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n.btn-secondary {\n  text-decoration: none;\n  color: black;\n  border-color: #000000;\n  background: #b71540;\n}\n.btn-terceary {\n  text-decoration: underline;\n  color: black;\n  border-color: #000000;\n  background: transparent;\n}\n\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}