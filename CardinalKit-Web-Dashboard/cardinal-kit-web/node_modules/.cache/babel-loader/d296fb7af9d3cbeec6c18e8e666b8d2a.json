{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { transformAppleCode, transformHealthDataToGlobalFormat } from \"@/common/helpers/healthKit\";\nimport { dataTypeToCalculateAverage, dataTypeToRounded } from \"@/common/static_data\";\nexport function saveSpecificTypeData(state, payload) {\n  let copy = { ...state.healthData\n  };\n  copy[payload.datatype] = payload.data;\n  state.healthData = copy;\n}\nexport function saveLastCategoryData(state, {\n  category,\n  data\n}) {\n  let categoryWebFormat = [];\n  data.forEach(element => {\n    if (element && element.length > 0) {\n      let transform = transformHealthDataToGlobalFormat(element[0]);\n\n      if (transform.HkCode.includes(\"HKWorkoutActivityType\")) {\n        if (element.length > 1) {\n          element.forEach(row => {\n            categoryWebFormat.push(transformHealthDataToGlobalFormat(row));\n          });\n        } else {\n          categoryWebFormat.push(transform);\n        }\n      } else if (!transform.HkCode.includes(\"Category\")) {\n        transform.Value = 0;\n        element.forEach(record => {\n          let NewRecord = transformHealthDataToGlobalFormat(record);\n          transform.Value += NewRecord.Value;\n        });\n\n        if (dataTypeToCalculateAverage.includes(transform.HkCode)) {\n          transform.Value = transform.Value / element.length;\n\n          if (dataTypeToRounded.includes(transform.HkCode)) {\n            transform.Value = Math.round(transform.Value);\n          }\n        }\n\n        transform.Value = parseFloat(parseFloat(transform.Value).toFixed(2));\n      }\n\n      categoryWebFormat.push(transform);\n    }\n  });\n  let copyHealth = { ...state.healthData\n  };\n  copyHealth[category] = data;\n  state.healthData = copyHealth;\n  let copyWebFormat = { ...state.healthWebFormat\n  };\n  copyWebFormat[category] = categoryWebFormat;\n  state.healthWebFormat = copyWebFormat;\n}\nexport function saveValidCategories(state, payload) {\n  state.validCategories = payload;\n}\nexport function saveMetricData(state, metricData) {\n  state.userMetricData = metricData;\n}","map":{"version":3,"names":["transformAppleCode","transformHealthDataToGlobalFormat","dataTypeToCalculateAverage","dataTypeToRounded","saveSpecificTypeData","state","payload","copy","healthData","datatype","data","saveLastCategoryData","category","categoryWebFormat","forEach","element","length","transform","HkCode","includes","row","push","Value","record","NewRecord","Math","round","parseFloat","toFixed","copyHealth","copyWebFormat","healthWebFormat","saveValidCategories","validCategories","saveMetricData","metricData","userMetricData"],"sources":["/Users/chrislim/Desktop/USC/Senior Fall/CSCI401/CardinalKit-Web-Dashboard/cardinal-kit-web/src/store/modules/patient/HealthData/mutations.js"],"sourcesContent":["import { transformAppleCode,transformHealthDataToGlobalFormat } from \"@/common/helpers/healthKit\"\nimport { dataTypeToCalculateAverage, dataTypeToRounded } from \"@/common/static_data\"\n\n\n\nexport function saveSpecificTypeData(state, payload) {\n    let copy = {...state.healthData}\n    copy[payload.datatype] = payload.data\n    state.healthData=copy\n}\n\n\n\nexport function saveLastCategoryData(state, {category,data}){\n    \n    let categoryWebFormat = []\n    data.forEach(element => {        \n        if(element && element.length>0){\n            let transform = transformHealthDataToGlobalFormat(element[0])\n            if (transform.HkCode.includes(\"HKWorkoutActivityType\")){\n                if(element.length>1){\n                    element.forEach((row)=>{\n                        categoryWebFormat.push(transformHealthDataToGlobalFormat(row))\n                    })\n                }\n                else{\n                    categoryWebFormat.push(transform)\n                }\n            }\n            else if(!transform.HkCode.includes(\"Category\")){\n                    transform.Value = 0\n                element.forEach(record => {\n                    let NewRecord = transformHealthDataToGlobalFormat(record)\n                    transform.Value += NewRecord.Value\n                });        \n                if(dataTypeToCalculateAverage.includes(transform.HkCode)){\n                    transform.Value=transform.Value/element.length\n                    if(dataTypeToRounded.includes(transform.HkCode)){\n                        transform.Value = Math.round(transform.Value)\n                    }\n                }\n                transform.Value= parseFloat(parseFloat(transform.Value).toFixed(2))\n            }\n            categoryWebFormat.push(transform)\n        }\n    });\n    let copyHealth = {...state.healthData}\n    copyHealth[category]=data\n    state.healthData=copyHealth\n    \n    let copyWebFormat = {...state.healthWebFormat}\n    copyWebFormat[category]=categoryWebFormat\n    state.healthWebFormat=copyWebFormat\n}\n\nexport function saveValidCategories(state,payload){\n    state.validCategories = payload\n  }\n\nexport function saveMetricData(state,metricData){\n    state.userMetricData=metricData \n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}